[{"title":"Hexo仓库重新拉取配置","url":"/cmchtge8k0001negb7z3s4pdl/","content":"Hexo仓库重新拉取配置基础环境配置Node安装\n更新系统并安装依赖\n\nsudo apt updatesudo apt upgrade -ysudo apt install -y ca-certificates curl gnupg\n\n\n添加NodeSourece官方仓库\n\n\n这里安装的是  Node.js 22.x（LTS 长期支持版） ，如果需要其他版本（如 18.x、21.x），替换 node_20.x 即可。\n\ncurl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpgecho &quot;deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_22.x nodistro main&quot; | sudo tee /etc/apt/sources.list.d/nodesource.list\n\n\n安装Node.js和npm\n\nsudo apt updatesudo apt install -y nodejs\n\n\n验证安装\n\n# 检查 Node.js 版本（如 v20.x.x）sunmy@LDSPDVS:~/GitProjects/HexoBackup$ node -vv22.16.0# 检查 npm 版本sunmy@LDSPDVS:~/GitProjects/HexoBackup$ npm -v   10.9.2\n\nnpm升级方法1：使用sudo（推荐临时方案）\n注意:虽然这样可以解决问题，但不推荐长期使用 sudo 安装 npm 全局包，可能导致权限混乱\n\nsudo npm install -g npm@11.4.2\n\n方法2：更改npm全局安装目录（推荐长期方案）\n为了避免使用sudo，可以更改npm的全局安装目录到用户目录\n\n\n创建npm全局目录\n\nmkdir -p ~/.npm_global\n\n\n配置npm使用该目录\n\nnpm config set prefix ~/.npm-global\n\n\n更新PATH环境变量\n\necho &#x27;export PATH=~/.npm-global/bin:$PATH&#x27; &gt;&gt; ~/.bashrcsource ~/.bashrc\n\n\n重新安装npm（无需sudo）\n\nnpm install -g npm@latest\n\n\n验证\n\nnpm -v  # 应该显示最新版（如 11.4.2）which npm  # 应该显示 ~/.npm-global/bin/npm\n\n方法3：使用nvm管理Node.js和npm（最佳实践）\n安装nvm\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n\n然后重新加载 shell：\nsource ~/.bashrc\n\n\n安装最新 Node.js（自带 npm）\n\nnvm install --ltsnvm use --lts\n\n\n更新 npm\n\nnpm install -g npm@latest\n\n安装hexo-cli# 安装Hexo CLInpm install -g hexo-cli\n\n更新主题npm install hexo-theme-redefine@latest\n\n克隆Hexo备份仓库git clone &lt;你的仓库地址&gt; &lt;文件夹名&gt;cd &lt;文件夹名&gt;\n\n安装依赖sunmy@LDSPDVS:~/GitProjects$ cd HexoBackup/sunmy@LDSPDVS:~/GitProjects/HexoBackup$ lsREADME.md  _config.redefine.yml  _config.yml  package-lock.json  package.json  scaffolds  source  themessunmy@LDSPDVS:~/GitProjects/HexoBackup$ sunmy@LDSPDVS:~/GitProjects/HexoBackup$ npm install\n\n安装主题依赖（如有）cd themes/&lt;主题名称&gt;npm installcd ../..\n\n本地部署测试hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server\n","categories":["效率工具"],"tags":["Hexo"]},{"title":"MarkDown命令","url":"/cmchtge8m0003negbcwrj4n9h/","content":"Typora入门标题&#x3D;&#x3D;1、标题&#x3D;&#x3D;\n一级标题二级标题三级标题四级标题五级标题六级标题字体&#x3D;&#x3D;2、字体&#x3D;&#x3D;\n斜体\n加粗\n斜体加粗\n删除线\n我是^上标^\n我是下标\n列表&#x3D;&#x3D;3、列表&#x3D;&#x3D;\n\n一二三四五\n上山打老虎\n老虎没打到\n打到小松鼠\n\n\n\n\n\n\n\n\n一二三四五\n上山打老虎\n老虎没打到\n打到小松鼠\n\n表格&#x3D;&#x3D;4、表格&#x3D;&#x3D;\n\n\n\nMON\nTUE\nWED\nTHU\nFRI\n\n\n\n1\n2\n3\n4\n5\n\n\n11\n22\n33\n44\n55\n\n\n引用&#x3D;&#x3D;5、引用&#x3D;&#x3D;\n\n一二三四五\n\n上山打老虎\n\n老虎没打到\n\n打到小松鼠\n\n\n\n\n分割线&#x3D;&#x3D;6、分割线&#x3D;&#x3D;\n\n代码&#x3D;&#x3D;7、代码&#x3D;&#x3D;\n单行代码\ndanhangdaima\n多行java代码    的 的\n\ninclude     c    c\n\n教程\nhttps://www.quanxiaoha.com/article/typora-pojie.html\n\n","categories":["效率工具"],"tags":["MarkDown"]},{"title":"自动化测试平台搭建","url":"/cmchtge8o0006negb2ab466ww/","content":"自动化测试平台搭建测试平台技术论证与实践初步方案需要2台服务器(a,b)均安装Ubuntu 2204，a作为Gitlab服务器，b作为Jenkins服务器，同时均安装docker作为镜像的部署工具。\n存在问题\n\n\n序号\n问题简述\n解决方案\n当前状态\n\n\n\n1\n系统采用centos还是ubuntu\nubuntu\n\n\n\n2\n采用docker方式安装配置Gitlab还有Jenkins，还是直接在系统上部署Gitlab，Jenkins？docker安装，便于部署，升级，但是目前只在单机上验证过部署Gitlab\tdocker\n\n\n\n\n基础环境配置(下表将列出所有电脑通用环境配置)\n\n\n\n软件名称\n开放端口\n软件版本\n\n\n\nDocker Client&#x2F; Docker Compose\n——\n24.0.7\n\n\nGit\n——\nDocker version 24.0.7, build afdd53b\n\n\nPortainer\n19000\n2.19.4\n\n\n软件基本信息\n\n\n软件名称\n部署设备名称\n开放端口\n软件版本\n\n\n\nGitlab\nPC_02(192.168.2.136)\n19980、19922、19443\n16.7\n\n\nJenkins\nPC_01(192.168.2.105)\n18080、50000\n2.440\n\n\nVsCode\nPC_01(192.168.2.105)\n18000\n1.4.0\n\n\n硬件基本信息\n\n\n设备名称（角色）\n设备IP\n系统信息\n\n\n\nPC_01(Jenkins)\n192.168.2.105\nroot@DESK-01:&#x2F;home&#x2F;qwea# uname -a Linux DESK-01 6.2.0-39-generic #40~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Nov 16 10:53:04 UTC 2 x86_64 x86_64 x86_64 GNU&#x2F;Linux\n\n\nPC_02(Gitlab)\n192.168.2.136\nroot@DESK-02:# uname -a Linux DESK-02 6.2.0-37-generic #3822.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Nov  2 18:01:13 UTC 2 x86_64 x86_64 x86_64 GNU&#x2F;Linux\n\n\nserver(Centos测试机)\n192.168.2.135\nroot@server sqa# uname -a Linux server 4.18.0-348.7.1.el8_5.x86_64 #1 SMP Wed Dec 22 13:25:12 UTC 2021 x86_64 x86_64 x86_64 GNU&#x2F;Linux\n\n\n系统初始化配置Firefox配置关闭 Firefox 的提示 “您必须先登录此网络才能访问互联网\n\n在搜索地址栏输入about:config\n搜索 network.captive-portal-service.enabled，并将值设为 false\n\n系统更新# 系统更新apt update &amp;&amp; apt-get updateapt upgrade &amp;&amp; apt-get upgrade# 安装必要基本软件sudo apt-get install -y iputils-ping net-tools curl openssh-server vim\n\n通用基础软件配置MAKE GCCroot@DESK-01:/newFS# apt-get install -y makeroot@DESK-01:/newFS# apt install -y build-essential manpages-devroot@7fcd1a013aa4:/# apt install -y build-essential manpages-dev --fix-missingroot@DESK-01:/newFS# gcc --versiongcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0Copyright (C) 2021 Free Software Foundation, Inc.This is free software; see the source for copying conditions.  There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.root@DESK-01:/newFS# \n\nSSH# 开启SSHsudo systemctl start ssh# 系统开机自起sudo systemctl enable ssh# 查看状态sudo systemctl status ssh防火墙配置Bash# 查看状态root@DESK-02:/home/qwea# systemctl status ufw● ufw.service - Uncomplicated firewall     Loaded: loaded (/lib/systemd/system/ufw.service; enabled; vendor preset: enabled)     Active: active (exited) since Tue 2024-01-09 16:39:51 CST; 17h ago       Docs: man:ufw(8)   Main PID: 590 (code=exited, status=0/SUCCESS)        CPU: 816us1月 09 16:39:51 DESK-01 systemd[1]: Starting Uncomplicated firewall...1月 09 16:39:51 DESK-01 systemd[1]: Finished Uncomplicated firewall.root@DESK-02:/home/qwea# # 查看开发端口root@DESK-02:/home/qwea# netstat -aptn激活Internet连接 (服务器和已建立连接的)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name  tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      648/systemd-resolve tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      868/cupsd         tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      13663/sshd: /usr/sb tcp        0      0 0.0.0.0:19922           0.0.0.0:*               LISTEN      14593/docker-proxy  tcp        0      0 0.0.0.0:19980           0.0.0.0:*               LISTEN      14550/docker-proxy  tcp        0      0 0.0.0.0:19000           0.0.0.0:*               LISTEN      17029/docker-proxy  tcp        0      0 0.0.0.0:19443           0.0.0.0:*               LISTEN      14570/docker-proxy  tcp        0      0 192.168.2.136:22        192.168.2.105:35836     ESTABLISHED 56290/sshd: qwea [p tcp        0      0 192.168.2.136:59410     34.120.208.123:443      ESTABLISHED 2493/firefox      tcp6       0      0 ::1:631                 :::*                    LISTEN      868/cupsd         tcp6       0      0 :::22                   :::*                    LISTEN      13663/sshd: /usr/sb tcp6       0      0 :::19922                :::*                    LISTEN      14600/docker-proxy  tcp6       0      0 :::19980                :::*                    LISTEN      14557/docker-proxy  tcp6       0      0 :::19000                :::*                    LISTEN      17035/docker-proxy  tcp6       0      0 :::19443                :::*                    LISTEN      14577/docker-proxy  root@DESK-02:/home/qwea# \n\nDocker安装# 自动脚本安装bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)\n\nGit# add-apt-repository ppa:git-core/ppa # apt update;# apt install git\n\nPortainerroot@DESK-01:/newFS/docker# docker run -d \\-p 19000:9000 \\--name=portainer \\--restart=always \\-v /var/run/docker.sock:/var/run/docker.sock \\--privileged=true \\portainer/portainer-ce:latest\n\nGitlabDocker Client(推荐)# 运行镜像docker run -itd \\-p 19443:443 \\-p 19980:80 \\-p 19922:22 \\-u root \\-v /newFS/docker/gitlab/data/log:/var/log/gitlab \\-v /newFS/docker/gitlab/data/opt:/var/opt/gitlab \\-v /newFS/docker/gitlab/data/etc:/etc/gitlab \\--restart=unless-stopped \\--name=gitlab \\gitlab/gitlab-ce# 查看密码sudo docker exec -it gitlab grep &#x27;Password:&#x27; /etc/gitlab/initial_root_password\n\nDocker Compose# 1 创建Docker配置文件mkdir /srv/docker/gitlabcd /srv/docker/gitlabchmod -R a+w /srv/docker/gitlab/# 2 编辑Docker Filevim docker-compose.ymlversion: &#x27;3.1&#x27;services:  gitlab:    image: &#x27;gitlab/gitlab-ce:latest&#x27;    container_name: gitlab    restart: always    environment:      GITLAB_OMNIBUS_CONFIG: |        external_url &#x27;http://192.168.11.11:8929&#x27;        gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224    ports:      - &#x27;8929:8929&#x27;      - &#x27;2224:2224&#x27;    volumes:      - &#x27;./config:/etc/gitlab&#x27;      - &#x27;./logs:/var/log/gitlab&#x27;      - &#x27;./data:/var/opt/gitlab&#x27;    # 3 启动镜像docker-compose up -d\n\nJenkinsDocker Client(推荐)docker run -itd \\-p 18080:8080 \\-p 50000:50000 \\-u root \\-v /newFS/docker/jenkins/jenkins_home:/var/jenkins_home \\-v /etc/localtime:/etc/localtime \\--restart=unless-stopped \\--name=jenkins \\jenkins/jenkins# 也可以通过以下方式修改时区，暂未验证docker rm -f jenkinsdocker run -itd \\-p 18080:8080 \\-p 50000:50000 \\-u root \\-v /newFS/docker/jenkins/jenkins_home:/var/jenkins_home \\-e JAVA_OPTS=-Duser.timezone=Asia/Shanghai \\--restart=unless-stopped \\--name=jenkins \\jenkins/jenkins\n\nDocker Compose# 1 创建Docker配置文件mkdir /srv/docker/jenkinscd /srv/docker/jenkinschmod -R a+w /srv/docker/jenkins/# 2 编辑Docker Filevim docker-compose.ymlversion: &quot;3.1&quot;services:  jenkins:    image: jenkins/jenkins    container_name: jenkins    ports:      - 8080:8080      - 50000:50000    volumes:      - ./data/:/var/jenkins_home/# 3 启动镜像docker-compose up -d# 4 查看密码登录Jenkinsdocker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword# 4 更新下载地址# 修改数据卷中的hudson.model.UpdateCenter.xml文件&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;&lt;sites&gt;  &lt;site&gt;    &lt;id&gt;default&lt;/id&gt;    &lt;url&gt;https://updates.jenkins.io/update-center.json&lt;/url&gt;  &lt;/site&gt;&lt;/sites&gt;# 将下载地址替换为http://mirror.esuni.jp/jenkins/updates/update-center.json&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;&lt;sites&gt;  &lt;site&gt;    &lt;id&gt;default&lt;/id&gt;    &lt;url&gt;http://mirror.esuni.jp/jenkins/updates/update-center.json&lt;/url&gt;  &lt;/site&gt;&lt;/sites&gt;# 清华大学的插件源也可以https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\n\nVsCodeDocker Clientdocker run -d \\ --privileged \\ --restart=always \\ --name vscode-server \\ -p 18000:8000 \\ -e PASSWORD=code-server \\ -e SUDO_PASSWORD=root \\ -e VSCODE_KEYRING_PASS=&quot;vscode&quot; \\ -e VSCODE_SERVE_MODE=serve-local \\ -v /newFS/docker/vscode-server:/root/code/vscode-server \\ ahmadnassri/vscode-server:1.4.0\n\n系统初始化gcc -vapt update &amp;&amp; apt-get updateapt-get install -y build-essential gdb iputils-ping net-tools vim\n\nGit配置# 配置提交用户名git config --global user.name &quot;test01&quot;# 配置提交用户邮箱git config --global user.email &quot;test01@sqa-chn.com&quot;\n\n拉取项目root@f0a5b14e4336:~/code/vscode-server/GitProjects# root@f0a5b14e4336:~/code/vscode-server/GitProjects# git clone http://192.168.2.136:19980/root/test.gitCloning into &#x27;test&#x27;...remote: Enumerating objects: 3, done.remote: Counting objects: 100% (3/3), done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Receiving objects: 100% (3/3), done.root@f0a5b14e4336:~/code/vscode-server/GitProjects# ^Croot@f0a5b14e4336:~/code/vscode-server/GitProjects# lstestroot@f0a5b14e4336:~/code/vscode-server/GitProjects# cd test/root@f0a5b14e4336:~/code/vscode-server/GitProjects/test# lsREADME.mdroot@f0a5b14e4336:~/code/vscode-server/GitProjects/test# \n\n搭建过程问题记录Docker overlay2迁移docker部署应用过程中，默认会在 &#x2F;var&#x2F;lib&#x2F;docker 下新建overlay2数据卷，占用存储空间，解决方法如下\n# 如果系统原有硬盘空间不足可以通过挂载额外硬盘的方式增加存储空间# 如果原有空余硬盘存，应先考虑对其进行分区，格式化，然后再挂载到指定目录root@DESK-02:~# fdisk /dev/sda# 上述命令执行后会得到一个 /dev/sda1 的分区root@DESK-02:~# mkfs.ext4 /dev/sda1# 挂载到指定目录root@DESK-02:~# mdkir /newFSroot@DESK-02:~# mount /dev/sda1 /newFS# 查看docker的存储目录root@DESK-02:~# docker info | grep &quot;Docker Root Dir&quot; Docker Root Dir: /var/lib/dockerroot@DESK-02:~# systemctl stop dockerWarning: Stopping docker.service, but it can still be activated by:  docker.socketroot@DESK-02:~# mkdir -p /newFS/var/lib/dockerroot@DESK-02:~# cp -r /var/lib/docker/* /newFS/var/lib/dockerroot@DESK-02:~# vim /etc/docker/daemon.json root@DESK-02:~# root@DESK-02:~# root@DESK-02:~# cat /etc/docker/daemon.json &#123;  &quot;registry-mirrors&quot;: [&quot;https://registry.cn-beijing.aliyuncs.com&quot;],  &quot;data-root&quot;: &quot;/newFS/var/lib/docker&quot;,  &quot;storage-driver&quot;: &quot;overlay2&quot;&#125;root@DESK-02:~# root@DESK-02:~# root@DESK-02:~# systemctl daemon-reloadroot@DESK-02:~# systemctl start docker.serviceroot@DESK-02:~# systemctl enable docker.serviceroot@DESK-02:~# root@DESK-02:~# root@DESK-02:~# docker psCONTAINER ID   IMAGE             COMMAND                   CREATED       STATUS         PORTS                                                                                        NAMES687838d398ec   jenkins/jenkins   &quot;/usr/bin/tini -- /u…&quot;   2 hours ago   Up 4 seconds   0.0.0.0:50000-&gt;50000/tcp, :::50000-&gt;50000/tcp, 0.0.0.0:18080-&gt;8080/tcp, :::18080-&gt;8080/tcp   jenkinsroot@DESK-02:~# root@DESK-02:~# root@DESK-02:~# docker info | grep &quot;Docker Root Dir&quot; Docker Root Dir: /newFS/var/lib/dockerroot@DESK-02:~# \n\nGitlab http 克隆地址更改为本地IPdocker部署Gitlab之后系统仓库克隆地址会变为字符串，并非实际IP地址:自定义端口，解决方法如下\n通过映射配置目录修改gitlab.rb配置配置文件root@DESK-02:/# find /newFS/docker/gitlab/ -name gitlab.rbroot@DESK-02:/# vim /newFS/docker/gitlab/data/etc/gitlab.rb# 修改以下配置文件#+++++++++++++++++++++++++++++++++++++++++++++++++++++external_url &#x27;http://192.168.2.136:19980&#x27;  nginx[&#x27;listen_port&#x27;] = 80#+++++++++++++++++++++++++++++++++++++++++++++++++++++# 重启Gitlabroot@DESK-02:/# docker restart gitlab\n\n按以上配置的效果是可以使用端口访问gitlab的web服务\n直接修改Gitlab容器内的配置文件（此方法未解决，容器重启后依然会出现）# 进入Gitlab容器修改配置文件后重启root@DESK-02:/home/qwea# docker exec -it gitlab /bin/bashroot@963e760bd6b3:/# cd /opt/gitlab/embedded/service/gitlab-rails/configroot@963e760bd6b3:/opt/gitlab/embedded/service/gitlab-rails/config# pwd/opt/gitlab/embedded/service/gitlab-rails/configroot@963e760bd6b3:/opt/gitlab/embedded/service/gitlab-rails/config# vi gitlab.ymlroot@963e760bd6b3:/opt/gitlab/embedded/service/gitlab-rails/config# root@963e760bd6b3:/opt/gitlab/embedded/service/gitlab-rails/config# gitlab-ctl restartok: run: alertmanager: (pid 32374) 0sok: run: gitaly: (pid 32392) 0sok: run: gitlab-exporter: (pid 32428) 1sok: run: gitlab-kas: (pid 32441) 0sok: run: gitlab-workhorse: (pid 32457) 0sok: run: logrotate: (pid 32479) 1sok: run: nginx: (pid 32485) 0sok: run: postgres-exporter: (pid 32513) 1sok: run: postgresql: (pid 32522) 0sok: run: prometheus: (pid 32524) 0sok: run: puma: (pid 32559) 1sok: run: redis: (pid 32564) 0sok: run: redis-exporter: (pid 32573) 1sok: run: sidekiq: (pid 32589) 0sok: run: sshd: (pid 32595) 0sroot@963e760bd6b3:/opt/gitlab/embedded/service/gitlab-rails/config# root@963e760bd6b3:/opt/gitlab/embedded/service/gitlab-rails/config# root@963e760bd6b3:/opt/gitlab/embedded/service/gitlab-rails/config# cat gitlab.yml# This file is managed by gitlab-ctl. Manual changes will be# erased! To change the contents below, edit /etc/gitlab/gitlab.rb# and run `sudo gitlab-ctl reconfigure`.production: &amp;base  #  # 1. GitLab app settings  # ==========================  ## GitLab settings  gitlab:    ## Web server settings (note: host is the FQDN, do not include http://)    host: 192.168.2.136 // 修改为实际地址    port: 19980                // 修改为实际端口    https: false\n\nDocker创建测试环境Ubuntu# ubuntu2204docker run -itd --user=root \\-v /newFS/docker/ubuntu_2204:/root \\--name=ubuntu_2204 \\ubuntu:22.04docker run -itd --user=root \\-v /newFS/docker/ubuntu_arm64v8:/root \\--name=ubuntu_arm64v8 \\arm64v8/ubuntu\n\nCentos现有的环境中Jenkins容器编译好的结果文件，放在Ubuntu2204上测试没有问题，但是放在Centos8上执行出现GLIBC版本错误\n[root@server sqa]# ./all_test ./all_test: /lib64/libc.so.6: version `GLIBC_2.34&#x27; not found (required by ./all_test)[root@server sqa]#\n\n\n分析错误信息可以知道在Centos8上执行二进制文件（all_test），需要glibc的版本至少为GLIBC_2.34，而现在系统上的glibc版本低于执行文件需要的版本\n查看测试过程中所有设备的glibc版本\n\n\n\n\n设备名称\nGLIBC版本\nGLIBC版本详细信息\n\n\n\nDESK-01\n2.35\nroot@DESK-01:~# ldd –version ldd (Ubuntu GLIBC 2.35-0ubuntu3.6) 2.35\n\n\nDESK-02\n2.35\nroot@DESK-02:~# ldd –version ldd (Ubuntu GLIBC 2.35-0ubuntu3.5) 2.35\n\n\nserver\n2.28\n[root@server sqa]# ldd –version ldd (GNU libc) 2.28\n\n\nGitlab\n2.35\nroot@963e760bd6b3:&#x2F;# ldd –version ldd (Ubuntu GLIBC 2.35-0ubuntu3.5) 2.35\n\n\nJenkins\n2.36\nroot@7fcd1a013aa4:&#x2F;# ldd –version ldd (Debian GLIBC 2.36-9+deb12u3) 2.36\n\n\nVsCode\n2.37\nroot@f0a5b14e4336:&#x2F;# ldd –version ldd (Ubuntu GLIBC 2.37-0ubuntu2.2) 2.37\n\n\n\n解决方法a.\t更新测试机中GLIBC的版本（glibc是系统级别的库，全局更新，风险较大）b.\t按照测试机中的GLIBC版本重新编译文件（测试系统中存在过多环境版本，增加管理成本）c.\t交叉编译？\n\n使用交叉编译适配不同架构测试环境root@DESK-01:/newFS/data/x86_64# tar -xvf gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz root@DESK-01:/newFS/data/x86_64# vim /etc/profile# 加入下面内容export PATH=$PATH:/newFS/data/x86_64/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin# 验证root@DESK-01:/newFS/data/x86_64# root@DESK-01:/newFS/data/x86_64# aarch64-none-linux-gnu-gcc -v使用内建 specs。COLLECT_GCC=aarch64-none-linux-gnu-gccCOLLECT_LTO_WRAPPER=/newFS/data/x86_64/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/../libexec/gcc/aarch64-none-linux-gnu/10.3.1/lto-wrapper目标：aarch64-none-linux-gnu配置为：/data/jenkins/workspace/GNU-toolchain/arm-10/src/gcc/configure --target=aarch64-none-linux-gnu --prefix= --with-sysroot=/aarch64-none-linux-gnu/libc --with-build-sysroot=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/install//aarch64-none-linux-gnu/libc --with-bugurl=https://bugs.linaro.org/ --enable-gnu-indirect-function --enable-shared --disable-libssp --disable-libmudflap --enable-checking=release --enable-languages=c,c++,fortran --with-gmp=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --with-mpfr=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --with-mpc=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --with-isl=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --enable-fix-cortex-a53-843419 --with-pkgversion=&#x27;GNU Toolchain for the A-profile Architecture 10.3-2021.07 (arm-10.29)&#x27;线程模型：posixSupported LTO compression algorithms: zlibgcc 版本 10.3.1 20210621 (GNU Toolchain for the A-profile Architecture 10.3-2021.07 (arm-10.29)) root@DESK-01:/newFS/data/x86_64# \n\n用户名密码管理\n\n\n软件名称\n访问地址\n用户名\n密码\n备注\n\n\n\nGitlab\nhttp://192.168.2.136:19980/\nroot\n1234qwer\n\n\n\nGitlab\nhttp://192.168.2.136:19980/\ntest01\n1234qwer\n提交代码过程建议使用测试用户，非必要不使用root用户\n\n\nJenkins\nhttp://192.168.2.105:18080/\nroot\n1234qwer\n\n\n\nVsCode\nhttp://192.168.2.105:18000/\n——\n——\n\n\n\nPortainer\nhttp://192.168.2.105:19000/\nadmin\n1234qwer@qwea\n\n\n\nPortainer\nhttp://192.168.2.136:19000/\nadmin\n1234qwer@qwea\n\n\n\n项目配置Gitlab项目配置用户管理用户注册模板\n项目仓库管理管理员设置项目仓库用户权限如果想要Gitlab项目中的用户具有代码拉取推送的权限，需要设置为Maintainer的权限\nJenkins项目配置容器配置# 系统更新apt update &amp;&amp; apt-get updateapt upgrade &amp;&amp; apt-get upgrade# 安装必要基本软件sudo apt-get install -y iputils-ping net-tools curl openssh-server vim\n\nPublish Over SSH\n进入系统主页后，依次选择系统管理、插件管理\n选择可用插件（Available plugins），搜索Publish Over SSH 点击安装\n安装后可在已安装插件（Installed plugins）里查看到\n\n配置SSH服务器\n进入系统主页后，依次选择系统管理、系统配置\n设置SSH Servers\n\nDocker Pipeline\n参考上述插件安装过程，进入系统主页后，依次选择系统管理、插件管理，选择可用插件（Available plugins），搜索Docker Pipeline点击安装\n配置流水线语法\n\npipeline &#123;    agent &#123;        docker &#123; image &#x27;node:6.3&#x27; &#125;    &#125;    stages &#123;        stage(&#x27;build&#x27;) &#123;            steps &#123;                sh &#x27;npm --version&#x27;            &#125;        &#125;    &#125;&#125;\n\n\n如果想使用docker镜像作为基础环境，需要系统具备docker环境，且安装了使用的镜像\n上述过程中可能会出现，Jenkins用户和docker用户权限不足的问题，解决方法如下\n\n# Pipeline Console Outp[Pipeline] Start of Pipeline[Pipeline] nodeRunning on Jenkins in /var/lib/jenkins/workspace/test[Pipeline] &#123;[Pipeline] isUnix (hide)[Pipeline] withEnv[Pipeline] &#123;[Pipeline] sh+ docker inspect -f . node:6.3permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/node:6.3/json&quot;: dial unix /var/run/docker.sock: connect: permission denied[Pipeline] isUnix[Pipeline] withEnv[Pipeline] &#123;[Pipeline] sh+ docker pull node:6.3permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/images/create?fromImage=node&amp;tag=6.3&quot;: dial unix /var/run/docker.sock: connect: permission denied[Pipeline] &#125;[Pipeline] // withEnv[Pipeline] &#125;[Pipeline] // withEnv[Pipeline] &#125;[Pipeline] // node[Pipeline] End of PipelineERROR: script returned exit code 1Finished: FAILURE# 1 将 Jenkins 用户添加到 Docker 组:sudo usermod -aG docker jenkins# 注意：jenkins 是默认情况下 Jenkins 进程运行的用户名。如果您的 Jenkins 进程使用不同的用户，请替换为相应的用户名。# 2 重新启动 Jenkins: 重启 Jenkins 以使组成员身份更改生效。sudo service jenkins restart# 3 确认 Docker 组成员身份:groups jenkins# 4 重新运行 Jenkins Pipeline:重新运行您的 Jenkins Pipeline，看看是否解决了 Docker 权限问题。\n\n自由风格软件项目Demo\n选择自由风格创建项目，输入项目名，点击确定\n选择General 进行配置设置丢弃旧的构建，保持5天构建，最大构建7个（根据需要自行设置）\n选择源码管理 添加仓库地址，第1次添加Git仓库地址可能出现如下错误\n\na.\t点击 添加，选择Jenkins\nb.\t配置Jenkins 选择具有Gitlab仓库权限的用户名密码，其他根据需要自行决定，添加完成后点击Credentials，选择成功添加的凭据、选择要构建的分支\nc.\t重新回到源码管理页面选择设置好的Credentials\n\n根据需要配置构建触发器\n根据需要配置构建环境\n选择Build Steps，点击增加构建步骤，可根据需要选择执行shell或Send files or execute commands over SSH等。\n\na.\t选择执行shell，在Jenkins中执行make命令，构建项目b.\t选择执行shell，在Jenkins中执行make命令，对编译后的结果文件增加执行权限c.\t选择 Send files or execute commands over SSH，将Jenkins编译好的需要的结果文件传输到远程服务器\n\n选择构建后操作，点击增加构建后操作步骤，可根据需要选择Send build artifacts over SSH等。a.\t选择Send build artifacts over SSH，在远程服务器上执行命令，自动保存log\n\nb.\t预先配置好要执行的远程脚本如下，自动执行结果文件并保存到指定文件\n流水线项目Demo\n选择自由风格创建项目，输入项目名，点击确定\n选择General 进行配置设置丢弃旧的构建，保持5天构建，最大构建7个（根据需要自行设置）\n根据需要配置构建触发器\n根据需要配置高级项目选项\n选择流水线，根据需要选择流水线语法进行配置a.\t从Gitlab拉取测试仓库，选择步骤，点击checkout: Check out from version control，输入Repository URL、Credentials、指定分支后点击生成流水线脚本\n在Jenkins上执行make命令编译仓库内的文件\n传输结果文件到远程服务器\n在远程服务器执行命令，自动保存log\n流水线项目Demo脚本\n\npipeline &#123;    agent any    stages &#123;        stage(&#x27;Pull Code&#x27;) &#123;            steps &#123;                checkout scmGit(branches: [[name: &#x27;*/main&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;Gitlab_test_01&#x27;, url: &#x27;http://192.168.2.136:19980/root/test.git&#x27;]])            &#125;        &#125;        stage(&quot;Make&quot;)&#123;            steps&#123;                sh &quot;make&quot;            &#125;        &#125;        stage(&quot;Send&quot;)&#123;            steps&#123;                sshPublisher(publishers: [sshPublisherDesc(configName: &#x27;DESK-02&#x27;, transfers: [sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &#x27;&#x27;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#x27;[, ]+&#x27;, remoteDirectory: &#x27;/home/qwea/target&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;&#x27;, sourceFiles: &#x27;all_test,test_control_remote.sh&#x27;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])            &#125;        &#125;        stage(&quot;Remote Exec&quot;)&#123;            steps&#123;                sshPublisher(publishers: [sshPublisherDesc(configName: &#x27;DESK-02&#x27;, transfers: [sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &#x27;&#x27;&#x27;cd /home/qwea/targetchmod +x ./*./test_control_remote.sh&#x27;&#x27;&#x27;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#x27;[, ]+&#x27;, remoteDirectory: &#x27;&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;&#x27;, sourceFiles: &#x27;&#x27;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])            &#125;        &#125;    &#125;&#125;\n\nSSH Key（暂未确定SSH Key是否跟远程服务器上传有关）Jenkines主机生成密钥\n# jenkines主机生成ssh密钥root@DESK-01:~# ssh-keygen -t rsa -b 2048Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsaYour public key has been saved in /root/.ssh/id_rsa.pubThe key fingerprint is:SHA256:c1tNQlP4nTnUcQDOPCogkPb0b9sXh0uXOUeIG8jvqPA root@DESK-01The key&#x27;s randomart image is:+---[RSA 2048]----+|  ..        ++oo+||  o..      =.. .o|| . o...  . .*oooo||    ....  o.o=o+o||       .S o..+.+.||        o+ o* * .||      .. o.+ = o ||       o. o +    ||        E. .     |+----[SHA256]-----+root@DESK-01:~# \n\nGitlab主机生成密钥\nroot@DESK-02:~# ssh-keygen -t rsa -b 2048Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Created directory &#x27;/root/.ssh&#x27;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsaYour public key has been saved in /root/.ssh/id_rsa.pubThe key fingerprint is:SHA256:3HbOx0epxu6jwPqd5UtLwillne004jUawWmF4MPOToo root@DESK-02The key&#x27;s randomart image is:+---[RSA 2048]----+|           .. .. ||          o ..o  ||           + =   ||       . .o + + .||        S o*.= B.||        o.B++.O.o||       E = =oXo..||        . + Xo.. ||       ... +o*o  |+----[SHA256]-----+root@DESK-02:~# \n\nVsCode 容器生成密钥\n将客户端主机密钥添加到要连接的服务端主机上\n# 1. ubuntu 默认禁止root通过ssh登陆，需要先修改如下配置root@DESK-02:~/.ssh# vim /etc/ssh/sshd_config#++++++++++++++++++++++++++++++++++++++++++++++++++++++#LoginGraceTime 2mPermitRootLogin yes#StrictModes yes#MaxAuthTries 6#MaxSessions 10PubkeyAuthentication yes# Expect .ssh/authorized_keys2 to be disregarded by default in future.AuthorizedKeysFile      .ssh/authorized_keys .ssh/authorized_keys2#++++++++++++++++++++++++++++++++++++++++++++++++++++++# 修改完成后，重启ssh服务root@DESK-02:~/.ssh# systemctl restart ssh\n\npipeline &#123;    agent any    stages &#123;        stage(&#x27;拉取代码&#x27;) &#123;            steps &#123;                checkout scmGit(branches: [[name: &#x27;*/main&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;Gitlab_test_01&#x27;, url: &#x27;http://192.168.2.136:19980/root/test.git&#x27;]])            &#125;        &#125;        stage(&#x27;编译代码&#x27;) &#123;            steps &#123;                sh &quot;pwd&quot;                sh &quot;uname -a&quot;                sh &quot;ls&quot;                sh &quot;make --version&quot;                sh &quot;gcc --version&quot;                echo &quot;========&quot;                sh &quot;make&quot;                echo &quot;========&quot;                echo &quot;./all_test&quot;                sh &quot;./all_test&quot;            &#125;        &#125;        stage(&#x27;传输执行文件&#x27;)&#123;            steps&#123;                echo &quot;传输执行文件&quot;                // sh &quot;scp all_test root@192.168.2.136:/root&quot;            &#125;        &#125;    &#125;  &#125;\n\nSlave 节点管理\nJenkins的任务可以分布在不同的节点上运行\n节点上需要配置Java运行时化境，Java_Version &gt; 1.5\n节点支持WIndows，Linux, Max\nJenkins运行的主机在逻辑上是master节点\n\n添加节点系统管理 》 节点管理\n使用手册测试流程管理\nCI&#x2F;CD流程\n代码仓库管理  在Gitlab上依据3.3.2 安全车控操作系统测评能力要求中的测试分类新建不同的代码仓库，分别是协议符合性(ProtocolConformance)、功能(Function)、性能(Performance)、可靠性(Reliability)、专项测试(SpecialTest)、功能安全(FunctionalSafety)  以上所有仓库新建main、dev、test分支，除系统管理员外，所有人员只有往test分支提交或拉取代码的权限，禁止操作main分支和dev分支，系统管理员可以管理审核test分支上的代码确认无误后提交到dev分支，进行CICD操作，CICD验证无误后，可以将代码合并到main分支。\n人员角色权限管理\n系统管理员 代码审核，仓库管理\n开发\n测试\n维护\n\n","categories":["技术尝试"],"tags":["Gitlab","Jenkins","VsCode","Docker"]},{"title":"OpenEulerMugen","url":"/cmchtge8q0009negbg1gn7xdj/","content":"OpenEuler Mugen\n初步分析优点\n测试范围广\n\n系统级别：覆盖操作系统，嵌入式系统测试；\n功能级别：文件系统、网络、内存、系统内置库（glibc）等；\n终端命令级别：curl、git、gdb、mkfs、tftp等；\n编程语言：php、python、java等；\n开源插件：fio、iperf、ltp(需要git)等；\n其他：k3s、mysql、nginx、openssl等。\n\n\n多维度用例执行策略\n\n执行测试框架内所有用例\n执行指定测试套件下所有用例\n执行单条用例\n\n\n用例编写灵活\n\n模板化管理用例\n\n集成系统多层次公共函数\n\n日志打印\n结果检查\nrpm包安装卸载\n远程命令执行\n目录文件传输\n空闲端口状态查询\n获取网卡，磁盘设备信息\n睡眠等待\n远端重启等待\n\n\n\n\n组合测试\n\n可以针对现有测试套件，通过增加（add）或删除（del）命令组合成一个新的测试套件，适配不同的测试情况\n\n&#123;    // 配置运行环境需要export的环境变量    &quot;export&quot;: &#123;        &quot;FIND_TINY_DIR&quot;:&quot;/home/openeuler/tmp_image/tiny&quot;    &#125;,    // 运行环境配置，可选，支持host、qemu(嵌入式场景)，必须为列表，即使只有一个    &quot;env&quot;: [         &#123;            // 类型 type 必须配置，qemu类型kernal_img_path、initrd_path、qemu_type必配，其他参数参考qemu_ctl.sh参数            &quot;type&quot;: &quot;qemu&quot;,            // 名称 name 必须配置            &quot;name&quot;: &quot;qemu_1&quot;,            // kernal_img_path、initrd_path可以为本机目录，也可以是网络地址，如果配置目录不存在则会使用wget下载            &quot;kernal_img_path&quot;: &quot;https://mirrors.nju.edu.cn/openeuler/openEuler-22.03-LTS-SP1/embedded_img/arm64/aarch64-std/zImage&quot;,            &quot;initrd_path&quot;: &quot;https://mirrors.nju.edu.cn/openeuler/openEuler-22.03-LTS-SP1/embedded_img/arm64/aarch64-std/openeuler-image-qemu-aarch64-20221228125551.rootfs.cpio.gz&quot;,            &quot;option_wait_time&quot;: &quot;180&quot;,            &quot;login_wait_str&quot;: &quot;openEuler Embedded(openEuler Embedded Reference Distro)&quot;,            &quot;qemu_type&quot;: &quot;aarch64&quot;,            // 嵌入式sdk路径配置，可以为本机目录，也可以是网络地址，如果配置目录不存在则会使用wget下载            &quot;sdk_path&quot;:&quot;https://mirrors.nju.edu.cn/openeuler/openEuler-22.03-LTS-SP1/embedded_img/arm64/aarch64-std/openeuler-glibc-x86_64-openeuler-image-aarch64-qemu-aarch64-toolchain-22.03.sh&quot;,            &quot;put_all&quot;:true        &#125;,        &#123;            // 类型 type 必须配置，host类型，ip、password比配，其他参数参考bash mugen.sh -c            &quot;type&quot;: &quot;host&quot;,            // 名称 name 必须配置            &quot;name&quot;: &quot;host_1&quot;,            &quot;ip&quot;: &quot;192.168.10.100&quot;,            &quot;password&quot;: &quot;openEuler@123&quot;,            &quot;port&quot;: &quot;22&quot;,            &quot;user&quot;: &quot;root&quot;,            &quot;run_remote&quot;: true,            &quot;copy_all&quot;: true        &#125;    ],    // 测试套组合配置，必配，必须为列表，可为多个组合    &quot;combination&quot;: [        &#123;            // 组合名称 name            &quot;name&quot;: &quot;normal_test&quot;,            // 测试用例组合， 必须为列表            &quot;testcases&quot;: [                &#123;                    // 使用全部测试套                    &quot;testsuite&quot;: &quot;embedded_os_basic_test&quot;                &#125;,                &#123;                    // 使用testsuite指定测试套中add里包含的测试用例组成一个新的测试套                    &quot;testsuite&quot;: &quot;embedded_os_basic_extra_test&quot;,                    &quot;add&quot;: [&quot;oe_test_kmod_depmod&quot;, &quot;oe_test_libcap_libcap&quot;]                &#125;,                &#123;                    // 使用testsuite指定测试套中删除del里包含的测试用例组成一个新的测试套                    &quot;testsuite&quot;: &quot;embedded_security_config_test&quot;,                    &quot;del&quot;: &quot;oe_test_check_file_sys_protect_003&quot;                &#125;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;easy_test&quot;,            &quot;testcases&quot;: [                &#123;                    &quot;testsuite&quot;: &quot;embedded_os_basic_test&quot;                &#125;            ]        &#125;    ],    // 执行关系，可选，必须为列表    &quot;execute&quot;:[        &#123;            // 执行环境，必须为列表，env中应为前面运行环境配置中的运行环境名称            &quot;env&quot;:[&quot;qemu_1&quot;, &quot;qemu_2&quot;],            // 执行组合名称，仅支持配置一个            &quot;combination&quot;:&quot;normal_test&quot;        &#125;,        &#123;            &quot;env&quot;:[&quot;qemu_2&quot;],            &quot;combination&quot;:&quot;easy_test&quot;        &#125;,        &#123;            &quot;env&quot;:[&quot;host_1&quot;],            &quot;combination&quot;:&quot;easy_test&quot;        &#125;    ]&#125;\n\n缺点\n测试前提，被测系统必须要支持SSH协议，需要用户名、密码、端口登陆，环境依赖必须联网安装；\n现有测试套件需部署在OpenEuler的系统上，实际测试需要考虑移植或者将此操作系统结合到测试平台中；\n部分测试套件如ltp执行依赖于网络，需要git从仓库下载到本地后才能执行\n如果新增自有测试脚本到测试套件中，需要一定的时间学习\n\n配置信息\n\n\n主机名称\nIP\n\n\n\nopeneuler\n192.168.122.134\n\n\nopeneuler1\n192.168.122.125\n\n\nubuntu2204\n192.168.122.28\n\n\n安装依赖软件bash dep_install.shbash dep_install.sh -e\n\n配置测试套环境变量命令执行\nbash mugen.sh -c --ip $ip --password $passwd --user $user --port $port\n\n参数说明：&#x20;\n\nip：测试机的ip地址\nuser：测试机的登录用户，默认为root\npassword: 测试机的登录密码\nport：测试机ssh登陆端口，默认为22\n\n环境变量文件：.&#x2F;conf&#x2F;env.json\n&#123;    &quot;NODE&quot;: [        &#123;            &quot;ID&quot;: 1,            &quot;LOCALTION&quot;: &quot;local&quot;,            &quot;MACHINE&quot;: &quot;physical&quot;,            &quot;FRAME&quot;: &quot;aarch64&quot;,            &quot;NIC&quot;: &quot;eth0&quot;,            &quot;MAC&quot;: &quot;55:54:00:c8:a9:21&quot;,            &quot;IPV4&quot;: &quot;192.168.0.10&quot;,            &quot;USER&quot;: &quot;root&quot;,            &quot;PASSWORD&quot;: &quot;openEuler12#$&quot;,            &quot;SSH_PORT&quot;: 22,            &quot;BMC_IP&quot;: &quot;&quot;,            &quot;BMC_USER&quot;: &quot;&quot;,            &quot;BMC_PASSWORD&quot;: &quot;&quot;        &#125;,        &#123;            &quot;ID&quot;: 2,            &quot;LOCALTION&quot;: &quot;remote&quot;,            &quot;MACHINE&quot;: &quot;kvm&quot;,            &quot;FRAME&quot;: &quot;aarch64&quot;,            &quot;NIC&quot;: &quot;eth0&quot;,            &quot;MAC&quot;: &quot;55:54:00:c8:a9:22&quot;,            &quot;IPV4&quot;: &quot;192.168.0.11&quot;,            &quot;USER&quot;: &quot;root&quot;,            &quot;PASSWORD&quot;: &quot;openEuler12#$&quot;,            &quot;SSH_PORT&quot;: 22,            &quot;HOST_IP&quot;: &quot;&quot;,            &quot;HOST_USER&quot;: &quot;&quot;,            &quot;HOST_PASSWORD&quot;: &quot;&quot;,            &quot;HOST_SSH_PORT&quot;: &quot;&quot;        &#125;    ]&#125;\n\n测试框架架构mugen测试目录如下，suite2cases 目录定义了所有的测试套，testcases目录下则是所有的脚本，testcases中的每个sh文件即为一个测试脚本，而目录只是用来分类管理测试用例的，测试套的名字并不是从testcases中的文件夹名。\n\n测试套件和脚本对应关系\n\n用例执行\n执行所有用例 bash mugen.sh -a\n执行指定测试套 bash mugen.sh -f testsuite\n执行单条用例 bash mugen.sh -f testsuite -r testcase\n日志输出shell脚本的执行过程\n\nbash mugen.sh -a -x bash mugen.sh -f testsuite -xbash mugen.sh -f testsuite -r testcase -x\n\n\n-f：指定测试套\n-r：指定测试用例\n-a：执行所有用例\n-x：输出debug模式的信息，即控制套输出更加详细的内容\n\n比如执行测试套embedded_application_develop_tests的的用例\n[root@openeuler mugen]# bash mugen.sh -f embedded_application_develop_tests -xMon Jan 22 11:20:53 2024 - INFO  - start to run testcase:oe_test_cpp_hello_world_test.Mon Jan 22 11:21:09 2024 - INFO  - pkgs:(lshw) is already installedMon Jan 22 11:21:11 2024 - ERROR - The case exit by code 3.Mon Jan 22 11:21:11 2024 - INFO  - End to run testcase:oe_test_cpp_hello_world_test.Mon Jan 22 11:21:11 2024 - INFO  - start to run testcase:oe_test_hello_world_test.Mon Jan 22 11:21:27 2024 - INFO  - pkgs:(lshw) is already installedMon Jan 22 11:21:28 2024 - ERROR - The case exit by code 3.Mon Jan 22 11:21:28 2024 - INFO  - End to run testcase:oe_test_hello_world_test.Mon Jan 22 11:21:28 2024 - INFO  - start to run testcase:oe_test_kernel_hello_world_test.Mon Jan 22 11:21:44 2024 - INFO  - pkgs:(lshw) is already installedMon Jan 22 11:21:48 2024 - ERROR - The case exit by code 7.Mon Jan 22 11:21:48 2024 - INFO  - End to run testcase:oe_test_kernel_hello_world_test.Mon Jan 22 11:21:48 2024 - INFO  - A total of 3 use cases were executed, with 0 successes 3 failures and 0 skips.[root@openeuler mugen]# \n\n[root@openeuler mugen]# bash mugen.sh -f file -r file01Mon Jan 22 11:40:35 2024 - INFO  - start to run testcase:file01.Mon Jan 22 11:40:51 2024 - INFO  - pkgs:(lshw) is already installedMon Jan 22 11:40:53 2024 - INFO  - The case exit by code 0.Mon Jan 22 11:40:53 2024 - INFO  - End to run testcase:file01.Mon Jan 22 11:40:53 2024 - INFO  - A total of 1 use cases were executed, with 1 successes 0 failures and 0 skips.[root@openeuler mugen]# \n\n用例添加根据模板编写用例脚本(推荐)source $&#123;OET_PATH&#125;/libs/locallibs/common_lib.sh# 需要预加载的数据、参数配置function config_params() &#123;    LOG_INFO &quot;Start to config params of the case.&quot;    LOG_INFO &quot;No params need to config.&quot;    LOG_INFO &quot;End to config params of the case.&quot;&#125;# 测试对象、测试需要的工具等安装准备function pre_test() &#123;    LOG_INFO &quot;Start to prepare the test environment.&quot;    LOG_INFO &quot;No pkgs need to install.&quot;    LOG_INFO &quot;End to prepare the test environment.&quot;&#125;# 测试点的执行function run_test() &#123;    LOG_INFO &quot;Start to run test.&quot;    # 测试命令：ls    ls -CZl -all    CHECK_RESULT 0    # 测试/目录下是否存在proc|usr|roor|var|sys|etc|boot|dev目录    CHECK_RESULT &quot;$(ls / | grep -cE &#x27;proc|usr|roor|var|sys|etc|boot|dev&#x27;)&quot; 7    LOG_INFO &quot;End to run test.&quot;&#125;# 后置处理，恢复测试环境function post_test() &#123;    LOG_INFO &quot;Start to restore the test environment.&quot;    LOG_INFO &quot;Nothing to do.&quot;    LOG_INFO &quot;End to restore the test environment.&quot;&#125;main &quot;$@&quot;\n\n单纯的shell脚本或python脚本，通过脚本执行的返回码判断用例是否成功。&#x20;\n\n可参考样例：testsuite测试套下用例oe_test_casename_02和oe_test_casename_03\n\n[root@openeuler mugen]# cat testcases/testsuite/oe_test_casename_02/oe_test_casename_02.py #!/usr/bin/python3# Copyright (c) 2021. Huawei Technologies Co.,Ltd.ALL rights reserved.# This program is licensed under Mulan PSL v2.# You can use it according to the terms and conditions of the Mulan PSL v2.#          http://license.coscl.org.cn/MulanPSL2# THIS PROGRAM IS PROVIDED ON AN &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OF ANY KIND,# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.# See the Mulan PSL v2 for more details.##################################### @Author            :   lemon.higgins# @Contact           :   lemon.higgins@aliyun.com# @Date              :   2020-04-09 09:39:43# @License           :   Mulan PSL v2# @Desc              :   Take the test ls command as an example#####################################import os, sys, subprocessLIBS_PATH = os.environ.get(&quot;OET_PATH&quot;) + &quot;/libs/locallibs&quot;sys.path.append(LIBS_PATH)import ssh_cmdret = 0cmd_status = subprocess.getstatusoutput(&quot;ls -CZl --all&quot;)[0]if cmd_status != 0:    ret += 1dir_num = subprocess.getoutput(&quot;ls / | grep -cE &#x27;proc|usr|roor|var|sys|etc|boot|dev&#x27;&quot;)if dir_num != &quot;7&quot;:    ret += 1conn = ssh_cmd.pssh_conn(os.environ.get(&quot;NODE2_IPV4&quot;), os.environ.get(&quot;NODE2_PASSWORD&quot;))exitcode, output = ssh_cmd.pssh_cmd(conn, &quot;ls&quot;)ssh_cmd.pssh_close(conn)if exitcode != 0:    ret += 1else:    if output != &quot;test&quot;:        ret += 1sys.exit(ret)[root@openeuler mugen]#\n\n嵌入式相关测试套件[root@openeuler suite2cases]# find -name &quot;emb*.json&quot;./embedded_mcs_uniproton_test.json./embedded_os_basic_test.json./embedded_tiny_image_test.json./embedded_third_party_packages_test.json./embedded_security_config_test.json./embedded_application_develop_tests.json./embedded_mcs_qemu_test.json./embedded_version_basic_tests.json./embedded_dsoftbus_basic_test.json./embedded_os_basic_extra_test.json./embedded_mcs_rpi4_test.json[root@openeuler suite2cases]# \n\n具体信息\n测试套件共11个，测试用例共141个\n测试记录 bash mugen.sh -f embedded_application_develop_tests.json -xTue Jan 23 10:54:56 2024 - ERROR - In the suite2cases directory, Can&#x27;t find the file of testsuite:embedded_application_develop_tests.json.Tue Jan 23 10:54:56 2024 - INFO  - A total of 0 use cases were executed, with 0 successes 0 failures and 0 skips.openeuler# bash mugen.sh -f embedded_application_develop_tests      Tue Jan 23 10:55:08 2024 - INFO  - start to run testcase:oe_test_kernel_hello_world_test.Tue Jan 23 10:55:27 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:55:31 2024 - ERROR - The case exit by code 7.Tue Jan 23 10:55:31 2024 - INFO  - End to run testcase:oe_test_kernel_hello_world_test.Tue Jan 23 10:55:31 2024 - INFO  - start to run testcase:oe_test_hello_world_test.Tue Jan 23 10:55:47 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:55:49 2024 - ERROR - The case exit by code 3.Tue Jan 23 10:55:49 2024 - INFO  - End to run testcase:oe_test_hello_world_test.Tue Jan 23 10:55:49 2024 - INFO  - start to run testcase:oe_test_cpp_hello_world_test.Tue Jan 23 10:56:04 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:56:06 2024 - ERROR - The case exit by code 3.Tue Jan 23 10:56:06 2024 - INFO  - End to run testcase:oe_test_cpp_hello_world_test.Tue Jan 23 10:56:06 2024 - INFO  - A total of 3 use cases were executed, with 0 successes 3 failures and 0 skips.openeuler# openeuler# openeuler# openeuler# bash mugen.sh -f embedded_dsoftbus_basic_test    Tue Jan 23 10:57:46 2024 - INFO  - start to run testcase:oe_test_SendBytesInterface_001.Tue Jan 23 10:58:01 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:58:03 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 10:58:03 2024 - ERROR - The case exit by code 255.Tue Jan 23 10:58:03 2024 - INFO  - start to run testcase:oe_test_CloseSessionInterface_001.Tue Jan 23 10:58:18 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:58:20 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 10:58:20 2024 - ERROR - The case exit by code 255.Tue Jan 23 10:58:20 2024 - INFO  - start to run testcase:oe_test_FunctionNetwork_002.Tue Jan 23 10:58:35 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:58:37 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 10:58:37 2024 - ERROR - The case exit by code 255.Tue Jan 23 10:58:37 2024 - INFO  - start to run testcase:oe_test_FunctionTransmission_006.Tue Jan 23 10:58:52 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:58:53 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 10:58:53 2024 - ERROR - The case exit by code 255.Tue Jan 23 10:58:54 2024 - INFO  - start to run testcase:oe_test_FunctionSession_004.Tue Jan 23 10:59:09 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:59:10 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 10:59:10 2024 - ERROR - The case exit by code 255.Tue Jan 23 10:59:10 2024 - INFO  - start to run testcase:oe_test_StopDiscoveryInterface_001.Tue Jan 23 10:59:26 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:59:28 2024 - ERROR - The case exit by code 1.Tue Jan 23 10:59:28 2024 - INFO  - End to run testcase:oe_test_StopDiscoveryInterface_001.Tue Jan 23 10:59:28 2024 - INFO  - start to run testcase:oe_test_FreeNodeInfoInterface_001.Tue Jan 23 10:59:43 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 10:59:45 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 10:59:45 2024 - ERROR - The case exit by code 255.Tue Jan 23 10:59:45 2024 - INFO  - start to run testcase:oe_test_GetAllNodeDeviceInfoInterface_001.Tue Jan 23 11:00:00 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:00:01 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 11:00:01 2024 - ERROR - The case exit by code 255.Tue Jan 23 11:00:01 2024 - INFO  - start to run testcase:oe_test_OpenSessionInterface_001.Tue Jan 23 11:00:17 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:00:18 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 11:00:18 2024 - ERROR - The case exit by code 255.Tue Jan 23 11:00:18 2024 - INFO  - start to run testcase:oe_test_FunctionDiscovery_001.Tue Jan 23 11:00:34 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:00:35 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 11:00:35 2024 - ERROR - The case exit by code 255.Tue Jan 23 11:00:35 2024 - INFO  - start to run testcase:oe_test_CreateSessionServerInterface_001.Tue Jan 23 11:00:51 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:00:52 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:00:52 2024 - INFO  - End to run testcase:oe_test_CreateSessionServerInterface_001.Tue Jan 23 11:00:52 2024 - INFO  - start to run testcase:oe_test_DiscoveryInterface_001.Tue Jan 23 11:01:07 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:01:09 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:01:09 2024 - INFO  - End to run testcase:oe_test_DiscoveryInterface_001.Tue Jan 23 11:01:09 2024 - INFO  - start to run testcase:oe_test_FunctionTransmission_005.Tue Jan 23 11:01:25 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:01:26 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 11:01:26 2024 - ERROR - The case exit by code 255.Tue Jan 23 11:01:26 2024 - INFO  - start to run testcase:oe_test_FunctionNetwork_003.Tue Jan 23 11:01:41 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:01:42 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 11:01:42 2024 - ERROR - The case exit by code 255.Tue Jan 23 11:01:43 2024 - INFO  - start to run testcase:oe_test_RemoveSessionServerInterface_001.Tue Jan 23 11:01:58 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:02:00 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:02:00 2024 - INFO  - End to run testcase:oe_test_RemoveSessionServerInterface_001.Tue Jan 23 11:02:00 2024 - INFO  - start to run testcase:oe_test_CloseSessionInterface_002.Tue Jan 23 11:02:15 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:02:16 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 11:02:16 2024 - ERROR - The case exit by code 255.Tue Jan 23 11:02:16 2024 - INFO  - start to run testcase:oe_test_SendMessageInterface_001.Tue Jan 23 11:02:32 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:02:33 2024 - ERROR - The number of machines don&#x27;t meet the requirements for executing the testcase.Tue Jan 23 11:02:33 2024 - ERROR - The case exit by code 255.Tue Jan 23 11:02:33 2024 - INFO  - start to run testcase:oe_test_PublishServiceInterface_001.Tue Jan 23 11:02:49 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:02:50 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:02:50 2024 - INFO  - End to run testcase:oe_test_PublishServiceInterface_001.Tue Jan 23 11:02:50 2024 - INFO  - start to run testcase:oe_test_UnPublishServiceInterface_001.Tue Jan 23 11:03:06 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:03:07 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:03:07 2024 - INFO  - End to run testcase:oe_test_UnPublishServiceInterface_001.Tue Jan 23 11:03:07 2024 - INFO  - A total of 19 use cases were executed, with 0 successes 6 failures and 13 skips.openeuler# openeuler# openeuler# openeuler# openeuler# bash mugen.sh -f embedded_mcs_qemu_test    Tue Jan 23 11:04:54 2024 - INFO  - start to run testcase:oe_mcs_qemu_test_001.Tue Jan 23 11:05:10 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:05:45 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:05:45 2024 - INFO  - End to run testcase:oe_mcs_qemu_test_001.Tue Jan 23 11:05:45 2024 - INFO  - A total of 1 use cases were executed, with 0 successes 1 failures and 0 skips.openeuler# openeuler# openeuler# openeuler# bash mugen.sh -f embedded_mcs_rpi4_testTue Jan 23 11:06:44 2024 - INFO  - start to run testcase:oe_mcs_rpi4_test_001.Tue Jan 23 11:07:00 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:07:32 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:07:32 2024 - INFO  - End to run testcase:oe_mcs_rpi4_test_001.Tue Jan 23 11:07:32 2024 - INFO  - A total of 1 use cases were executed, with 0 successes 1 failures and 0 skips.openeuler# openeuler# openeuler# openeuler# openeuler# bash mugen.sh -f embedded_mcs_uniproton_testTue Jan 23 11:07:48 2024 - INFO  - start to run testcase:oe_mcs_uniproton_test_001.Tue Jan 23 11:08:04 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:08:35 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:08:35 2024 - INFO  - End to run testcase:oe_mcs_uniproton_test_001.Tue Jan 23 11:08:35 2024 - INFO  - A total of 1 use cases were executed, with 0 successes 1 failures and 0 skips.openeuler# openeuler# openeuler# openeuler# openeuler# openeuler# openeuler# openeuler# openeuler# bash mugen.sh -f embedded_os_basic_extra_testTue Jan 23 11:09:04 2024 - INFO  - start to run testcase:oe_test_acl_allow_change_nochange.Tue Jan 23 11:09:20 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:09:24 2024 - ERROR - The case exit by code 3.Tue Jan 23 11:09:24 2024 - INFO  - End to run testcase:oe_test_acl_allow_change_nochange.Tue Jan 23 11:09:24 2024 - INFO  - start to run testcase:oe_test_kmod_rmmod.Tue Jan 23 11:09:40 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:09:41 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:09:41 2024 - INFO  - End to run testcase:oe_test_kmod_rmmod.Tue Jan 23 11:09:41 2024 - INFO  - start to run testcase:oe_test_acl_check_create.Tue Jan 23 11:09:57 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:09:58 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:09:58 2024 - INFO  - End to run testcase:oe_test_acl_check_create.Tue Jan 23 11:09:58 2024 - INFO  - start to run testcase:oe_test_kmod_depmod.Tue Jan 23 11:10:14 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:10:21 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:10:21 2024 - INFO  - End to run testcase:oe_test_kmod_depmod.Tue Jan 23 11:10:21 2024 - INFO  - start to run testcase:oe_test_acl_chacl.Tue Jan 23 11:10:37 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:10:54 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:10:54 2024 - INFO  - End to run testcase:oe_test_acl_chacl.Tue Jan 23 11:10:54 2024 - INFO  - start to run testcase:oe_test_acl_ignore_dal_across.Tue Jan 23 11:11:09 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:11:13 2024 - ERROR - The case exit by code 3.Tue Jan 23 11:11:13 2024 - INFO  - End to run testcase:oe_test_acl_ignore_dal_across.Tue Jan 23 11:11:13 2024 - INFO  - start to run testcase:oe_test_acl_allow_change_ownership.Tue Jan 23 11:11:29 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:11:33 2024 - ERROR - The case exit by code 2.Tue Jan 23 11:11:33 2024 - INFO  - End to run testcase:oe_test_acl_allow_change_ownership.Tue Jan 23 11:11:33 2024 - INFO  - start to run testcase:oe_test_kmod_insmod_lsmod.Tue Jan 23 11:11:49 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:11:50 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:11:50 2024 - INFO  - End to run testcase:oe_test_kmod_insmod_lsmod.Tue Jan 23 11:11:50 2024 - INFO  - start to run testcase:oe_test_libcap_libcap.Tue Jan 23 11:12:05 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:12:09 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:12:09 2024 - INFO  - End to run testcase:oe_test_libcap_libcap.Tue Jan 23 11:12:09 2024 - INFO  - start to run testcase:oe_test_acl_getfacl.Tue Jan 23 11:12:25 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:12:42 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:12:42 2024 - INFO  - End to run testcase:oe_test_acl_getfacl.Tue Jan 23 11:12:42 2024 - INFO  - start to run testcase:oe_test_kmod_kmod.Tue Jan 23 11:12:58 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:12:59 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:12:59 2024 - INFO  - End to run testcase:oe_test_kmod_kmod.Tue Jan 23 11:12:59 2024 - INFO  - start to run testcase:oe_test_acl_only_root_permission.Tue Jan 23 11:13:15 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:13:21 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:13:21 2024 - INFO  - End to run testcase:oe_test_acl_only_root_permission.Tue Jan 23 11:13:21 2024 - INFO  - start to run testcase:oe_test_acl_manage_net.Tue Jan 23 11:13:36 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:13:56 2024 - ERROR - The case exit by code 3.Tue Jan 23 11:13:56 2024 - INFO  - End to run testcase:oe_test_acl_manage_net.Tue Jan 23 11:13:56 2024 - INFO  - start to run testcase:oe_test_acl_change_mask.Tue Jan 23 11:14:12 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:14:18 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:14:18 2024 - INFO  - End to run testcase:oe_test_acl_change_mask.Tue Jan 23 11:14:18 2024 - INFO  - start to run testcase:oe_test_kmod_modprobe.Tue Jan 23 11:14:34 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:14:38 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:14:38 2024 - INFO  - End to run testcase:oe_test_kmod_modprobe.Tue Jan 23 11:14:38 2024 - INFO  - start to run testcase:oe_test_acl_defaulr_rule.Tue Jan 23 11:14:54 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:14:58 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:14:58 2024 - INFO  - End to run testcase:oe_test_acl_defaulr_rule.Tue Jan 23 11:14:58 2024 - INFO  - start to run testcase:oe_test_acl_ordinary_users_setgid.Tue Jan 23 11:15:14 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:15:18 2024 - ERROR - The case exit by code 3.Tue Jan 23 11:15:18 2024 - INFO  - End to run testcase:oe_test_acl_ordinary_users_setgid.Tue Jan 23 11:15:18 2024 - INFO  - start to run testcase:oe_test_acl_verwrite_previous_rules.Tue Jan 23 11:15:34 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:15:35 2024 - ERROR - The case exit by code 4.Tue Jan 23 11:15:35 2024 - INFO  - End to run testcase:oe_test_acl_verwrite_previous_rules.Tue Jan 23 11:15:35 2024 - INFO  - start to run testcase:oe_test_acl_send_kill_notbelong.Tue Jan 23 11:15:51 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:15:58 2024 - ERROR - The case exit by code 3.Tue Jan 23 11:15:58 2024 - INFO  - End to run testcase:oe_test_acl_send_kill_notbelong.Tue Jan 23 11:15:58 2024 - INFO  - start to run testcase:oe_test_proc_start_kill.Tue Jan 23 11:16:13 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:16:15 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:16:15 2024 - INFO  - End to run testcase:oe_test_proc_start_kill.Tue Jan 23 11:16:15 2024 - INFO  - start to run testcase:oe_test_kmod_modinfo.Tue Jan 23 11:16:30 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:16:32 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:16:32 2024 - INFO  - End to run testcase:oe_test_kmod_modinfo.Tue Jan 23 11:16:32 2024 - INFO  - start to run testcase:oe_test_acl_setfacl.Tue Jan 23 11:16:48 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:17:05 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:17:05 2024 - INFO  - End to run testcase:oe_test_acl_setfacl.Tue Jan 23 11:17:05 2024 - INFO  - start to run testcase:oe_test_acl_add_write_permissions.Tue Jan 23 11:17:20 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:17:23 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:17:23 2024 - INFO  - End to run testcase:oe_test_acl_add_write_permissions.Tue Jan 23 11:17:24 2024 - INFO  - A total of 23 use cases were executed, with 16 successes 7 failures and 0 skips.openeuler# openeuler# openeuler# bash mugen.sh -f embedded_os_basic_test    Tue Jan 23 11:23:22 2024 - INFO  - start to run testcase:oe_test_basic_cmd_ln.Tue Jan 23 11:23:37 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:23:39 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:23:39 2024 - INFO  - End to run testcase:oe_test_basic_cmd_ln.Tue Jan 23 11:23:39 2024 - INFO  - start to run testcase:oe_test_system_user_options_003.Tue Jan 23 11:23:54 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:23:59 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:23:59 2024 - INFO  - End to run testcase:oe_test_system_user_options_003.Tue Jan 23 11:23:59 2024 - INFO  - start to run testcase:oe_test_bashrc_umask.Tue Jan 23 11:24:14 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:24:18 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:24:18 2024 - INFO  - End to run testcase:oe_test_bashrc_umask.Tue Jan 23 11:24:18 2024 - INFO  - start to run testcase:oe_test_basic_cmd_mkdir.Tue Jan 23 11:24:33 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:24:35 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:24:35 2024 - INFO  - End to run testcase:oe_test_basic_cmd_mkdir.Tue Jan 23 11:24:35 2024 - INFO  - start to run testcase:oe_test_basic_cmd_acl.Tue Jan 23 11:24:50 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:24:54 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:24:54 2024 - INFO  - End to run testcase:oe_test_basic_cmd_acl.Tue Jan 23 11:24:54 2024 - INFO  - start to run testcase:oe_test_basic_cmd_df.Tue Jan 23 11:25:09 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:25:11 2024 - ERROR - The case exit by code 2.Tue Jan 23 11:25:11 2024 - INFO  - End to run testcase:oe_test_basic_cmd_df.Tue Jan 23 11:25:11 2024 - INFO  - start to run testcase:oe_test_basic_cmd_rm.Tue Jan 23 11:25:27 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:25:28 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:25:28 2024 - INFO  - End to run testcase:oe_test_basic_cmd_rm.Tue Jan 23 11:25:28 2024 - INFO  - start to run testcase:oe_test_basic_cmd_which.Tue Jan 23 11:25:44 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:25:45 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:25:45 2024 - INFO  - End to run testcase:oe_test_basic_cmd_which.Tue Jan 23 11:25:45 2024 - INFO  - start to run testcase:oe_test_basic_cmd_cp.Tue Jan 23 11:26:01 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:26:02 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:26:02 2024 - INFO  - End to run testcase:oe_test_basic_cmd_cp.Tue Jan 23 11:26:02 2024 - INFO  - start to run testcase:oe_test_basic_cmd_mv.Tue Jan 23 11:26:18 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:26:19 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:26:19 2024 - INFO  - End to run testcase:oe_test_basic_cmd_mv.Tue Jan 23 11:26:19 2024 - INFO  - start to run testcase:oe_test_basic_cmd_groupdel.Tue Jan 23 11:26:35 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:26:37 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:26:37 2024 - INFO  - End to run testcase:oe_test_basic_cmd_groupdel.Tue Jan 23 11:26:37 2024 - INFO  - start to run testcase:oe_test_basic_cmd_cd.Tue Jan 23 11:26:53 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:26:54 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:26:54 2024 - INFO  - End to run testcase:oe_test_basic_cmd_cd.Tue Jan 23 11:26:54 2024 - INFO  - start to run testcase:oe_test_basic_cmd_sort.Tue Jan 23 11:27:10 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:27:11 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:27:11 2024 - INFO  - End to run testcase:oe_test_basic_cmd_sort.Tue Jan 23 11:27:11 2024 - INFO  - start to run testcase:oe_test_basic_cmd_lsof.Tue Jan 23 11:27:27 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:27:44 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:27:44 2024 - INFO  - End to run testcase:oe_test_basic_cmd_lsof.Tue Jan 23 11:27:44 2024 - INFO  - start to run testcase:oe_test_system_log_logrotate.Tue Jan 23 11:27:59 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:28:01 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:28:01 2024 - INFO  - End to run testcase:oe_test_system_log_logrotate.Tue Jan 23 11:28:01 2024 - INFO  - start to run testcase:oe_test_basic_cmd_touch.Tue Jan 23 11:28:17 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:29:18 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:29:18 2024 - INFO  - End to run testcase:oe_test_basic_cmd_touch.Tue Jan 23 11:29:18 2024 - INFO  - start to run testcase:oe_test_basic_cmd_wc.Tue Jan 23 11:29:34 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:29:35 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:29:35 2024 - INFO  - End to run testcase:oe_test_basic_cmd_wc.Tue Jan 23 11:29:35 2024 - INFO  - start to run testcase:oe_test_basic_cmd_dd.Tue Jan 23 11:29:51 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:29:52 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:29:52 2024 - INFO  - End to run testcase:oe_test_basic_cmd_dd.Tue Jan 23 11:29:52 2024 - INFO  - start to run testcase:oe_test_basic_cmd_top.Tue Jan 23 11:30:08 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:30:10 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:30:10 2024 - INFO  - End to run testcase:oe_test_basic_cmd_top.Tue Jan 23 11:30:10 2024 - INFO  - start to run testcase:oe_test_basic_cmd_cat.Tue Jan 23 11:30:26 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:30:27 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:30:27 2024 - INFO  - End to run testcase:oe_test_basic_cmd_cat.Tue Jan 23 11:30:27 2024 - INFO  - start to run testcase:oe_test_system_service_sshd.Tue Jan 23 11:30:43 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:31:22 2024 - ERROR - The case exit by code 27.Tue Jan 23 11:31:22 2024 - INFO  - End to run testcase:oe_test_system_service_sshd.Tue Jan 23 11:31:22 2024 - INFO  - start to run testcase:oe_test_basic_cmd_id.Tue Jan 23 11:31:37 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:31:39 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:31:39 2024 - INFO  - End to run testcase:oe_test_basic_cmd_id.Tue Jan 23 11:31:39 2024 - INFO  - start to run testcase:oe_test_os_release.Tue Jan 23 11:31:54 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:31:56 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:31:56 2024 - INFO  - End to run testcase:oe_test_os_release.Tue Jan 23 11:31:56 2024 - INFO  - start to run testcase:oe_test_basic_cmd_grep.Tue Jan 23 11:32:12 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:32:13 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:32:13 2024 - INFO  - End to run testcase:oe_test_basic_cmd_grep.Tue Jan 23 11:32:13 2024 - INFO  - start to run testcase:oe_test_basic_cmd_pwd.Tue Jan 23 11:32:29 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:32:30 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:32:30 2024 - INFO  - End to run testcase:oe_test_basic_cmd_pwd.Tue Jan 23 11:32:30 2024 - INFO  - start to run testcase:oe_test_basic_cmd_date.Tue Jan 23 11:32:46 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:32:47 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:32:47 2024 - INFO  - End to run testcase:oe_test_basic_cmd_date.Tue Jan 23 11:32:47 2024 - INFO  - start to run testcase:oe_test_basic_cmd_ls.Tue Jan 23 11:33:02 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:33:04 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:33:04 2024 - INFO  - End to run testcase:oe_test_basic_cmd_ls.Tue Jan 23 11:33:04 2024 - INFO  - start to run testcase:oe_test_basic_cmd_chmod.Tue Jan 23 11:33:19 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:33:21 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:33:21 2024 - INFO  - End to run testcase:oe_test_basic_cmd_chmod.Tue Jan 23 11:33:21 2024 - INFO  - start to run testcase:oe_test_basic_cmd_umask.Tue Jan 23 11:33:36 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:33:38 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:33:38 2024 - INFO  - End to run testcase:oe_test_basic_cmd_umask.Tue Jan 23 11:33:38 2024 - INFO  - start to run testcase:oe_test_basic_cmd_dmesg.Tue Jan 23 11:33:53 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:33:55 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:33:55 2024 - INFO  - End to run testcase:oe_test_basic_cmd_dmesg.Tue Jan 23 11:33:55 2024 - INFO  - start to run testcase:oe_test_basic_cmd_groupmod.Tue Jan 23 11:34:11 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:34:15 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:34:15 2024 - INFO  - End to run testcase:oe_test_basic_cmd_groupmod.Tue Jan 23 11:34:15 2024 - INFO  - start to run testcase:oe_test_basic_cmd_ps.Tue Jan 23 11:34:31 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:34:32 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:34:32 2024 - INFO  - End to run testcase:oe_test_basic_cmd_ps.Tue Jan 23 11:34:32 2024 - INFO  - start to run testcase:oe_test_system_user_options_001.Tue Jan 23 11:34:48 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:34:58 2024 - ERROR - The case exit by code 3.Tue Jan 23 11:34:58 2024 - INFO  - End to run testcase:oe_test_system_user_options_001.Tue Jan 23 11:34:58 2024 - INFO  - start to run testcase:oe_test_basic_cmd_ping.Tue Jan 23 11:35:14 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:35:17 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:35:17 2024 - INFO  - End to run testcase:oe_test_basic_cmd_ping.Tue Jan 23 11:35:17 2024 - INFO  - start to run testcase:oe_test_basic_cmd_su.Tue Jan 23 11:35:33 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:35:36 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:35:36 2024 - INFO  - End to run testcase:oe_test_basic_cmd_su.Tue Jan 23 11:35:36 2024 - INFO  - start to run testcase:oe_test_basic_cmd_uname.Tue Jan 23 11:35:52 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:35:53 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:35:53 2024 - INFO  - End to run testcase:oe_test_basic_cmd_uname.Tue Jan 23 11:35:53 2024 - INFO  - start to run testcase:oe_test_var_log.Tue Jan 23 11:36:09 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:36:15 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:36:15 2024 - INFO  - End to run testcase:oe_test_var_log.Tue Jan 23 11:36:15 2024 - INFO  - start to run testcase:oe_test_basic_cmd_rmdir.Tue Jan 23 11:36:31 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:36:32 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:36:32 2024 - INFO  - End to run testcase:oe_test_basic_cmd_rmdir.Tue Jan 23 11:36:32 2024 - INFO  - start to run testcase:oe_test_basic_cmd_pgrep.Tue Jan 23 11:36:48 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:36:49 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:36:49 2024 - INFO  - End to run testcase:oe_test_basic_cmd_pgrep.Tue Jan 23 11:36:49 2024 - INFO  - start to run testcase:oe_test_basic_cmd_shopt.Tue Jan 23 11:37:05 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:37:06 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:37:06 2024 - INFO  - End to run testcase:oe_test_basic_cmd_shopt.Tue Jan 23 11:37:06 2024 - INFO  - start to run testcase:oe_test_system_user_options_002.Tue Jan 23 11:37:22 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:37:28 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:37:28 2024 - INFO  - End to run testcase:oe_test_system_user_options_002.Tue Jan 23 11:37:28 2024 - INFO  - start to run testcase:oe_test_system_monitor_process.Tue Jan 23 11:37:44 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:37:45 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:37:45 2024 - INFO  - End to run testcase:oe_test_system_monitor_process.Tue Jan 23 11:37:46 2024 - INFO  - start to run testcase:oe_test_basic_cmd_groupadd.Tue Jan 23 11:38:01 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:38:04 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:38:04 2024 - INFO  - End to run testcase:oe_test_basic_cmd_groupadd.Tue Jan 23 11:38:04 2024 - INFO  - start to run testcase:oe_test_basic_cmd_gzip.Tue Jan 23 11:38:20 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:38:21 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:38:21 2024 - INFO  - End to run testcase:oe_test_basic_cmd_gzip.Tue Jan 23 11:38:21 2024 - INFO  - start to run testcase:oe_test_continuous_100M.Tue Jan 23 11:38:37 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:38:50 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:38:50 2024 - INFO  - End to run testcase:oe_test_continuous_100M.Tue Jan 23 11:38:50 2024 - INFO  - start to run testcase:oe_test_basic_cmd_chown.Tue Jan 23 11:39:06 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:39:09 2024 - ERROR - The case exit by code 1.Tue Jan 23 11:39:09 2024 - INFO  - End to run testcase:oe_test_basic_cmd_chown.Tue Jan 23 11:39:09 2024 - INFO  - start to run testcase:oe_test_basic_cmd_sysctl.Tue Jan 23 11:39:25 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:39:26 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:39:26 2024 - INFO  - End to run testcase:oe_test_basic_cmd_sysctl.Tue Jan 23 11:39:26 2024 - INFO  - start to run testcase:oe_test_basic_cmd_tar.Tue Jan 23 11:39:42 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 11:39:43 2024 - INFO  - The case exit by code 0.Tue Jan 23 11:39:43 2024 - INFO  - End to run testcase:oe_test_basic_cmd_tar.Tue Jan 23 11:39:43 2024 - INFO  - A total of 48 use cases were executed, with 29 successes 19 failures and 0 skips.openeuler# openeuler# bash mugen.sh -f embedded_security_config_testTue Jan 23 13:47:08 2024 - INFO  - start to run testcase:oe_test_check_user_account_001.Tue Jan 23 13:47:28 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:47:30 2024 - ERROR - The case exit by code 2.Tue Jan 23 13:47:30 2024 - INFO  - End to run testcase:oe_test_check_user_account_001.Tue Jan 23 13:47:30 2024 - INFO  - start to run testcase:oe_test_check_user_account_006.Tue Jan 23 13:47:46 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:47:47 2024 - ERROR - The case exit by code 1.Tue Jan 23 13:47:47 2024 - INFO  - End to run testcase:oe_test_check_user_account_006.Tue Jan 23 13:47:47 2024 - INFO  - start to run testcase:oe_test_check_user_account_002.Tue Jan 23 13:48:03 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:48:04 2024 - INFO  - The case exit by code 0.Tue Jan 23 13:48:04 2024 - INFO  - End to run testcase:oe_test_check_user_account_002.Tue Jan 23 13:48:04 2024 - INFO  - start to run testcase:oe_test_check_network_firewall_002.Tue Jan 23 13:48:20 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:48:22 2024 - INFO  - The case exit by code 0.Tue Jan 23 13:48:22 2024 - INFO  - End to run testcase:oe_test_check_network_firewall_002.Tue Jan 23 13:48:22 2024 - INFO  - start to run testcase:oe_test_check_file_sys_protect_005.Tue Jan 23 13:48:37 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:48:42 2024 - ERROR - The case exit by code 7.Tue Jan 23 13:48:42 2024 - INFO  - End to run testcase:oe_test_check_file_sys_protect_005.Tue Jan 23 13:48:42 2024 - INFO  - start to run testcase:oe_test_check_user_account_007.Tue Jan 23 13:48:58 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:49:00 2024 - ERROR - The case exit by code 2.Tue Jan 23 13:49:00 2024 - INFO  - End to run testcase:oe_test_check_user_account_007.Tue Jan 23 13:49:00 2024 - INFO  - start to run testcase:oe_test_check_user_account_004.Tue Jan 23 13:49:15 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:49:20 2024 - ERROR - The case exit by code 5.Tue Jan 23 13:49:20 2024 - INFO  - End to run testcase:oe_test_check_user_account_004.Tue Jan 23 13:49:20 2024 - INFO  - start to run testcase:oe_test_check_user_account_008.Tue Jan 23 13:49:36 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:49:37 2024 - INFO  - The case exit by code 0.Tue Jan 23 13:49:37 2024 - INFO  - End to run testcase:oe_test_check_user_account_008.Tue Jan 23 13:49:37 2024 - INFO  - start to run testcase:oe_test_check_file_sys_protect_002.Tue Jan 23 13:49:53 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:49:54 2024 - ERROR - The case exit by code 1.Tue Jan 23 13:49:54 2024 - INFO  - End to run testcase:oe_test_check_file_sys_protect_002.Tue Jan 23 13:49:54 2024 - INFO  - start to run testcase:oe_test_check_ssh_config_003.Tue Jan 23 13:50:10 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:50:12 2024 - ERROR - The case exit by code 3.Tue Jan 23 13:50:12 2024 - INFO  - End to run testcase:oe_test_check_ssh_config_003.Tue Jan 23 13:50:12 2024 - INFO  - start to run testcase:oe_test_check_log_001.Tue Jan 23 13:50:27 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:50:29 2024 - ERROR - The case exit by code 2.Tue Jan 23 13:50:29 2024 - INFO  - End to run testcase:oe_test_check_log_001.Tue Jan 23 13:50:29 2024 - INFO  - start to run testcase:oe_test_check_network_firewall_001.Tue Jan 23 13:50:44 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:50:46 2024 - ERROR - The case exit by code 1.Tue Jan 23 13:50:46 2024 - INFO  - End to run testcase:oe_test_check_network_firewall_001.Tue Jan 23 13:50:46 2024 - INFO  - start to run testcase:oe_test_check_ssh_config_002.Tue Jan 23 13:51:02 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:51:03 2024 - ERROR - The case exit by code 1.Tue Jan 23 13:51:03 2024 - INFO  - End to run testcase:oe_test_check_ssh_config_002.Tue Jan 23 13:51:03 2024 - INFO  - start to run testcase:oe_test_check_file_sys_protect_004.Tue Jan 23 13:51:19 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:51:21 2024 - ERROR - The case exit by code 1.Tue Jan 23 13:51:21 2024 - INFO  - End to run testcase:oe_test_check_file_sys_protect_004.Tue Jan 23 13:51:21 2024 - INFO  - start to run testcase:oe_test_check_file_sys_protect_001.Tue Jan 23 13:51:37 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:51:44 2024 - ERROR - The case exit by code 3.Tue Jan 23 13:51:44 2024 - INFO  - End to run testcase:oe_test_check_file_sys_protect_001.Tue Jan 23 13:51:44 2024 - INFO  - start to run testcase:oe_test_check_user_account_003.Tue Jan 23 13:51:59 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:52:16 2024 - ERROR - The case exit by code 2.Tue Jan 23 13:52:16 2024 - INFO  - End to run testcase:oe_test_check_user_account_003.Tue Jan 23 13:52:16 2024 - INFO  - start to run testcase:oe_test_check_file_sys_protect_003.Tue Jan 23 13:52:31 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:52:33 2024 - INFO  - The case exit by code 0.Tue Jan 23 13:52:33 2024 - INFO  - End to run testcase:oe_test_check_file_sys_protect_003.Tue Jan 23 13:52:33 2024 - INFO  - start to run testcase:oe_test_check_ssh_config_001.Tue Jan 23 13:52:49 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:52:50 2024 - ERROR - The case exit by code 2.Tue Jan 23 13:52:50 2024 - INFO  - End to run testcase:oe_test_check_ssh_config_001.Tue Jan 23 13:52:50 2024 - INFO  - start to run testcase:oe_test_check_runtime_security_001.Tue Jan 23 13:53:06 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:53:07 2024 - ERROR - The case exit by code 1.Tue Jan 23 13:53:07 2024 - INFO  - End to run testcase:oe_test_check_runtime_security_001.Tue Jan 23 13:53:07 2024 - INFO  - start to run testcase:oe_test_check_user_account_005.Tue Jan 23 13:53:23 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:53:28 2024 - ERROR - The case exit by code 5.Tue Jan 23 13:53:28 2024 - INFO  - End to run testcase:oe_test_check_user_account_005.Tue Jan 23 13:53:28 2024 - INFO  - A total of 20 use cases were executed, with 4 successes 16 failures and 0 skips.openeuler# openeuler# openeuler# bash mugen.sh -f embedded_third_party_packages_testTue Jan 23 13:55:24 2024 - INFO  - start to run testcase:oe_test_libcap_test_001.Tue Jan 23 13:55:39 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:55:40 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:55:41 2024 - INFO  - End to run testcase:oe_test_libcap_test_001.Tue Jan 23 13:55:41 2024 - INFO  - start to run testcase:oe_test_util-linux_test_001.Tue Jan 23 13:55:56 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:55:58 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:55:58 2024 - INFO  - End to run testcase:oe_test_util-linux_test_001.Tue Jan 23 13:55:58 2024 - INFO  - start to run testcase:oe_test_libpcap_test_001.Tue Jan 23 13:56:13 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:56:15 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:56:15 2024 - INFO  - End to run testcase:oe_test_libpcap_test_001.Tue Jan 23 13:56:15 2024 - INFO  - start to run testcase:oe_test_libffi_test_001.Tue Jan 23 13:56:30 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:56:32 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:56:32 2024 - INFO  - End to run testcase:oe_test_libffi_test_001.Tue Jan 23 13:56:32 2024 - INFO  - start to run testcase:oe_test_procps_test_001.Tue Jan 23 13:56:47 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:56:49 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:56:49 2024 - INFO  - End to run testcase:oe_test_procps_test_001.Tue Jan 23 13:56:49 2024 - INFO  - start to run testcase:oe_test_shadow_test_001.Tue Jan 23 13:57:04 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:57:06 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:57:06 2024 - INFO  - End to run testcase:oe_test_shadow_test_001.Tue Jan 23 13:57:06 2024 - INFO  - start to run testcase:oe_test_gzip_test_001.Tue Jan 23 13:57:21 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:57:23 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:57:23 2024 - INFO  - End to run testcase:oe_test_gzip_test_001.Tue Jan 23 13:57:23 2024 - INFO  - start to run testcase:oe_test_popt_test_001.Tue Jan 23 13:57:38 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:57:39 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:57:39 2024 - INFO  - End to run testcase:oe_test_popt_test_001.Tue Jan 23 13:57:39 2024 - INFO  - start to run testcase:oe_test_ncurses_test_001.Tue Jan 23 13:57:55 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:57:56 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:57:56 2024 - INFO  - End to run testcase:oe_test_ncurses_test_001.Tue Jan 23 13:57:56 2024 - INFO  - start to run testcase:oe_test_less_test_001.Tue Jan 23 13:58:12 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:58:13 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:58:13 2024 - INFO  - End to run testcase:oe_test_less_test_001.Tue Jan 23 13:58:13 2024 - INFO  - start to run testcase:oe_test_pam_test_001.Tue Jan 23 13:58:29 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:58:30 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:58:30 2024 - INFO  - End to run testcase:oe_test_pam_test_001.Tue Jan 23 13:58:30 2024 - INFO  - start to run testcase:oe_test_json-c_test_001.Tue Jan 23 13:58:46 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:58:48 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:58:48 2024 - INFO  - End to run testcase:oe_test_json-c_test_001.Tue Jan 23 13:58:48 2024 - INFO  - start to run testcase:oe_test_nfs-utils_test_001.Tue Jan 23 13:59:03 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:59:04 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:59:04 2024 - INFO  - End to run testcase:oe_test_nfs-utils_test_001.Tue Jan 23 13:59:04 2024 - INFO  - start to run testcase:oe_test_logrotate_test_001.Tue Jan 23 13:59:20 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:59:22 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:59:22 2024 - INFO  - End to run testcase:oe_test_logrotate_test_001.Tue Jan 23 13:59:22 2024 - INFO  - start to run testcase:oe_test_busybox_test_001.Tue Jan 23 13:59:37 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:59:39 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:59:39 2024 - INFO  - End to run testcase:oe_test_busybox_test_001.Tue Jan 23 13:59:39 2024 - INFO  - start to run testcase:oe_test_sed_test_001.Tue Jan 23 13:59:54 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 13:59:56 2024 - ERROR - The case exit by code 127.Tue Jan 23 13:59:56 2024 - INFO  - End to run testcase:oe_test_sed_test_001.Tue Jan 23 13:59:56 2024 - INFO  - start to run testcase:oe_test_bash-completion_test_001.Tue Jan 23 14:00:11 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:00:13 2024 - ERROR - The case exit by code 127.Tue Jan 23 14:00:13 2024 - INFO  - End to run testcase:oe_test_bash-completion_test_001.Tue Jan 23 14:00:13 2024 - INFO  - start to run testcase:oe_test_e2fsprogs_test_001.Tue Jan 23 14:00:28 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:00:30 2024 - ERROR - The case exit by code 127.Tue Jan 23 14:00:30 2024 - INFO  - End to run testcase:oe_test_e2fsprogs_test_001.Tue Jan 23 14:00:30 2024 - INFO  - start to run testcase:oe_test_dosfstools_test_001.Tue Jan 23 14:00:45 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:00:47 2024 - ERROR - The case exit by code 127.Tue Jan 23 14:00:47 2024 - INFO  - End to run testcase:oe_test_dosfstools_test_001.Tue Jan 23 14:00:47 2024 - INFO  - start to run testcase:oe_test_zlib_test_001.Tue Jan 23 14:01:02 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:01:04 2024 - ERROR - The case exit by code 1.Tue Jan 23 14:01:04 2024 - INFO  - End to run testcase:oe_test_zlib_test_001.Tue Jan 23 14:01:04 2024 - INFO  - start to run testcase:oe_test_elfutils_test_001.Tue Jan 23 14:01:20 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:01:21 2024 - ERROR - The case exit by code 127.Tue Jan 23 14:01:21 2024 - INFO  - End to run testcase:oe_test_elfutils_test_001.Tue Jan 23 14:01:21 2024 - INFO  - A total of 21 use cases were executed, with 0 successes 21 failures and 0 skips.openeuler# openeuler# openeuler# openeuler# bash mugen.sh -f embedded_tiny_image_test        Tue Jan 23 14:04:30 2024 - INFO  - start to run testcase:oe_test_check_aarch_tiny_image_001.Tue Jan 23 14:04:45 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:04:47 2024 - ERROR - The case exit by code 1.Tue Jan 23 14:04:47 2024 - INFO  - End to run testcase:oe_test_check_aarch_tiny_image_001.Tue Jan 23 14:04:47 2024 - INFO  - A total of 1 use cases were executed, with 0 successes 1 failures and 0 skips.openeuler# openeuler# openeuler# openeuler# bash mugen.sh -f embedded_version_basic_testsTue Jan 23 14:05:29 2024 - INFO  - start to run testcase:oe_test_libseccomp_test_001.Tue Jan 23 14:05:45 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:05:46 2024 - ERROR - The case exit by code 127.Tue Jan 23 14:05:46 2024 - INFO  - End to run testcase:oe_test_libseccomp_test_001.Tue Jan 23 14:05:46 2024 - INFO  - start to run testcase:oe_test_version_posix_suite_test_001.Tue Jan 23 14:06:02 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:06:03 2024 - ERROR - The case exit by code 127.Tue Jan 23 14:06:03 2024 - INFO  - End to run testcase:oe_test_version_posix_suite_test_001.Tue Jan 23 14:06:03 2024 - INFO  - start to run testcase:oe_test_version_ltp_test_001.Tue Jan 23 14:06:19 2024 - INFO  - pkgs:(lshw) is already installedTue Jan 23 14:06:20 2024 - ERROR - The case exit by code 127.Tue Jan 23 14:06:20 2024 - INFO  - End to run testcase:oe_test_version_ltp_test_001.Tue Jan 23 14:06:20 2024 - INFO  - A total of 3 use cases were executed, with 0 successes 3 failures and 0 skips.openeuler# \n","categories":["技术尝试"],"tags":["OpenEuler","Mugen"]},{"title":"Linux学习笔记","url":"/cmchtge8q000bnegb15mm6p1r/","content":"入门概述\n我们为什么要学习Linux\n\nlinux诞生了这么多年，以前还喊着如何能取代windows系统，现在这个口号已经小多了，任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，没有办法的事情。\n用习惯了windows操作系统，再让大家切换到别的操作系统基本上是不可能的事情，改变一个人已经养成的习惯太难。没有办法深入到普通老百姓的生活中，并不意味着linux就没有用武之地了。在服务器端，在开发领域linux倒是越来越受欢迎，很多程序员都觉得不懂点linux都觉得不好意思，linux在开源社区的地位依然岿然不动。\n尤其是作为一个后端程序员，是必须要掌握Linux的，因为这都成为了你找工作的基础门槛了，所以不得不学习！\n\nLinux 简介\n\nLinux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。\nLinux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。\nLinux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。\n\nLinux 发行版\n\nLinux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。\n\n目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。\n\n\nLinux 应用领域\n\n今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。\n目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。\n\n巴西联邦政府由于支持 Linux 而世界闻名。\n有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。\n印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。\n中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。\n在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。\n葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。\n法国和德国同样开始逐步采用 Linux。\n\n\nLinux vs Windows\n\n\n环境搭建Linux 的安装，安装步骤比较繁琐，现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！\n\n安装CentOS（虚拟机安装，耗资源）\n\n1、可以通过镜像进行安装！\n2、可以使用我已经制作好的镜像！视频中讲解了该种方式！\n3、安装 VMware 虚拟机软件，然后打开我们的镜像即可使用！\n\n购买云服务器（推荐）\n\n虚拟机安装后占用空间，也会有些卡顿，我们作为程序员其实可以选择购买一台自己的服务器，这样的话更加接近真实线上工作；\n1、阿里云购买服务器：https://www.aliyun.com/minisite/goods?userCode=0phtycgr\n2、购买完毕后，获取服务器的ip地址，重置服务器密码，就可以远程登录了\n3、下载 xShell 工具，进行远程连接使用！连接成功效果如下：\n\n注意事项：\n如果要打开端口，需要在阿里云的安全组面板中开启对应的出入规则，不然的话会被阿里拦截！\n\n如果前期不好操作，可以推荐安装宝塔面板，傻瓜式管理服务器\n\n安装教程：https://www.bt.cn/bbs/thread-19376-1-1.html\n1、开启对应的端口\n2、一键安装\n3、安装完毕后会得到远程面板的地址，账号，密码，就可以登录了\n4、登录之后就可以可视化的安装环境和部署网站！\n\n\n关于域名\n\n如果自己的网站想要上线，就一定要购买一个域名然后进行备案；\n\n备案的话需要一些认证和时间，备完完毕后，就可以解析到自己的网站了，这个时候就可以使用域名来进行服务器的访问！\n走近Linux系统\n开机登录\n\n开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。\n开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！\n一般来说，用户的登录方式有三种：\n\n命令行登录\nssh登录\n图形界面登录\n\n最高权限账户为 root，可以操作一切！\n\n关机\n\n关机指令在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。\n关机指令为：shutdown ；\nsync # 将数据由内存同步到硬盘中。shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机shutdown –h now # 立马关机shutdown –h 20:25 # 系统会在今天20:25关机shutdown –h +10 # 十分钟后关机shutdown –r now # 系统立马重启shutdown –r +10 # 系统十分钟后重启reboot # 就是重启，等同于 shutdown –r nowhalt # 关闭系统，等同于shutdown –h now 和 poweroff\n\n最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。\n目录结构\n系统目录结构\n\n登录系统后，在当前命令窗口下输入命令：\nls /\n\n你会看到如下图所示：\n\n树状目录结构：（Linux的一切资源都挂载在这个 &#x2F; 根节点下）\n\n以下是对这些目录的解释：\n\n&#x2F;bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。\n&#x2F;boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。\n&#x2F;dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。\n&#x2F;etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n&#x2F;home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。\n&#x2F;lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。\n&#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n&#x2F;media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。\n&#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。\n&#x2F;opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n&#x2F;proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。\n&#x2F;root：该目录为系统管理员，也称作超级权限者的用户主目录。\n&#x2F;sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。\n&#x2F;srv：该目录存放一些服务启动之后需要提取的数据。\n&#x2F;sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。\n&#x2F;tmp：这个目录是用来存放一些临时文件的。\n&#x2F;usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。\n&#x2F;usr&#x2F;bin： 系统用户使用的应用程序。\n&#x2F;usr&#x2F;sbin： 超级用户使用的比较高级的管理程序和系统守护程序。\n&#x2F;usr&#x2F;src： 内核源代码默认的放置目录。\n&#x2F;var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n&#x2F;run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。\n\n\n常用的基本命令目录管理绝对路径&#x2F;相对路径\n绝对路径和相对路径\n\n我们知道Linux的目录结构为树状结构，最顶级的目录为**根目录 &#x2F;**。\n其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。\n在开始本教程前我们需要先知道什么是绝对路径与相对路径。\n绝对路径：\n路径的写法，由根目录 &#x2F; 写起，例如：&#x2F;usr&#x2F;share&#x2F;doc 这个目录。\n相对路径：\n路径的写法，不是由 &#x2F; 写起，例如由 &#x2F;usr&#x2F;share&#x2F;doc 要到 &#x2F;usr&#x2F;share&#x2F;man 底下时，可以写成：cd ..&#x2F;man 这就是相对路径的写法啦！\n处理目录的常用命令\n处理目录的常用命令\n\n接下来我们就来看几个常见的处理目录的命令吧：\n\nls: 列出目录\ncd：切换目录\npwd：显示目前的目录\nmkdir：创建一个新的目录\nrmdir：删除一个空的目录\ncp: 复制文件或目录\nrm: 移除文件或目录\nmv: 移动文件与目录，或修改文件与目录的名称\n\n你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。\nls\nls （列出目录）\n\n在Linux系统当中， ls 命令可能是最常被运行的。\n语法：\n[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称\n\n选项与参数：\n\n-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)\n-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)\n\n将目录下的所有文件列出来(含属性与隐藏档)\n[root@www ~]# ls -al ~\n\ncd\ncd （切换目录）\n\ncd是Change Directory的缩写，这是用来变换工作目录的命令。\n语法：\ncd [相对路径或绝对路径]\n\n测试：\n# 切换到用户目录下[root@kuangshen /]# cd home  # 使用 mkdir 命令创建 kuangstudy 目录[root@kuangshen home]# mkdir kuangstudy# 进入 kuangstudy 目录[root@kuangshen home]# cd kuangstudy# 回到上一级[root@kuangshen kuangstudy]# cd ..# 回到根目录[root@kuangshen kuangstudy]# cd /# 表示回到自己的家目录，亦即是 /root 这个目录[root@kuangshen kuangstudy]# cd ~\n\n接下来大家多操作几次应该就可以很好的理解 cd 命令的。\npwd\npwd ( 显示目前所在的目录 )\n\npwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。\n[root@kuangshen kuangstudy]#pwd [-P]\n\n选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。\n测试：\n# 单纯显示出目前的工作目录[root@kuangshen ~]# pwd/root# 如果是链接，要显示真实地址，可以使用 -P参数[root@kuangshen /]# cd bin[root@kuangshen bin]# pwd -P/usr/bin\n\nmkdir\nmkdir （创建新目录）\n\n如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。\nmkdir [-mp] 目录名称\n\n选项与参数：\n\n-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～\n-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！\n\n测试：\n# 进入我们用户目录下[root@kuangshen /]# cd /home# 创建一个 test 文件夹[root@kuangshen home]# mkdir test# 创建多层级目录[root@kuangshen home]# mkdir test1/test2/test3/test4mkdir: cannot create directory ‘test1/test2/test3/test4’:No such file or directory  # &lt;== 没办法直接创建此目录啊！# 加了这个 -p 的选项，可以自行帮你创建多层目录！[root@kuangshen home]# mkdir -p test1/test2/test3/test4# 创建权限为 rwx--x--x 的目录。[root@kuangshen home]# mkdir -m 711 test2[root@kuangshen home]# ls -ldrwxr-xr-x 2 root root  4096 Mar 12 21:55 testdrwxr-xr-x 3 root root  4096 Mar 12 21:56 test1drwx--x--x 2 root root  4096 Mar 12 21:58 test2\n\nrmdir\nrmdir ( 删除空的目录 )\n\n语法：\nrmdir [-p] 目录名称\n\n选项与参数：**-p ：**连同上一级『空的』目录也一起删除\n测试：\n# 看看有多少目录存在？[root@kuangshen home]# ls -ldrwxr-xr-x 2 root root  4096 Mar 12 21:55 testdrwxr-xr-x 3 root root  4096 Mar 12 21:56 test1drwx--x--x 2 root root  4096 Mar 12 21:58 test2# 可直接删除掉，没问题[root@kuangshen home]# rmdir test# 因为尚有内容，所以无法删除！[root@kuangshen home]# rmdir test1rmdir: failed to remove ‘test1’: Directory not empty# 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。[root@kuangshen home]# rmdir -p test1/test2/test3/test4\n\n注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！\ncp\ncp ( 复制文件或目录 )\n\n语法：\n[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory\n\n选项与参数：\n\n-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)\n-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；\n-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；\n-r：递归持续复制，用於目录的复制行为；(常用)\n-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；\n-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)\n-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。\n-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；\n-u：若 destination 比 source 旧才升级 destination ！\n\n测试：\n# 找一个有文件的目录，我这里找到 root目录[root@kuangshen home]# cd /root[root@kuangshen ~]# lsinstall.sh[root@kuangshen ~]# cd /home# 复制 root目录下的install.sh 到 home目录下[root@kuangshen home]# cp /root/install.sh /home[root@kuangshen home]# lsinstall.sh# 再次复制，加上-i参数，增加覆盖询问？[root@kuangshen home]# cp -i /root/install.sh /homecp: overwrite ‘/home/install.sh’? y # n不覆盖，y为覆盖\n\nrm\nrm ( 移除文件或目录 )\n\n语法：\nrm [-fir] 文件或目录\n\n选项与参数：\n\n-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；\n-i ：互动模式，在删除前会询问使用者是否动作\n-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！\n\n测试：\n# 将刚刚在 cp 的实例中创建的 install.sh删除掉！[root@kuangshen home]# rm -i install.shrm: remove regular file ‘install.sh’? y# 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！# 尽量不要在服务器上使用 rm -rf /\n\nmv\nmv  ( 移动文件与目录，或修改名称 )\n\n语法：\n[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory\n\n选项与参数：\n\n-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)\n\n测试：\n# 复制一个文件到当前目录[root@kuangshen home]# cp /root/install.sh /home# 创建一个文件夹 test[root@kuangshen home]# mkdir test# 将复制过来的文件移动到我们创建的目录，并查看[root@kuangshen home]# mv install.sh test[root@kuangshen home]# lstest[root@kuangshen home]# cd test[root@kuangshen test]# lsinstall.sh# 将文件夹重命名，然后再次查看！[root@kuangshen test]# cd ..[root@kuangshen home]# mv test mvtest[root@kuangshen home]# lsmvtest\n\ntouch创建文件\n[root@kuangshen /]# cd /home[root@kuangshen home]# touch f1 # 创建一个测试文件f1[root@kuangshen home]# lsf1\n\n基本属性\n看懂文件属性\n\n系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。\n在Linux中我们可以使用 ll或者 ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：\n\n实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。\n在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：\n\n当为[ d ]则是目录\n当为[ - ]则是文件；\n若是[ l ]则表示为链接文档 ( link file )；\n若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；\n若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。\n\n接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。\n其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。\n要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。\n每个文件的属性由左边第一部分的10个字符来确定（如下图）：\n\n从左至右用0-9这些数字来表示。\n第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。\n其中：\n第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；\n第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；\n第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。\n对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。\n同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。\n文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。\n因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。\n在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。\n\n修改文件属性\n\n1、chgrp：更改文件属组\nchgrp [-R] 更改后属组名 要更改文件名\n\n-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。\n2、chown：更改文件属主，也可以同时更改文件属组\nchown [–R] 更改后属主名 要更改文件名chown [-R] 更改后属主名：更改后属组名 要更改文件名\n\n3、chmod：更改文件9个属性\nchmod [-R] xyz 文件或目录\n\nLinux文件属性有两种设置方法，一种是数字，一种是符号。\nLinux文件的基本权限就有九个，分别是owner&#x2F;group&#x2F;others三种身份各有自己的read&#x2F;write&#x2F;execute权限。\n先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：\nr:4     w:2         x:1\n\n每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：\n\nowner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7\ngroup &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7\nothers&#x3D; — &#x3D; 0+0+0 &#x3D; 0\n\nchmod 770 filename\n\n可以自己下去多进行测试！\n文件内容查看\n概述\n\nLinux系统中使用以下命令来查看文件的内容：\n\ncat 由第一行开始显示文件内容\ntac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！\nnl  显示的时候，顺道输出行号！\nmore 一页一页的显示文件内容\nless 与 more 类似，但是比 more 更好的是，他可以往前翻页！\nhead 只看头几行\ntail 只看尾巴几行\n\n你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。\ncat\ncat 由第一行开始显示文件内容\n\n语法：\ncat [-AbEnTv]\n\n选项与参数：\n\n-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；\n-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！\n-E ：将结尾的断行字节 $ 显示出来；\n-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；\n-T ：将 [tab] 按键以 ^I 显示出来；\n-v ：列出一些看不出来的特殊字符\n\n测试：\n# 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/[root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0BOOTPROTO=dhcpONBOOT=yes\n\ntac\ntac\n\ntac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：\n[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0ONBOOT=yesBOOTPROTO=dhcpDEVICE=eth0\n\nnl\nnl  显示行号\n\n语法：\nnl [-bnw] 文件\n\n选项与参数：\n\n-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；\n-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；\n-w ：行号栏位的占用的位数。\n\n测试：\n[root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth01DEVICE=eth02BOOTPROTO=dhcp3ONBOOT=yes\n\nmore\nmore  一页一页翻动\n\n在 more 这个程序的运行过程中，你有几个按键可以按的：\n\n空白键 (space)：代表向下翻一页；\nEnter   ：代表向下翻『一行』；\n&#x2F;字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；\n:f    ：立刻显示出档名以及目前显示的行数；\nq    ：代表立刻离开 more ，不再显示该文件内容。\nb 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。\n\n[root@kuangshen etc]# more /etc/csh.login....(中间省略)....--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令\n\nless\nless  一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：\n\nless运行时可以输入的命令有：\n\n空白键  ：向下翻动一页；\n[pagedown]：向下翻动一页；\n[pageup] ：向上翻动一页；\n&#x2F;字串  ：向下搜寻『字串』的功能；\n?字串  ：向上搜寻『字串』的功能；\nn   ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)\nN   ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)\nq   ：离开 less 这个程序；\n\n[root@kuangshen etc]# more /etc/csh.login....(中间省略)....:   # 这里可以等待你输入命令！\n\nhead\nhead  取出文件前面几行\n\n语法：\nhead [-n number] 文件\n\n选项与参数：**-n** 后面接数字，代表显示几行的意思！\n默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：\n[root@kuangshen etc]# head -n 20 /etc/csh.login\n\ntail\ntail  取出文件后面几行\n\n语法：\ntail [-n number] 文件\n\n选项与参数：\n\n-n ：后面接数字，代表显示几行的意思\n\n默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：\n[root@kuangshen etc]# tail -n 20 /etc/csh.login\n\nLinux 链接概念\n拓展：Linux 链接概念\n\nLinux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。\n情况下，ln 命令产生硬链接。\n硬连接\n硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。\n硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。\n软连接\n另外一种连接称之为 符号连接（Symbolic Link），也叫软连接。软链接文件有 类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。删除了源文件，快捷方式访问不了\n测试：\n[root@root Documents]# touch f1 # 创建一个测试文件f1[root@root Documents]# ln f1 f2     # 创建f1的一个硬连接文件f2[root@root Documents]# ln -s f1 f3   # 创建f1的一个符号连接文件f3[root@root Documents]# ll总用量 0-rw-r--r--. 2 root root  0 3月  31 11:09 f1-rw-r--r--. 2 root root  0 3月  31 11:09 f2lrwxrwxrwx. 1 root root  2 3月  31 11:10 f3 -&gt; f1drwxrwxr-x. 3 sun  sun  52 3月  31 10:38 tdrwxr-xr-x. 2 root root  6 3月  31 10:31 t2drwxrwxr-x. 3 sun  sun  38 3月  31 10:24 test1[root@root Documents]# ls -li # -i参数显示文件的inode节点信息总用量 034523892 -rw-r--r--. 2 root root  0 3月  31 11:09 f134523892 -rw-r--r--. 2 root root  0 3月  31 11:09 f234528501 lrwxrwxrwx. 1 root root  2 3月  31 11:10 f3 -&gt; f117761549 drwxrwxr-x. 3 sun  sun  52 3月  31 10:38 t18044082 drwxr-xr-x. 2 root root  6 3月  31 10:31 t234523898 drwxrwxr-x. 3 sun  sun  38 3月  31 10:24 test1\n\n从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。\n# echo 字符串输出 I am f1 file 输出到 f1文件[root@root Documents]# echo &quot;I am f1 file&quot; &gt;&gt; f1[root@root Documents]# cat f1I am f1 file[root@root Documents]# cat f2I am f1 file[root@root Documents]# cat f3I am f1 file[root@root Documents]# echo &quot;I am f1 file 2&quot; &gt;&gt; f1[root@root Documents]# cat f1I am f1 fileI am f1 file 2[root@root Documents]# cat f2I am f1 fileI am f1 file 2[root@root Documents]# cat f3I am f1 fileI am f1 file 2[root@root Documents]# echo &quot;f2 file&quot; &gt;&gt; f2[root@root Documents]# cat f1I am f1 fileI am f1 file 2f2 file[root@root Documents]# cat f2I am f1 fileI am f1 file 2f2 file[root@root Documents]# cat f3I am f1 fileI am f1 file 2f2 file[root@root Documents]# rm -f f1[root@root Documents]# cat f1cat: f1: 没有那个文件或目录[root@root Documents]# cat f2I am f1 fileI am f1 file 2f2 file[root@root Documents]# cat f3cat: f3: 没有那个文件或目录[root@root Documents]# \n\n通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；\n依此您可以做一些相关的测试，可以得到以下全部结论：\n\n删除符号连接f3,对f1,f2无影响；\n删除硬连接f2，对f1,f3也无影响；\n删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；\n同时删除原文件f1,硬连接f2，整个文件会真正的被删除。\n\n网络命令1. hostname\nhostname 没有选项，显示主机名字\nhostname –d 显示机器所属域名\nhostname –f 显示完整的主机名和域名\nhostname –i 显示当前机器的 ip 地址\n补充：其实使用 “hostname+新的主机名” 命令还可以临时设置主机名,比如hostname newname\n这样用的好处是，可以临时修改主机名称而不用重启。而通过&#x2F;etc&#x2F;sysconfig&#x2F;network 文件来修改主机名则需要重启才能生效。当然，我们在在执行这个命令后，必须记得手动修改&#x2F;etc&#x2F;sysconfig&#x2F;network 文件里面的 HOSTNAME 的值，以便后续重启生效，这算是一个小技巧哦！\n2. ping\nping 将数据包发向用户指定地址。当包被接收，目标机器发送返回数据包。ping 主要有两个作用：\n\n用来确认网络连接是畅通的。\n用来查看连接的速度信息。\n\n如果你 ping zhangge.net 它将返回它的 ip 地址 。你可以通过 ctrl+C 来停止命令。\n补充：-c 参数可以定义 ping 的次数，脚本中的网络判断用得比较多，比如 ping -c 4  zhangge.net 就是 ping 张戈博客四次；而在 windows 下，则使用-n 参数来定义 ping 次数，如 ping -n 4 zhangge.net\n3. ifconfig\n查看用户网络配置。它显示当前网络设备配置。对于需要接收或者发送数据错误查找，这个工具极为好用。\n补充：Windows 用的 ipconfig，话说博主用久了 Linux，回到 windows 下回经常输入 ifconfig  o(╯□╰)o…\n4. iwconfig\niwconfig 工具与 ifconfig 和 ethtool 类似。是用于无线网卡的 . 你可以用他查看设置基本的 Wi-Fi 网络信息,例如 SSID, channel 和 encryption.还有其他很多配置你也可以查看和修改，, 包括 接收灵敏度, RTS&#x2F;CTS, 发送数据包的分片大小,以及无线网卡的重传机制。\n5. nslookup\nnslookup 这个命令在 有 ip 地址时，可以用这个命令来显示主机名，可以找到给定域名的所有 ip 地址。而你必须连接到互联网才能使用这个命令。\n例子. nslookup marsge.cn\n你也可以使用 nslookup 从 ip 获得主机名或从主机名获得 ip。\n补充：这个命令在 Windows 下同样适用。\n6. traceroute\n一个方便的工具。可用来查看数据包在提交到远程系统或者网站时候所经过的路由器的 IP 地址、跳数和响应时间。同样你必须链接到互联网才能使用这个命令。\n补充：windows 下也有个类似的命令，喜欢玩 Windows 命令的童鞋可以试试：\nMS DOS\n\n\n\n1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16\ntracert       使用方式: tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout]            [-R] [-S srcaddr] [-4] [-6] target_name       选项:      -d         不要将地址解析为主机名。      -h maximum_hops  搜寻目标所用的最大跃点数目。      -j host-list    松散的主机列表来源路由 (仅 IPv4)。      -w timeout     每个回复的等候逾时 (毫秒)。      -R         追踪来回路径 (仅 IPv6)。      -S srcaddr     要使用的来源地址 (仅 IPv6)。      -4         强制使用 IPv4。      -6         强制使用 IPv6。       举例：tracert zhangge.net\n\n\n\n\n\n\n\n7. finger\n查看用户信息。显示用户的登录名字、真实名字以及登录终端的名字和登录权限。这是 unix 一个很老的命令，现在已很少使用了。\n补充：另外用 who -a 命令也可以查看用户信息。\n8. telnet\n通过 telnet 协议连接目标主机，如果 telnet 连接可以在任一端口上完成即代表着两台主机间的连接良好。\ntelnet hostname port – 使用指定的端口 telnet 主机名。这通常用来测试主机是否在线或者网络是否正常。\n补充：此命令在 Windows 下同样适用。\nethtoolethtool 允许你查看和更改网卡的许多设置（不包括 Wi-Fi 网卡）。你可以管理许多高级设置，包括 tx&#x2F;rx、校验及网络唤醒功能。下面是一些你可能感兴趣的基本命令：\nethtool -i 显示一个特定网卡的驱动信息，检查软件兼容性时尤其有用\nethtool -p 启动一个适配器的指定行为，比如让适配器的 LED 灯闪烁，以帮助你在多个适配器或接口中标识接口名称\nethtool -s 显示网络统计信息\nethtool speed &lt;10|100|1000&gt; 设置适配器的连接速度，单位是 Mbps\nnetstat发现主机连接最有用最通用的 Linux 命令。你可以使用”netstat -g”查询该主机订阅的所有多播组（网络）\nnetstat -nap | grep port 将会显示使用该端口的应用程序的进程 id\nnetstat -a or netstat –all 将会显示包括 TCP 和 UDP 的所有连接\nnetstat –tcp or netstat –t 将会显示 TCP 连接\nnetstat –udp or netstat –u 将会显示 UDP 连接\nnetstat -g 将会显示该主机订阅的所有多播网络。\nifupifup命令用于重新启动指定的网络设备。ifup命令的格式为：ifup 网络设备文件名。\n\nifup命令使用举例如下：\nifup eth0 // 重新启动网卡eth0。\n\nifup lo // 重新启动本地回绕网卡lo。\n\ndhclientdhclient命令可以释放你的电脑的IP地址并从DHCP服务器上获得一个新的。需要root权限，所以在Ubuntu上需要sudo。无选项运行命令获取新IP，或指定 -r 开关来释放当前的IP地址。\nsudo dhclient -r sudo dhclient\nifdown和ifup命令和运行ifconfig up，ifconfig down的功能一样。给定网络接口的名字可以只禁用或启用这一个接口。需要root权限，所以在Ubuntu上需要使用sudo来运行。\n代码如下:\nsudo ifdown eth0 sudo ifup eth0\ncurl &amp; wget使用curl或wget命令，不用离开终端就可以下载文件。如你用curl，键入curl -O后面跟一个文件路径。wget则不需要任何选项。下载的文件在当前目录。\n复制代码\n代码如下:\ncurl -O website.com&#x2F;file wget website.com&#x2F;file\ntracepath &amp; traceroutetracepath命令和traceroute命令功能类似，但不需要root权限。并且Ubuntu预装了这个命令，traceroute命令没有预装的。tracepath追踪出到指定的目的地址的网络路径，并给出在路径上的每一跳（hop）。如果你的网络有问题或是慢了，tracepath可以查出网络在哪里断了或是慢了。\ntracepath example.com\nmtr**mtr命令把ping命令和tracepath命令合成了一个。mtr会持续发包，并显示每一跳ping所用的时间。也会显示过程中的任何问题，在下面的示例中，可以看到在第6跳丢了超过20%的包。\n复制代码\n代码如下:\nmtr howtogeek.com\nwhois**whois命令输出指定站点的whois记录，可以查看到更多如谁注册和持有这个站点这样的信息。\n复制代码\n代码如下:\nwhois example.com\nifplugstatus**ifplugstatus命令可以告诉你是否有网线插到在网络接口上。这个命令Ubuntu没有预装，通过下面的命令来安装：\nsudo apt-get install ifplugd\n这个命令可以查看所有网络接口的状态，或是指定网络接口的状态：\n复制代码\n代码如下:\nifplugstatus ifplugstatus eth0\nsshssh user@host 如：ssh &#x70;&#105;&#107;&#x61;&#x40;&#49;&#57;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#48;&#x2e;&#x31;&#x31;&#x31;\nVim编辑器\n什么是Vim编辑器\n\nVim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。\nvim 则可以说是程序开发者的一项很好用的工具。\n所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。\n连 vim 的官方网站 (http://www.vim.org) 自己也说 vim 是一个程序开发工具而不是文字处理软件。\nvim 键盘图：\n\n三种使用模式\n三种使用模式\n\n基本上 vi&#x2F;vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：\n命令模式：用户刚刚启动 vi&#x2F;vim，便进入了命令模式。\n此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。\n以下是常用的几个命令：\n\ni 切换到输入模式，以输入字符。\nx 删除当前光标所在处的字符。\n: 切换到底线命令模式，以在最底一行输入命令。\n\n若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。\n命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n输入模式：在命令模式下按下i就进入了输入模式。\n在输入模式中，可以使用以下按键：\n\n字符按键以及Shift组合，输入字符\nENTER，回车键，换行\nBACK SPACE，退格键，删除光标前一个字符\nDEL，删除键，删除光标后一个字符\n方向键，在文本中移动光标\nHOME&#x2F;END，移动光标到行首&#x2F;行尾\nPage Up&#x2F;Page Down，上&#x2F;下翻页\nInsert，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线\nESC，退出输入模式，切换到命令模式\n\n底线命令模式在命令模式下按下:（英文冒号）就进入了底线命令模式。\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n在底线命令模式中，基本的命令有（已经省略了冒号）：\n\nq 退出程序\nw 保存文件\n\n按ESC键可随时退出底线命令模式。\n简单的说，我们可以将这三个模式想成底下的图标来表示：\n\n测试\n上手体验一下，在home目录下测试\n\n如果你想要使用 vi 来建立一个名为 kuangstudy.txt 的文件时，你可以这样做：\n[root@kuangshen home]# vim kuangstudy.txt\n\n然后就会进入文件\n\n按下 i 进入输入模式(也称为编辑模式)，开始编辑文字\n在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！\n在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。\n这个时候，键盘上除了 Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。\n\n按下 ESC 按钮回到一般模式\n好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！\n在一般模式中按下 :wq 储存后离开 vim！\n\nOK! 这样我们就成功创建了一个 kuangstudy.txt 的文件。\nVim 按键说明\nVim 按键说明\n\n除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。\n第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等\n\n\n移动光标的方法\n\n\n\n\nh 或 向左箭头键(←)\n光标向左移动一个字符\n\n\nj 或 向下箭头键(↓)\n光标向下移动一个字符\n\n\nk 或 向上箭头键(↑)\n光标向上移动一个字符\n\n\nl 或 向右箭头键(→)\n光标向右移动一个字符\n\n\n[Ctrl] + [f]\n屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)\n\n\n[Ctrl] + [b]\n屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)\n\n\n[Ctrl] + [d]\n屏幕『向下』移动半页\n\n\n[Ctrl] + [u]\n屏幕『向上』移动半页\n\n\n+\n光标移动到非空格符的下一行\n\n\n-\n光标移动到非空格符的上一行\n\n\nn&lt; space&gt;\n那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。\n\n\n0 或功能键[Home]\n这是数字『 0 』：移动到这一行的最前面字符处 (常用)\n\n\n$ 或功能键[End]\n移动到这一行的最后面字符处(常用)\n\n\nH\n光标移动到这个屏幕的最上方那一行的第一个字符\n\n\nM\n光标移动到这个屏幕的中央那一行的第一个字符\n\n\nL\n光标移动到这个屏幕的最下方那一行的第一个字符\n\n\nG\n移动到这个档案的最后一行(常用)\n\n\nnG\nn 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)\n\n\ngg\n移动到这个档案的第一行，相当于 1G 啊！(常用)\n\n\nn&lt; Enter&gt;\nn 为数字。光标向下移动 n 行(常用)\n\n\n\n\n\n搜索替换\n\n\n\n\n&#x2F;word\n向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！(常用)\n\n\n?word\n向光标之上寻找一个字符串名称为 word 的字符串。\n\n\nn\n这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！\n\n\nN\n这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。\n\n\n\n\n\n删除、复制与粘贴\n\n\n\n\nx, X\n在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)\n\n\nnx\nn 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。\n\n\ndd\n删除游标所在的那一整行(常用)\n\n\nndd\nn 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)\n\n\nd1G\n删除光标所在到第一行的所有数据\n\n\ndG\n删除光标所在到最后一行的所有数据\n\n\nd$\n删除游标所在处，到该行的最后一个字符\n\n\nd0\n那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符\n\n\nyy\n复制游标所在的那一行(常用)\n\n\nnyy\nn 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)\n\n\ny1G\n复制游标所在行到第一行的所有数据\n\n\nyG\n复制游标所在行到最后一行的所有数据\n\n\ny0\n复制光标所在的那个字符到该行行首的所有数据\n\n\ny$\n复制光标所在的那个字符到该行行尾的所有数据\n\n\np, P\np 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)\n\n\nJ\n将光标所在行与下一行的数据结合成同一行\n\n\nc\n重复删除多个数据，例如向下删除 10 行，[ 10cj ]\n\n\nu\n复原前一个动作。(常用)\n\n\n[Ctrl]+r\n重做上一个动作。(常用)\n\n\n第二部分：一般模式切换到编辑模式的可用的按钮说明\n\n\n进入输入或取代的编辑模式\n\n\n\n\ni, I\n进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)\n\n\na, A\n进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)\n\n\no, O\n进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)\n\n\nr, R\n进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)\n\n\n[Esc]\n退出编辑模式，回到一般模式中(常用)\n\n\n第三部分：一般模式切换到指令行模式的可用的按钮说明\n\n\n指令行的储存、离开等指令\n\n\n\n\n:w\n将编辑的数据写入硬盘档案中(常用)\n\n\n:w!\n若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！\n\n\n:q\n离开 vi (常用)\n\n\n:q!\n若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。\n\n\n注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～\n\n\n\n:wq\n储存后离开，若为 :wq! 则为强制储存后离开 (常用)\n\n\nZZ\n这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！\n\n\n:w [filename]\n将编辑的数据储存成另一个档案（类似另存新档）\n\n\n:r [filename]\n在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面\n\n\n:n1,n2 w [filename]\n将 n1 到 n2 的内容储存成 filename 这个档案。\n\n\n:! command\n暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中看 &#x2F;home 底下以 ls 输出的档案信息！\n\n\n:set nu\n显示行号，设定之后，会在每一行的前缀显示该行的行号\n\n\n:set nonu\n与 set nu 相反，为取消行号！\n\n\n账号管理\n简介\n\nLinux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。\n用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。\n每个用户账号都拥有一个唯一的用户名和各自的口令。\n用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。\n实现用户账号的管理，要完成的工作主要有如下几个方面：\n\n用户账号的添加、删除与修改。\n用户口令的管理。\n用户组的管理。\n\n用户账号的管理\n用户账号的管理\n\n用户账号的管理工作主要涉及到用户账号的添加、修改和删除。\n添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。\n添加账号 useradduseradd 选项 用户名\n\n参数说明：\n\n选项 :\n\n-c comment 指定一段注释性描述。\n\n-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n-g 用户组 指定用户所属的用户组。\n-G 用户组，用户组 指定用户所属的附加组。\n-m　使用者目录如不存在则自动建立。\n-s Shell文件 指定用户的登录Shell。\n-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。\n\n\n\n\n用户名 :\n\n指定新账号的登录名。\n\n\n\n测试：\n# 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 /home/kuangshen[root@kuangshen home]# useradd -m kuangshen\n\n增加用户账号就是在&#x2F;etc&#x2F;passwd文件中为新用户增加一条记录，同时更新其他系统文件如&#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。\nLinux下如何切换用户1.切换用户的命令为：su username 【username是你的用户名哦】\n2.从普通用户切换到root用户，还可以使用命令：sudo su\n3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令\n4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】\n$表示普通用户\n#表示超级用户，也就是root用户\n删除帐号如果一个用户的账号不再使用，可以从系统中删除。\n删除用户账号就是要将&#x2F;etc&#x2F;passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。\n删除一个已有的用户账号使用userdel命令，其格式如下：\nuserdel 选项 用户名\n\n常用的选项是 -r，它的作用是把用户的主目录一起删除。\n[root@kuangshen home]# userdel -r kuangshen\n\n此命令删除用户kuangshen在系统文件中（主要是&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等）的记录，同时删除用户的主目录。\n修改帐号修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。\n修改已有用户的信息使用usermod命令，其格式如下：\nusermod 选项 用户名\n\n常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。\n例如：\n# usermod -s /bin/ksh -d /home/z –g developer kuangshen\n\n此命令将用户kuangshen的登录Shell修改为ksh，主目录改为&#x2F;home&#x2F;z，用户组改为developer。\n用户口令的管理用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。\n指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。\n命令的格式为：\npasswd 选项 用户名\n\n可使用的选项：\n\n-l 锁定口令，即禁用账号。\n-u 口令解锁。\n-d 使账号无口令。\n-f 强迫用户下次登录时修改口令。\n\n如果默认用户名，则修改当前用户的口令。\n例如，假设当前用户是kuangshen，则下面的命令修改该用户自己的口令：\n$ passwdOld password:******New password:*******Re-enter new password:*******\n\n如果是超级用户，可以用下列形式指定任何用户的口令：\n# passwd kuangshenNew password:*******Re-enter new password:*******\n\n普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。\n为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。\n为用户指定空口令时，执行下列形式的命令：\n# passwd -d kuangshen\n\n此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。\npasswd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：\n# passwd -l kuangshen\n\n用户组管理每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。\n用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。\n增加一个新的用户组使用groupadd命令groupadd 选项 用户组\n\n可以使用的选项有：\n\n-g GID 指定新用户组的组标识号（GID）。\n-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。\n\n实例1：\n# groupadd group1\n\n此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。\n实例2：\n# groupadd -g 101 group2\n\n此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。\n删除用户组\n如果要删除一个已有的用户组，使用groupdel命令\n\ngroupdel 用户组\n\n例如：\n# groupdel group1\n\n此命令从系统中删除组group1。\n修改用户组\n修改用户组的属性使用groupmod命令\n\ngroupmod 选项 用户组\n\n常用的选项有：\n\n-g GID 为用户组指定新的组标识号。\n-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。\n-n新用户组 将用户组的名字改为新名字\n\n# 此命令将组group2的组标识号修改为102。groupmod -g 102 group2# 将组group2的标识号改为10000，组名修改为group3。groupmod –g 10000 -n group3 group2\n\n切换组\n切换组\n\n如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。\n用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：\n$ newgrp root\n\n这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。\n\n&#x2F;etc&#x2F;passwd\n\n完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。\n与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。\n下面分别介绍这些文件的内容。\n&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。\nLinux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。\n这个文件对所有用户都是可读的。它的内容类似下面的例子：\n＃ cat /etc/passwdroot:x:0:0:Superuser:/:daemon:x:1:1:System daemons:/etc:bin:x:2:2:Owner of system commands:/bin:sys:x:3:3:Owner of system files:/usr/sys:adm:x:4:4:System accounting:/usr/adm:uucp:x:5:5:UUCP administrator:/usr/lib/uucp:auth:x:7:21:Authentication administrator:/tcb/files/auth:cron:x:9:16:Cron daemon:/usr/spool/cron:listen:x:37:4:Network daemon:/usr/net/nls:lp:x:71:18:Printer administrator:/usr/spool/lp:\n\n从上面的例子我们可以看到，&#x2F;etc&#x2F;passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：\n用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell\n\n1）”用户名”是代表用户账号的字符串。\n通常长度不超过8个字符，并且由大小写字母和&#x2F;或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。\n为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。\n2）“口令”一些系统中，存放着加密后的用户口令字。\n虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于&#x2F;etc&#x2F;passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。\n3）“用户标识号”是一个整数，系统内部用它来标识用户。\n一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。\n通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。\n4）“组标识号”字段记录的是用户所属的用户组。\n它对应着&#x2F;etc&#x2F;group文件中的一条记录。\n5)“注释性描述”字段记录着用户的一些个人情况。\n例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。\n6)“主目录”，也就是用户的起始工作目录。\n它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。\n7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。\nShell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX&#x2F;TOPS-20 type C Shell), bash(Bourne Again Shell)等。\n系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为&#x2F;bin&#x2F;sh。\n用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。\n利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。\n8)系统中有一类用户称为伪用户（pseudo users）。\n这些用户在&#x2F;etc&#x2F;passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。\n常见的伪用户如下所示：\n伪 用 户 含 义bin 拥有可执行的用户命令文件sys 拥有系统文件adm 拥有帐户文件uucp UUCP使用lp lp或lpd子系统使用nobody NFS使用\n\n\n&#x2F;etc&#x2F;shadow\n\n1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。\n由于&#x2F;etc&#x2F;passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是&#x2F;etc&#x2F;shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。\n2、&#x2F;etc&#x2F;shadow中的记录行与&#x2F;etc&#x2F;passwd中的一一对应，它由pwconv命令根据&#x2F;etc&#x2F;passwd中的数据自动产生\n它的文件格式与&#x2F;etc&#x2F;passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：\n登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志\n\n\n“登录名”是与&#x2F;etc&#x2F;passwd文件中的登录名相一致的用户账号\n“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { .&#x2F;0-9A-Za-z }中的字符，则对应的用户不能登录。\n“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。\n“最小时间间隔”指的是两次修改口令之间所需的最小天数。\n“最大时间间隔”指的是口令保持有效的最大天数。\n“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。\n“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。\n“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。\n\n\n&#x2F;etc&#x2F;group\n\n用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。\n将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。\n每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。\n当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。\n用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。\n用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。此文件的格式也类似于&#x2F;etc&#x2F;passwd文件，由冒号(:)隔开若干个字段，这些字段有：\n组名:口令:组标识号:组内用户列表\n\n\n“组名”是用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。\n“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。\n“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。\n“组内用户列表”是属于这个组的所有用户的列表&#x2F;b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。\n\n磁盘管理\n概述\n\nLinux磁盘管理好坏直接关系到整个系统的性能问题。\nLinux磁盘管理常用命令为 df、du。\n\ndf ：列出文件系统的整体磁盘使用量\ndu：检查磁盘空间使用量\n\ndf\ndf\n\ndf命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。\n语法：\ndf [-ahikHTm] [目录或文件名]\n\n选项与参数：\n\n-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；\n-k ：以 KBytes 的容量显示各文件系统；\n-m ：以 MBytes 的容量显示各文件系统；\n-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；\n-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；\n-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；\n-i ：不用硬盘容量，而以 inode 的数量来显示\n\n测试：\n# 将系统内所有的文件系统列出来！# 在 Linux 底下如果 df 没有加任何选项# 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！[root@kuangshen /]# dfFilesystem     1K-blocks   Used Available Use% Mounted ondevtmpfs          889100       0    889100   0% /devtmpfs             899460     704    898756   1% /dev/shmtmpfs             899460     496    898964   1% /runtmpfs             899460       0    899460   0% /sys/fs/cgroup/dev/vda1       41152812 6586736  32662368  17% /tmpfs             179896       0    179896   0% /run/user/0# 将容量结果以易读的容量格式显示出来[root@kuangshen /]# df -hFilesystem     Size Used Avail Use% Mounted ondevtmpfs       869M     0 869M   0% /devtmpfs           879M 708K 878M   1% /dev/shmtmpfs           879M 496K 878M   1% /runtmpfs           879M     0 879M   0% /sys/fs/cgroup/dev/vda1       40G  6.3G   32G  17% /tmpfs           176M     0 176M   0% /run/user/0# 将系统内的所有特殊文件格式及名称都列出来[root@kuangshen /]# df -aTFilesystem     Type       1K-blocks   Used Available Use% Mounted onsysfs         sysfs               0       0         0    - /sysproc           proc                0       0         0    - /procdevtmpfs       devtmpfs       889100       0    889100   0% /devsecurityfs     securityfs          0       0         0    - /sys/kernel/securitytmpfs         tmpfs          899460     708    898752   1% /dev/shmdevpts         devpts              0       0         0    - /dev/ptstmpfs         tmpfs          899460     496    898964   1% /runtmpfs         tmpfs          899460       0    899460   0% /sys/fs/cgroupcgroup         cgroup              0       0         0    - /sys/fs/cgroup/systemdpstore         pstore              0       0         0    - /sys/fs/pstorecgroup         cgroup              0       0         0    - /sys/fs/cgroup/freezercgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpusetcgroup         cgroup              0       0         0    - /sys/fs/cgroup/hugetlbcgroup         cgroup              0       0         0    - /sys/fs/cgroup/blkiocgroup         cgroup              0       0         0    - /sys/fs/cgroup/net_cls,net_priocgroup         cgroup              0       0         0    - /sys/fs/cgroup/memorycgroup         cgroup              0       0         0    - /sys/fs/cgroup/pidscgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpu,cpuacctcgroup         cgroup              0       0         0    - /sys/fs/cgroup/devicescgroup         cgroup              0       0         0    - /sys/fs/cgroup/perf_eventconfigfs       configfs            0       0         0    - /sys/kernel/config/dev/vda1     ext4         41152812 6586748  32662356  17% /systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_miscmqueue         mqueue              0       0         0    - /dev/mqueuedebugfs       debugfs             0       0         0    - /sys/kernel/debughugetlbfs     hugetlbfs           0       0         0    - /dev/hugepagestmpfs         tmpfs          179896       0    179896   0% /run/user/0binfmt_misc   binfmt_misc         0       0         0    - /proc/sys/fs/binfmt_misc# 将 /etc 底下的可用的磁盘容量以易读的容量格式显示[root@kuangshen /]# df -h /etcFilesystem     Size Used Avail Use% Mounted on/dev/vda1       40G  6.3G   32G  17% /\n\ndu\ndu\n\nLinux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。\n语法：\ndu [-ahskm] 文件或目录名称\n\n选项与参数：\n\n-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。\n-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；\n-s ：列出总量而已，而不列出每个各别的目录占用容量；\n-S ：不包括子目录下的总计，与 -s 有点差别。\n-k ：以 KBytes 列出容量显示；\n-m ：以 MBytes 列出容量显示；\n\n测试：\n# 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:# 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。[root@kuangshen home]# du16./redis8./www/.oracle_jre_usage  # 包括隐藏文件的目录24./www48.                        # 这个目录(.)所占用的总量# 将文件的容量也列出来[root@kuangshen home]# du -a4./redis/.bash_profile4./redis/.bash_logout  ....中间省略....4./kuangstudy.txt # 有文件的列表了48.# 检查根目录底下每个目录所占用的容量[root@kuangshen home]# du -sm /*0/bin146/boot.....中间省略....0/proc.....中间省略....1/tmp3026/usr  # 系统初期最大就是他了啦！513/var2666/www\n\n通配符 * 来代表每个目录。\n与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。\n磁盘挂载与卸除\n磁盘挂载与卸除\n\n根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”\nLinux 的磁盘挂载使用mount命令，卸载使用umount命令。\n磁盘挂载语法：\nmount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点\n\n测试：\n# 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！[root@www ~]# mkdir /mnt/hdc6[root@www ~]# mount /dev/hdc6 /mnt/hdc6[root@www ~]# dfFilesystem           1K-blocks     Used Available Use% Mounted on/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6\n\n磁盘卸载命令 umount 语法：\numount [-fn] 装置文件名或挂载点\n\n选项与参数：\n\n-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；\n-n ：不升级 &#x2F;etc&#x2F;mtab 情况下卸除。\n\n卸载&#x2F;dev&#x2F;hdc6\n[root@www ~]# umount /dev/hdc6\n\n进程管理\n什么是进程\n\n\nLinux中每个程序都有一个进程\n每个进程都有一个父进程\n进程存在方式，前台，后台\n一般后台运行\n\n命令ps 查看当前系统正在执行各进程的信息\nps -xx\n\n-a 显示当前中断运行的所有进程信息\n-u 以用户的信息显示进程\n-x显示后台运行进程的参数\n\n# 查看所有进程ps -aux# | 在linux中叫做管道，grep查找文件中符合条件的字符串ps -aux | grep 进程名字# 查看父进程信息ps -ef | grep mysql# 进程树pstree -pu\t-p 显示父进程ID\t-u 显示用户组[root@root Documents]# ps -a   PID TTY          TIME CMD  3989 pts/0    00:00:00 su  3995 pts/0    00:00:01 bash 11934 pts/0    00:00:00 ps[root@root Documents]# ps -uUSER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot       1289  0.2  3.7 372896 69460 tty1     Ssl+ 09:52   0:49 /usr/bin/X :0 root       3989  0.0  0.1 194340  2880 pts/0    S    10:19   0:00 su rootroot       3995  0.0  0.1 117156  3676 pts/0    S    10:19   0:01 bashroot      11946  0.0  0.1 155448  1876 pts/0    R+   16:10   0:00 ps -u[root@root Documents]# ps -x   PID TTY      STAT   TIME COMMAND     1 ?        Ss     0:10 /usr/lib/systemd/systemd --switched-root --system --     2 ?        S      0:00 [kthreadd]     4 ?        S&lt;     0:00 [kworker/0:0H]     6 ?        S      0:00 [ksoftirqd/0]     7 ?        S      0:00 [migration/0]     ***[root@root Documents]# ps -auxUSER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot      11457  0.0  0.0      0     0 ?        S    16:02   0:00 [kworker/1:0]root      11829  0.0  0.0      0     0 ?        S    16:08   0:00 [kworker/2:0]root      11907  0.0  0.0      0     0 ?        S    16:10   0:00 [kworker/u256:root      11929  0.0  0.0 108052   356 ?        S    16:10   0:00 sleep 60root      11999  0.0  0.1 157532  1912 pts/0    R+   16:11   0:00 ps -aux[root@root Documents]# # | 在linux中叫做管道，grep查找文件中符合条件的字符串ps -aux | grep 进程名字[root@root Documents]# ps -a   PID TTY          TIME CMD  3989 pts/0    00:00:00 su  3995 pts/0    00:00:01 bash 12526 pts/0    00:00:00 ps[root@root Documents]# ps -a |grep 3995  3995 pts/0    00:00:01 bash[root@root Documents]# ps -a |grep su  3989 pts/0    00:00:00 su[root@root Documents]# ps -a |grep pts/0  3989 pts/0    00:00:00 su  3995 pts/0    00:00:01 bash 12601 pts/0    00:00:00 ps 12602 pts/0    00:00:00 grep[root@root Documents]# ps -a |grep 00:00:01  3995 pts/0    00:00:01 bash[root@root Documents]# \n\n杀掉进程# 强制结束该进程kill -9 进程ID\n\n环境安装安装软件一般有3种方式：\n\nrpm(jdk)\n解压缩（Tomcat)\nyum在线安装(Docker)\n\nJDK下载位置\n当前最新版本下载地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html\n历史版本下载地址：　　http://www.oracle.com/technetwork/java/javase/archive-139210.html\n\n下载\n如果有安装openjdk 则卸载\n\n[root@kuangshen ~]# java -versionjava version &quot;1.8.0_121&quot;Java(TM) SE Runtime Environment (build 1.8.0_121-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)# 检查[root@kuangshen ~]# rpm -qa|grep jdkjdk1.8.0_121-1.8.0_121-fcs.x86_64# 卸载 -e --nodeps 强制删除[root@kuangshen ~]# rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64[root@kuangshen ~]# java -version-bash: /usr/bin/java: No such file or directory  # OK\n\n\n安装JDK\n\n# 安装java rpm[root@kuangshen kuangshen]# rpm -ivh jdk-8u221-linux-x64.rpm# 安装完成后配置环境变量 文件：/etc/profileJAVA_HOME=/usr/java/jdk1.8.0_221-amd64CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/libPATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/binexport PATH CLASSPATH JAVA_HOME# 保存退出# 让新增的环境变量生效！source /etc/profile# 测试 java -version[root@kuangshen java]# java -versionjava version &quot;1.8.0_221&quot;Java(TM) SE Runtime Environment (build 1.8.0_221-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n\nTomcat安装（解压缩安装）1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！\n2、将文件移动到&#x2F;usr&#x2F;tomcat&#x2F;下，并解压！\n[root@kuangshen kuangshen]# mv apache-tomcat-9.0.22.tar.gz /usr[root@kuangshen kuangshen]# cd /usr[root@kuangshen usr]# lsapache-tomcat-9.0.22.tar.gz[root@kuangshen usr]# tar -zxvf apache-tomcat-9.0.22.tar.gz   # 解压\n\n3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的\n# 执行：startup.sh --&gt;启动tomcat# 执行：shutdown.sh --&gt;关闭tomcat./startup.sh./shutdown.sh\n\n4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！\n# 查看firewall服务状态systemctl status firewalld[root@root bin]# systemctl status firewalld● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)   Active: active (running) since 四 2022-03-31 09:51:52 CST; 14h ago     Docs: man:firewalld(1) Main PID: 774 (firewalld)    Tasks: 2   CGroup: /system.slice/firewalld.service           └─774 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid3月 31 09:51:47 root systemd[1]: Starting firewalld - dynamic firewall .....3月 31 09:51:52 root systemd[1]: Started firewalld - dynamic firewall d...n.3月 31 09:51:53 root firewalld[774]: WARNING: AllowZoneDrifting is enabl....Hint: Some lines were ellipsized, use -l to show in full.[root@root bin]# # 开启、重启、关闭、firewalld.service服务# 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all    # 查看全部信息firewall-cmd --list-ports  # 只看端口信息# 开启端口开端口命令：firewall-cmd --zone=public --add-port=80/tcp --permanent重启防火墙：systemctl restart firewalld.service命令含义：--zone #作用域--add-port=80/tcp  #添加端口，格式为：端口/通讯协议--permanent   #永久生效，没有此参数重启后失效\n\n安装Docker（yum安装）\n基于 CentOS 7 安装\n\n\n官网安装参考手册：https://docs.docker.com/install/linux/docker-ce/centos/\n\n确定你是CentOS7及以上版本\n[root@192 Desktop]# cat /etc/redhat-releaseCentOS Linux release 7.2.1511 (Core)\nyum安装gcc相关（需要确保 虚拟机可以上外网 ）\nyum -y install gccyum -y install gcc-c++\n卸载旧版本\nyum -y remove docker docker-common docker-selinux docker-engine# 官网版本yum remove docker \\          docker-client \\          docker-client-latest \\          docker-common \\          docker-latest \\          docker-latest-logrotate \\          docker-logrotate \\          docker-engine\n安装需要的软件包\nyum install -y yum-utils device-mapper-persistent-data lvm2\n设置stable镜像仓库\n# 错误yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo## 报错[Errno 14] curl#35 - TCP connection reset by peer[Errno 12] curl#35 - Timeout# 正确推荐使用国内的yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n更新yum软件包索引\nyum makecache fast\n安装Docker CE\nyum -y install docker-ce docker-ce-cli containerd.io\n启动docker\nsystemctl start docker\n测试\ndocker versiondocker run hello-worlddocker images\n\n宝塔面板安装https://www.bilibili.com/video/av91821322\nTomcat下载位置 https://tomcat.apache.org/download-80.cgi\n问题解决主机重命名[root@iZhp3itp0vzpyb14m2sbkwZ etc]# vim hostname [root@iZhp3itp0vzpyb14m2sbkwZ etc]# hostnamectl set-hostname Centos8[root@iZhp3itp0vzpyb14m2sbkwZ etc]# rebootConnection closing...Socket close.Connection closed by foreign host.Disconnected from remote host(Centos8) at 09:27:41.Type `help&#x27; to learn how to use Xshell prompt.[D:\\~]$ Reconnecting in 2 seconds. Press any key to exit local shell...Connecting to 8.143.7.110:22..................Could not connect to &#x27;8.143.7.110&#x27; (port 22): Connection failed.Type `help&#x27; to learn how to use Xshell prompt.[D:\\~]$ .Connecting to 8.143.7.110:22.......Connection established.To escape to local shell, press Ctrl+Alt+].WARNING! The remote SSH server rejected X11 forwarding request.Welcome to Alibaba Cloud Elastic Compute Service !Activate the web console with: systemctl enable --now cockpit.socketLast login: Sat Apr  2 09:21:12 2022 from 111.127.230.60[root@Centos8 ~]# Socket error Event: 32 Error: 10053.Connection closing...Socket close.Connection closed by foreign host.Disconnected from remote host(Centos8) at 09:29:21.Type `help&#x27; to learn how to use Xshell prompt.[D:\\~]$ Reconnecting in 2 seconds. Press any key to exit local shell...Connecting to 8.143.7.110:22...Connection established.To escape to local shell, press Ctrl+Alt+].WARNING! The remote SSH server rejected X11 forwarding request.Welcome to Alibaba Cloud Elastic Compute Service !Activate the web console with: systemctl enable --now cockpit.socketLast login: Sat Apr  2 09:28:03 2022 from 111.127.230.60[root@Centos8 ~]# \n\nLinux就该这么学8 使用iptables与firewalld防火墙防火墙管理工具防火墙可以举于流量的源目地址、端口号、协议、应用等信息来定制，常见的防火墙策略如下：\n\niptables\nfirewalld-cmd\nfirewalld-config\nTCP Wrapper\n\niptables策略与规则链防火墙按照从上至下执行（放行或阻止）策略，如果读取所有的规则没有匹配项就执行默认的策略，如果默认策略是放行，那么防火墙就没有意义，所有地址都将可以访问；如果默认策略设置为阻止，那么所有的地址都将不可以访问\n\niptables服务把用于处理或过滤流量的策略称之为规则，多条规则可以组成一个规则链，规则链依据数据包处理位置不同进行分类\n\n\n进行路由选择前处理的数据包（PREROUTING）\n处理流入的数据包（INPUT）\n处理流出的数据包（OUTPUT）\n处理转发的数据包（FORWARD）\n进行路由选择后处理数据包（POSTROUTING）\n\n\n与规则链相对应的还有动作\n\n\nACCEPT（运行流量通过）\nREJECT（拒绝流量通过（拒绝后还会回复））\nLOG（记录日志信息）\nDROP（拒绝流量通过（拒绝后不再响应））\n\n基本的命令参数firewalld终端管理工具图形管理工具服务器的访问控制列表Cockpit驾驶舱管理工具","categories":["Linux系统基础"],"tags":["Linux"]},{"title":"Linux初始化","url":"/cmchtge8r000fnegb8oblc0e2/","content":"Linux 初始化配置此脚本主要用于Linux第一次安装后的系统环境配置，包括但不限于常用工具的安装以及共享文件夹的初始化配置\n创建脚本首先，创建一个脚本文件，例如 linux_init.sh：\nsudo vim ./linux_init.sh\n\n添加以下内容到脚本中\n#!/bin/bash# Linux 系统初始化配置脚本 - VMware增强版# 功能：安装常用工具 + 自动挂载VMware共享文件夹# 定义颜色代码RED=&#x27;\\033[31m&#x27;GREEN=&#x27;\\033[32m&#x27;YELLOW=&#x27;\\033[33m&#x27;BLUE=&#x27;\\033[34m&#x27;CYAN=&#x27;\\033[36m&#x27;RESET=&#x27;\\033[0m&#x27;# 检查root权限check_root() &#123;    if [ &quot;$EUID&quot; -ne 0 ]; then        echo -e &quot;$&#123;RED&#125;✗ 错误：请使用sudo或root用户运行此脚本$&#123;RESET&#125;&quot;        exit 1    fi&#125;# 软件包安装配置declare -A PKGS=(    [&quot;VMware工具&quot;]=&quot;open-vm-tools open-vm-tools-desktop&quot;    [&quot;网络工具&quot;]=&quot;ssh ifplugd net-tools iputils-ping&quot;    [&quot;开发工具&quot;]=&quot;build-essential gcc gdb git apt-transport-https&quot;    [&quot;系统工具&quot;]=&quot;tree htop curl wget&quot;    [&quot;调试工具&quot;]=&quot;strace ltrace valgrind&quot;    [&quot;其他工具&quot;]=&quot;vim tmux&quot;)# 带进度显示的安装函数install_packages() &#123;    echo -e &quot;\\n$&#123;CYAN&#125;▶ 开始软件包安装流程 ◀$&#123;RESET&#125;&quot;    # 更新软件源    echo -ne &quot;$&#123;BLUE&#125;⟳ 更新软件源缓存...&quot;    if apt-get update -qq &gt;/dev/null 2&gt;&amp;1; then        echo -e &quot;\\r$&#123;GREEN&#125;✓ 软件源更新完成$&#123;RESET&#125;      &quot;    else        echo -e &quot;\\r$&#123;RED&#125;✗ 软件源更新失败$&#123;RESET&#125;&quot;        exit 1    fi    # 分类安装软件    for category in &quot;$&#123;!PKGS[@]&#125;&quot;; do        echo -e &quot;\\n$&#123;BLUE&#125;● 安装 $&#123;category&#125; 组件：$&#123;RESET&#125;&quot;        for pkg in $&#123;PKGS[$category]&#125;; do            echo -ne &quot;  $&#123;YELLOW&#125;▶$&#123;RESET&#125; $&#123;pkg&#125; &quot;            # 检查是否已安装            if dpkg -l | grep -q &quot;^ii  $&#123;pkg&#125; &quot;; then                echo -e &quot;[$&#123;GREEN&#125;已存在$&#123;RESET&#125;]&quot;                continue            fi            # 执行安装            if apt-get install -y -qq $pkg &gt;/dev/null 2&gt;&amp;1; then                echo -e &quot;\\r  $&#123;GREEN&#125;✓$&#123;RESET&#125; $&#123;pkg&#125; [$&#123;GREEN&#125;安装成功$&#123;RESET&#125;]&quot;            else                echo -e &quot;\\r  $&#123;RED&#125;✗$&#123;RESET&#125; $&#123;pkg&#125; [$&#123;RED&#125;安装失败$&#123;RESET&#125;]&quot;                echo -e &quot;$&#123;YELLOW&#125;建议手动执行：sudo apt-get install -y $&#123;pkg&#125;$&#123;RESET&#125;&quot;                exit 1            fi        done    done&#125;# 配置FUSE权限setup_fuse() &#123;    echo -e &quot;\\n$&#123;CYAN&#125;▶ 配置文件系统权限 ◀$&#123;RESET&#125;&quot;    if grep -q &quot;^user_allow_other&quot; /etc/fuse.conf; then        echo -e &quot;$&#123;GREEN&#125;✓ FUSE 已允许用户挂载$&#123;RESET&#125;&quot;    else        echo -ne &quot;$&#123;BLUE&#125;⟳ 正在配置FUSE权限...&quot;        echo &quot;user_allow_other&quot; &gt;&gt; /etc/fuse.conf        echo -e &quot;\\r$&#123;GREEN&#125;✓ FUSE 权限配置完成$&#123;RESET&#125;    &quot;    fi&#125;# 创建挂载脚本create_mount_script() &#123;    echo -e &quot;\\n$&#123;CYAN&#125;▶ 配置VMware共享文件夹挂载 ◀$&#123;RESET&#125;&quot;    # 创建脚本文件    cat &gt; /usr/local/bin/mount_hgfs.sh &lt;&lt;&#x27;EOF&#x27;#!/bin/bash# 自动挂载VMware共享文件夹# 检查工具是否可用if ! command -v vmware-hgfsclient &amp;&gt;/dev/null; then    exit 0fi# 创建主挂载点mkdir -p /mnt/hgfs# 获取共享文件夹列表folders=$(vmware-hgfsclient)# 遍历挂载for folder in $folders; do    mount_point=&quot;/mnt/hgfs/$&#123;folder&#125;&quot;    # 跳过已挂载的目录    if mount | grep -q &quot; $&#123;mount_point&#125; &quot;; then        continue    fi    # 创建子目录并挂载    mkdir -p &quot;$mount_point&quot;    if vmhgfs-fuse -o allow_other,uid=$(id -u),gid=$(id -g) \\        &quot;.host:/$&#123;folder&#125;&quot; &quot;$mount_point&quot;; then        echo &quot;已挂载: $&#123;mount_point&#125;&quot;    else        echo &quot;挂载失败: $&#123;mount_point&#125;&quot; &gt;&amp;2    fidoneEOF    # 设置权限    chmod +x /usr/local/bin/mount_hgfs.sh    echo -e &quot;$&#123;GREEN&#125;✓ 挂载脚本已部署到 /usr/local/bin/mount_hgfs.sh$&#123;RESET&#125;&quot;&#125;# 配置系统服务setup_systemd_service() &#123;    echo -e &quot;\\n$&#123;CYAN&#125;▶ 配置系统服务 ◀$&#123;RESET&#125;&quot;    # 创建服务文件    cat &gt; /etc/systemd/system/mount_hgfs.service &lt;&lt;EOF[Unit]Description=Mount VMware Shared FoldersAfter=network.target[Service]Type=oneshotExecStart=/usr/local/bin/mount_hgfs.shRemainAfterExit=true[Install]WantedBy=multi-user.targetEOF    # 重载系统服务    systemctl daemon-reload    systemctl enable mount_hgfs.service &gt;/dev/null    # 启动服务并检查状态    if systemctl start mount_hgfs.service; then        echo -e &quot;$&#123;GREEN&#125;✓ 服务已成功启用并启动$&#123;RESET&#125;&quot;    else        echo -e &quot;$&#123;RED&#125;✗ 服务启动失败，请检查以下日志：$&#123;RESET&#125;&quot;        journalctl -u mount_hgfs.service -n 10 --no-pager        exit 1    fi&#125;# 最终验证final_check() &#123;    echo -e &quot;\\n$&#123;CYAN&#125;▶ 最终验证 ◀$&#123;RESET&#125;&quot;    # 检查内核模块    echo -ne &quot;$&#123;BLUE&#125;⟳ 加载VMware内核模块...&quot;    if modprobe vmw_vmci vmwgfx; then        echo -e &quot;\\r$&#123;GREEN&#125;✓ 内核模块加载成功$&#123;RESET&#125;      &quot;    else        echo -e &quot;\\r$&#123;YELLOW&#125;⚠ 部分内核模块加载失败（不影响基础功能）$&#123;RESET&#125;&quot;    fi    # 显示共享文件夹    echo -e &quot;\\n$&#123;BLUE&#125;检测到的共享文件夹列表：$&#123;RESET&#125;&quot;    if command -v vmware-hgfsclient &amp;&gt;/dev/null; then        vmware-hgfsclient | sed &#x27;s/^/  ➔ /&#x27;        echo -e &quot;\\n$&#123;BLUE&#125;实际挂载点状态：$&#123;RESET&#125;&quot;        mount | grep vmhgfs-fuse || echo -e &quot;$&#123;YELLOW&#125;尚未挂载任何共享文件夹$&#123;RESET&#125;&quot;    else        echo -e &quot;$&#123;RED&#125;✗ vmware-hgfsclient 命令不可用$&#123;RESET&#125;&quot;    fi&#125;# 主执行流程main() &#123;    clear    echo -e &quot;$&#123;CYAN&#125;═══════════════════════════════════════════════$&#123;RESET&#125;&quot;    echo -e &quot;$&#123;CYAN&#125;            Linux 系统初始化配置脚本           $&#123;RESET&#125;&quot;    echo -e &quot;$&#123;CYAN&#125;═══════════════════════════════════════════════$&#123;RESET&#125;&quot;    check_root    install_packages    setup_fuse    create_mount_script    setup_systemd_service    final_check    echo -e &quot;\\n$&#123;GREEN&#125;✅ 所有配置已完成！建议重启系统使配置生效$&#123;RESET&#125;&quot;&#125;# 执行主函数main\n\n赋予脚本执行权限sudo chmod +x ./linux_init.sh\n\n以管理员权限运行sudo ./linux_init.sh\n\n重启系统sudo reboot\n\nDocker安装更新软件包并安装必要软件sudo apt updatesudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release\n\n导入 Docker 官方 GPG 密钥sun@ldspdvs:~$ sudo curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -sun@ldspdvs:~$\n\n添加阿里云的docker仓库sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;\n\n更新软件包列表sun@ldspdvs:~$ sudo apt update命中:1 http://mirrors.huaweicloud.com/repository/ubuntu noble InRelease命中:2 http://mirrors.huaweicloud.com/repository/ubuntu noble-updates InRelease命中:3 http://mirrors.huaweicloud.com/repository/ubuntu noble-backports InRelease命中:4 http://security.ubuntu.com/ubuntu noble-security InRelease正在读取软件包列表... 完成正在分析软件包的依赖关系树... 完成正在读取状态信息... 完成有 1 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。sun@ldspdvs:~$\n\n安装Docker# 普通方式sun@ldspdvs:~$ sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin# 通过脚本# 先下载脚本到本地curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh -o docker-install.sh# 赋予执行权限chmod +x docker-install.sh# 执行安装sudo ./docker-install.sh\n\n配置docker\n配置用户组,将当前用户添加到docker组，避免没有权限启动\n\nsun@ldspdvs:~$ sudo usermod -aG docker $USER# 重启才会生效sun@ldspdvs:~$ sudo reboot\n\n\n配置docker加速\n\nsun@ldspdvs:~$ sudo vi /etc/docker/daemon.json# 直接复制进去并保存 （2025.2.15最新可用源,看到这里的同学评论一下是否还可用，不可用我会更新）&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.hpcloud.cloud&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.unsee.tech&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;http://mirrors.ustc.edu.cn&quot;,    &quot;https://docker.chenby.cn&quot;,    &quot;http://mirror.azure.cn&quot;,    &quot;https://dockerpull.org&quot;,    &quot;https://dockerhub.icu&quot;,    &quot;https://hub.rat.dev&quot;,    &quot;https://proxy.1panel.live&quot;,    &quot;https://docker.1panel.top&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.ketches.cn&quot;  ]&#125;# 启动/重启dockersudo systemctl daemon-reload  #如果还没启动sudo systemctl start docker#如果已经启动sudo systemctl restart docker# docker开机自启sudo systemctl enable docker# 验证镜像加速是否修改 查看Registry Mirrors部分sudo docker info\n\n\n验证docoker\n\nsudo docker run hello-world\n\nGitlab部署镜像下载下载镜像\ndocker pull registry.gitlab.cn/omnibus/gitlab-jh:15.11.13\n\n创建文件夹\nsudo mkdir -p /usr/local/docker/gitlab\n\n配置环境变量\n创建文件夹\n\nsudo vim /etc/profile# 新增以下内容# gitlab基础目录export GITLAB_HOME=/usr/local/docker/gitlab\n\n\n进入创建目录\n\ncd /usr/local/docker/gitlab/\n\n\n刷新环境变量\n\nsource /etc/profile\n\n\n输出当前环境变量\n\necho $GITLAB_HOME /usr/local/docker/gitlab\n\n创建启动脚本\n脚本内容\n\ntee startGitlab.sh &lt;&lt; &quot;end&quot;docker run -d \\  --privileged=true \\  --hostname 192.168.111.128 \\  -p 18443:443 -p 18080:80 -p 18022:22 \\  --name gitlab \\  --restart always \\  -v $GITLAB_HOME/config:/etc/gitlab \\  -v $GITLAB_HOME/logs:/var/log/gitlab \\  -v $GITLAB_HOME/data:/var/opt/gitlab \\  --shm-size 512m \\  registry.gitlab.cn/omnibus/gitlab-jh:15.11.13end\n\n\n脚本赋权及执行\n\nchmod 777 startGitlab.sh\n\n\n查看容器日志\n\ndocker logs -f -t --tail -f gitlab\n\nGitlab登录\n查看密码\n\nsun@ldspdvs: cd /usr/local/docker/gitlab/configsun@ldspdvs:/usr/local/docker/gitlab/config$ sudo cat initial_root_password[sudo] sun 的密码：# WARNING: This value is valid only in the following conditions#          1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails[&#x27;initial_root_password&#x27;]` setting in `gitlab.rb`, it was provided before database was seeded for the first time (usually, the first reconfigure run).#          2. Password hasn&#x27;t been changed manually, either via UI or via command line.##          If the password shown here doesn&#x27;t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.Password: OjDxbgBuN208fxdMrPIMK4P0RCjBeThRc4pYbjQigoY=# NOTE: This file will be automatically deleted in the first reconfigure run after 24 hours.sun@ldspdvs:/usr/local/docker/gitlab/config$\n\n\n登录网址\nIP：192.168.111.128:18080\n用户名：root\n密码：OjDxbgBuN208fxdMrPIMK4P0RCjBeThRc4pYbjQigoY&#x3D;\n\n\n客户端登陆Gitlab\n生成SSH密钥\n\nssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;\n\n\n将公钥添加到Gitlab\n\ncat ~/.ssh/id_ed25519.pub\n\n\n配置Git全局设置\n\ngit config --global user.name &quot;Your Name&quot;git config --global user.email &quot;your_email@example.com&quot;\n\n\n克隆仓库\n\ngit clone git@&lt;GITLAB_HOST&gt;:&lt;GROUP&gt;/&lt;REPO&gt;.git\n\n\nGitlab http 克隆地址更改为本地IP\n\nroot@SQA-JCRJ-02:/# find /newFS/docker/gitlab/ -name gitlab.rbroot@SQA-JCRJ-02:/# vim /newFS/docker/gitlab/data/etc/gitlab.rb# 修改以下配置文件#+++++++++++++++++++++++++++++++++++++++++++++++++++++external_url &#x27;http://192.168.2.136:18080&#x27;  nginx[&#x27;listen_port&#x27;] = 80#+++++++++++++++++++++++++++++++++++++++++++++++++++++# 重启Gitlabroot@SQA-JCRJ-02:/# docker restart gitlab按以上配置的效果是可以使用端口访问gitlab的web服务\n","categories":["Linux系统基础"],"tags":["Gitlab","Linux","vm-tools","VMware共享文件夹","Shell"]},{"title":"Linux问题记录","url":"/cmchtge8s000gnegb71n3ge5o/","content":"linux常用命令行https://static001.geekbang.org/resource/image/88/e5/8855bb645d8ecc35c80aa89cde5d16e5.jpg?wh=3431*2125\n更改ip配置# 打开配置文件vi /etc/sysconfig/network-scripts/ifcfg-ens33# 修改配置BOOTPROTO=&quot;static&quot;ONBOOT=&quot;yes&quot;IPADDR=192.168.58.135NETMASK=255.255.255.0GATEWAY=192.168.58.2DNS1=192.168.58.2# 重启服务systemctl restart network\n\n创建用户[root@VM-8-17-centos ~]# adduser admin[root@VM-8-17-centos ~]# passwd adminChanging password for user admin.New password: BAD PASSWORD: The password is shorter than 8 charactersRetype new password: passwd: all authentication tokens updated successfully.# 添加到wheel组，使其具备sudo权限[root@VM-8-17-centos ~]# usermod -aG wheel admin[root@VM-8-17-centos ~]# su admin[admin@VM-8-17-centos root]$ cd ~[admin@VM-8-17-centos ~]$ pwd/home/admin[admin@VM-8-17-centos ~]$ \n\n修改系统名称[root@VM-8-17-centos ~]# hostnamectl set-hostname centos8[root@VM-8-17-centos ~]# hostnamehostnamecentos8[root@VM-8-17-centos ~]# \n\n放开指定端口[root@VM-24-11-centos ~]# firewall-cmd --zone=public --add-port=5212/tcp --permanentsuccess[root@VM-24-11-centos ~]# firewall-cmd --reloadsuccess[root@VM-24-11-centos ~]# firewall-cmd --query-port=5212/tcpyes[root@VM-24-11-centos ~]# systemctl stop firewalld.service[root@VM-24-11-centos ~]# systemctl start firewalld.service[root@VM-24-11-centos ~]# systemctl status firewalld.service● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)   Active: active (running) since Mon 2022-11-28 17:09:13 CST; 6h ago     Docs: man:firewalld(1) Main PID: 242811 (firewalld)    Tasks: 3 (limit: 23995)   Memory: 40.4M   CGroup: /system.slice/firewalld.service           └─242811 /usr/libexec/platform-python -s /usr/sbin/firewalld --nofork --nopidNov 28 17:09:10 VM-24-11-centos systemd[1]: Starting firewalld - dynamic firewall daemon...Nov 28 17:09:13 VM-24-11-centos systemd[1]: Started firewalld - dynamic firewall daemon.Nov 28 17:09:13 VM-24-11-centos firewalld[242811]: WARNING: AllowZoneDrifting is enabled. This is considered an insecure configuration option. It wil&gt;Nov 28 17:09:14 VM-24-11-centos firewalld[242811]: WARNING: COMMAND_FAILED: &#x27;/usr/sbin/iptables -w10 -D FORWARD -i docker0 -o docker0 -j DROP&#x27; failed&gt;Nov 28 17:09:15 VM-24-11-centos firewalld[242811]: WARNING: COMMAND_FAILED: &#x27;/usr/sbin/iptables -w10 -D FORWARD -i docker0 -o docker0 -j DROP&#x27; failed&gt;Nov 28 23:05:37 VM-24-11-centos firewalld[242811]: WARNING: AllowZoneDrifting is enabled. This is considered an insecure configuration option. It wil&gt;Nov 28 23:05:38 VM-24-11-centos firewalld[242811]: WARNING: COMMAND_FAILED: &#x27;/usr/sbin/iptables -w10 -D FORWARD -i docker0 -o docker0 -j DROP&#x27; failed&gt;Nov 28 23:05:38 VM-24-11-centos firewalld[242811]: WARNING: COMMAND_FAILED: &#x27;/usr/sbin/iptables -w10 -D FORWARD -i docker0 -o docker0 -j DROP&#x27; failed&gt;lines 1-18/18 (END)\n\n程序后台运行命令\n使用nohup命令，意思是 no hang up（不挂起），也就是说，当前交互命令行退出的时候，程序还要在。当然这个时候，程序不能霸占交互命令行，而是应该在后台运行。最后加一个 &amp;，就表示后台运行。另外一个要处理的就是输出，原来什么都打印在交互命令行里，现在在后台运行了，输出到文件。\n\n后台方式nohup command&gt;out.file 2&gt;&amp;1 &amp;“1”表示文件描述符 1，表示标准输出，“2”表示文件描述符 2，意思是标准错误输出，“2&gt;&amp;1”表示标准输出和错误输出合并到 out.file 里。# 那这个进程如何关闭呢？我们假设启动的程序包含某个关键字，那就可以使用下面的命令ps -ef |grep 关键字  |awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9ps -ef 可以单独执行，列出所有正在运行的程序，grep 上面我们介绍过了，通过关键字找到咱们刚才启动的程序。awk &#x27;&#123;print $2&#125;&#x27;是指第二列的内容，是运行的程序 ID。通过 xargs 传递给 kill -9，也就是发给这个运行的程序一个信号，让它关闭。如果你已经知道运行的程序 ID，可以直接使用 kill 关闭运行的程序。\n\n服务方式\nUbuntu 中，我们可以通过apt-get install mysql-server 的方式安装 MySQL，然后通过命令systemctl start mysql启动 MySQL，通过systemctl enable mysql设置开机启动。之所以成为服务并且能够开机启动，是因为在 &#x2F;lib&#x2F;systemd&#x2F;system 目录下会创建一个 XXX.service 的配置文件，里面定义了如何启动、如何关闭。\n\n\n在 CentOS 里有些特殊，MySQL 被 Oracle 收购后，因为担心授权问题，改为使用 MariaDB，它是 MySQL 的一个分支。通过命令yum install mariadb-server mariadb进行安装，命令systemctl start mariadb启动，命令systemctl enable mariadb设置开机启动。同理，会在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 目录下，创建一个 XXX.service 的配置文件，从而成为一个服务。\n\n升级python3\nhttps://www.bilibili.com/read/cv15970563/\n\n\n查看已安装Python版本\n\npython -V\n\n\n将python3上传到服务器并解压\n\nwget https://www.python.org/ftp/python/3.10.8/Python-3.10.8.tgztar -zxvf Python-3.10.8.tgz\n\n\n进入Python3目录\n\ncd Python-3.10.8\n\n\n安装依赖\n\nyum groupinstall -y &quot;Development tools&quot;yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel\n\n\n预编译，设置安装目录\n\n# 查看openssl版本，及位置，供下面命令使用$ openssl versionOpenSSL 1.1.1k  FIPS 25 Mar 2021$ which openssl/usr/bin/openssl$ whereis opensslopenssl: /usr/bin/openssl /usr/include/openssl /usr/share/man/man1/openssl.1ssl.gz# 为/usr/local/python3。安装目录可以自定义./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl# 编译。因为CPU4核，所以设置-j4加快编译速度make -j4# 编译安装make install -j4\n\n\n删除旧版本的python3链接\n\nmv /usr/bin/python3 /tmp/mv /usr/bin/pip3 /tmp/\n\n\n建立新的链接\n\nln -s /usr/local/python3/bin/python3.10 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n\n\n查看是否安装成功\n\npython3 -Vpip3 -Vpip3 list\n\n\n加入系统环境\n\nvi /etc/profileexport PATH=$PATH:/usr/local/python3/binsource /etc/profile\n\n\npip install 出现错误的解决方法\n\n[root@node1 Python-3.10.7]# pip3 install -i http://pypi.douban.com/simple/  pip -U --trusted-host pypi.douban.comLooking in indexes: http://pypi.douban.com/simple/Requirement already satisfied: pip in /usr/local/python3/lib/python3.10/site-packages (22.2.2)Collecting pip  Downloading http://pypi.doubanio.com/packages/07/51/2c0959c5adf988c44d9e1e0d940f5b074516ecc87e96b1af25f59de9ba38/pip-23.0.1-py3-none-any.whl (2.1 MB)     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.1/2.1 MB 4.7 MB/s eta 0:00:00Installing collected packages: pip  Attempting uninstall: pip    Found existing installation: pip 22.2.2    Uninstalling pip-22.2.2:      Successfully uninstalled pip-22.2.2Successfully installed pip-23.0.1WARNING: Running pip as the &#x27;root&#x27; user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv[root@node1 Python-3.10.7]# \n\nopenssl解决方法\nhttps://www.cnblogs.com/chengfo/p/16289666.html\n\n\n下载\n\nwget https://www.openssl.org/source/openssl-1.1.1s.tar.gz\n\n\n解压并切换目录\n\ntar -zxvf openssl-1.1.1.tar.gzcd openssl-1.1.1\n\n\n设定Openssl 安装，( –prefix )参数为欲安装之目录，也就是安装后的档案会出现在该目录下\n\n./config --prefix=/usr/local/bin/openssl\n\n\n执行命令\n\n./config -t\n\n\n执行make、make install，编译Openssl\n\nmake &amp; make install\n\nP.S. 若CentOS7中没有GCC编译器，执行命令 yum -y install gcc 安装GCC。\n\n切换openssl版本\n\nmv /usr/bin/openssl /usr/bin/openssl.bakmv /usr/include/openssl /usr/include/openssl.bakln -s /usr/local/openssl/bin/openssl /usr/bin/opensslln -s /usr/local/openssl/include/openssl /usr/include/opensslecho &quot;/usr/local/openssl/lib&quot; &gt;&gt; /etc/ld.so.confldconfig -vln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1注意：不能直接删除软链接如需使用新版本开发，则需替换原来的软链接指向，即替换原动态库，进行版本升级。替换/lib(lib64)和/usr/lib(lib64)和/usr/local/lib(lib64)存在的相应动态库：ln -sf /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.soln -sf /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so使配置生效ldconfig\n\n\nhttps://blog.csdn.net/lim_5258/article/details/126508077\nhttps://blog.csdn.net/weixin_41227756/article/details/127003944\nhttps://www.cnblogs.com/XY-Heruo/p/15348521.html#:~:text=CentOS7%E5%8D%87%E7%BA%A7python3%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%201%20%E9%A6%96%E5%85%88%EF%BC%8C%E4%BB%8Epython%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84python%E5%8E%8B%E7%BC%A9%E5%8C%85%E3%80%82%20%E6%9C%AC%E4%BA%BA%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AFPython-3.9.7.tar.xz%202,%E8%A7%A3%E5%8E%8B%E5%90%8E%E5%88%87%E6%8D%A2%E5%88%B0%E8%A7%A3%E5%8E%8B%E5%8C%85%E7%9B%AE%E5%BD%95%EF%BC%8C%E8%BF%9B%E8%A1%8C%E9%A2%84%E7%BC%96%E8%AF%91%20-%3E%20%E7%BC%96%E8%AF%91%20-%3E%20%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85\n\n如何让普通用户具有sudo权限方法1 修改配置文件# 1. 进入root用户su root # 2. 进入etc目录cd /etc/# 3. vim sudoers找到 root ALL=(ALL) ALLvim sudoers# 4. 在 root ALL=(ALL) ALL 后面加上一行 user_name(要添加的普通用户名) ALL=(ALL) ALLuser_name ALL=(ALL) ALL# 5. 保存退出:wq\n\n\n第一个 ALL 指示允许从任何终端、机器访问 sudo\n第二个 (ALL) 指示 sudo 命令被允许以任何用户身份执行\n第三个 ALL表示所有命令都可以作为 root 执行\n\n方法2 修改用户组\n在sudoers中看到 %wheel ALL&#x3D;（ALL）ALL； 所以我们到  &#x2F;etc&#x2F;group中修改组成员。也可实现给用户 增加 sudo权限。\n\n\n使用命令加入组成员\n\nusermod -aG wheel your_user_name\n\n\n修改配置文件\n\nvim /etc/group# 在wheel组的后面的成员列表里面添加进想要添加的用户名：wheel：x:10:root,yourusername\n\n如何让普通用户输入sudo命令后避免输入密码验证将组成员权限修改\n## Same thing without a password%wheel  ALL=(ALL)   NOPASSWD: ALL\n\n更改pip源创建pip.conf配置文件\n在用户根目录(，而非系统根目录 &#x2F; )下添加配置&#x2F;.pip&#x2F;pip.conf目录添加可信源，如果目录文件不存在，可直接创建。\nmkdir ~/.pip   #创建文件夹cd ~/.pip        #进入目录vim pip.conf        #编辑配置文件\n\n替换阿里镜像源(或其他镜像源)\n[global]trusted-host = mirrors.aliyun.comindex-url = https://mirrors.aliyun.com/pypi/simple[install]trusted-host=mirrors.aliyun.com\n\n[root@centos7 .pip]# cat ~/.pip/pip.conf.bak [global]index-url = http://mirrors.tencentyun.com/pypi/simpletrusted-host = mirrors.tencentyun.com[root@centos7 .pip]#\n\nvim 默认配置# centos[root@centos7 c]# vim /etc/vimrc# ubuntu[root@ubunut c]# vim /etc/vim/vimrc# 将以下内容追加到配置文件中set nocompatibleset nuset icset hlsearchset encoding=utf-8set fileencodings=utf-8,ucs-bom,GB2312,big5set autoindentset smartindentset scrolloff=2set showmatchset shiftwidth=4set tabstop=4set showmatchset cursorlineset autoreadsyntax on\n\n更改ip配置# 打开配置文件vi /etc/sysconfig/network-scripts/ifcfg-ens33# 修改配置BOOTPROTO=&quot;static&quot;ONBOOT=&quot;yes&quot;IPADDR=192.168.58.135NETMASK=255.255.255.0GATEWAY=192.168.58.2DNS1=192.168.58.2# 重启服务systemctl restart network\n\nyum镜像修改1. 首先备份/etc/yum.repos.d/CentOS-Base.repomv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup2. 从下方镜像源列表选择要使用的镜像源vim /etc/yum.repos.d/CentOS-Base.repo3. 运行以下命令生成缓存yum clean allyum makecacheyum update\n\n网易源\nhttp://mirrors.163.com/.help/centos.html\n\nCentOS7-Base-163.repo\n# CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client.  You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead.##[base]name=CentOS-$releasever - Base - 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=osbaseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updates - 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updatesbaseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that may be useful[extras]name=CentOS-$releasever - Extras - 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extrasbaseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plus - 163.combaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/gpgcheck=1enabled=0gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n清华源#CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client.  You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the# remarked out baseurl= line instead.##[base]name=CentOS-$releasever - Basebaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=osgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updatesbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/updates/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updatesgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#additional packages that may be useful[extras]name=CentOS-$releasever - Extrasbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/extras/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extrasgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plusbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/centosplus/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplusgpgcheck=1enabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n阿里源# CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client.  You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead.## [base]name=CentOS-$releasever - Base - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/        http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/        http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #released updates [updates]name=CentOS-$releasever - Updates - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/        http://mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/        http://mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/gpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #additional packages that may be useful[extras]name=CentOS-$releasever - Extras - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/        http://mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/        http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/gpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plus - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/        http://mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/        http://mirrors.cloud.aliyuncs.com/centos/$releasever/centosplus/$basearch/gpgcheck=1enabled=0gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #contrib - packages by Centos Users[contrib]name=CentOS-$releasever - Contrib - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/        http://mirrors.aliyuncs.com/centos/$releasever/contrib/$basearch/        http://mirrors.cloud.aliyuncs.com/centos/$releasever/contrib/$basearch/gpgcheck=1enabled=0gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n\n一键更换国内源\nhttps://github.com/SuperManito/LinuxMirrors\n\n下载安装bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/ChangeMirrors.sh)\n\n使用方法\n完整复制上面的命令到终端按回车键即可执行，若无法安装 curl 软件包可复制源码到本地后手动执行\n为了适配所有环境，建议使用 Root 用户执行脚本，切换命令为 sudo -i ，如遇报错请查看常见问题与帮助\n如果您使用的环境没有安装或不支持简体中文环境，请通过 SSH客户端工具 使用，否则将无法正确选择交互内容\n执行脚本过程中会自动备份原有源无需手动备份，期间会在终端输出多个主观选择交互内容，可按回车键快速确定\n脚本支持在原有源配置错误或者不存在的情况下使用，并且可以重复使用；脚本变更的软件源默认使用 HTTP 协议\n\n脚本执行流程\n选择国内源 交互\n\n检测如果是 RHEL或CentOS 系统选择是否安装&#x2F;覆盖 EPEL 扩展国内源 交互\n\n\n选择软件源使用的 WEB 协议 交互\n\n检测 防火墙 和 SELINUX 如果开启并且系统是 RHEL或CentOS 选择是否关闭 交互\n\n备份原有源\n\n检测如果存在重复的备份文件选择是否覆盖 交互\n\n\n更换国内源\n\n选择是否更新软件包 交互\n\n选择是否清理已下载的软件包缓存 交互\n\n\n\nUbuntu默认禁止root用户登录，禁止SSH连接\n修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config文件\n将 #PermitRootLogin prohibit-password 修改为：PermitRootLogin yes\n将 #PasswordAuthentication yes 修改为：PasswordAuthentication yes\n\nsudo vim /etc/ssh/sshd_configsudo service ssh restart\n","categories":["Linux系统基础"],"tags":["Linux","问题记录","镜像源"]},{"title":"VMware共享文件夹配置","url":"/cmchtge8u000jnegb5odf2d9v/","content":"解决&#x2F;mnt中有hgfs无共享文件为了自动检测并挂载所有共享文件夹，可以编写一个脚本来实现这个功能，并将该脚本配置为在系统启动时运行。以下是详细步骤：\n创建挂载脚本首先，创建一个脚本文件，例如 mount_hgfs.sh：\nsudo nano /usr/local/bin/mount_hgfs.sh#!/bin/bash# 创建挂载点目录mkdir -p /mnt/hgfs# 获取所有共享文件夹名称folders=$(vmware-hgfsclient)# 遍历每个共享文件夹并挂载for folder in $folders; do    echo &quot;Mounting $folder&quot;    mkdir -p /mnt/hgfs/$folder    vmhgfs-fuse -o allow_other .host:/$folder /mnt/hgfs/$folderdone\n\n赋予脚本执行权限sudo chmod +x /usr/local/bin/mount_hgfs.sh\n\n配置脚本在启动时运行将脚本配置为在系统启动时运行，可以使用 systemd 服务来实现：\nsudo nano /etc/systemd/system/mount_hgfs.service[Unit]Description=Mount VMware Shared FoldersAfter=network.target[Service]Type=oneshotExecStart=/usr/local/bin/mount_hgfs.shRemainAfterExit=true[Install]WantedBy=multi-user.target\n\n启用和启动服务sudo systemctl enable mount_hgfs.servicesudo systemctl start mount_hgfs.servicesudo systemctl status mount_hgfs.service\n\n验证挂载重启系统，验证共享文件夹是否自动挂载：\n","categories":["Linux系统基础"],"tags":["VMware共享文件夹"]},{"title":"Shell学习笔记","url":"/cmchtge8u000mnegbbqavcqxc/","content":"Shell介绍docker run -itd --privileged --name centos7-shell centos:centos7.9.2009 /bin/bash\n\n\n看懂shell\n能改shell\n能写shell\n优化shell\n\nshell是一个程序，用C语言编写，用户和linux内核沟通的桥梁。既是一种命令语言又是一种解释性的编程语言\n\n•\tkernel：为软件服务，接受用户指令或软件指令驱动硬件，完成工作（外国人 收到翻译后的话）\n•\tshell：解释器（翻译 翻译两个人话语）\n•\tuser：用户接口，对接用户（中国人说的汉语交给翻译）\n[root@root sun]# echo &quot;hello world&quot;hello world# sed &#x27;s/world/亲/&#x27;[root@root sun]# echo &quot;hello world&quot; | sed &#x27;s/world/亲/&#x27;hello 亲[root@root sun]# echo $USERsun[root@root sun]# \n\nshell功能•\t命令行解释功能\n•\t启动程序\n•\t输入输出重定向\n•\t管道连接\n•\t文件名置换（echo&#x2F;*）\n•\t变量维护\n•\t环境控制\n•\tshell编程\nshell脚本语法如何抒写shell脚本\nshell脚本的命名\na. 名字要有意义，不要太长\n\nshell脚本格式\na. 开头指定运行环境 用#! 添加备注\n\n\n[root@Centos8 shells]# cat nginx_install.sh # 1） 定义脚本执行环境#!/usr/bin/bash# 2）#代表注释 #! 是特例# 3）脚本信息# Author:Sun# Created:2022/4/2 10:16# Scription Description:nginx install script# Release:1.0# 4）脚本组成# 解释环境 #!/usr/bin/env bash |python|perl# 注释说明# 编写代码yum -y install wget gcc pcre-devel zlib-develwget http://nginx.org/download/nginx-1.16.0.tar.gztar -zxvf nginx-1.16.0.tar.gzcd nginx-1.16.0./configure --prefix=/usr/local/nginxmake -j 4make install# 5)执行脚本#   给执行权限#   解释器直接运行，不需要给权限echo &quot;hello Nginx is ending!&quot;[root@Centos8 shells]# \n\nshell脚本运行方法[root@Centos8 shells]# lltotal 1020drwxr-xr-x 9 1001 1001     186 Apr 23  2019 nginx-1.16.0-rw-r--r-- 1 root root 1032345 Apr 23  2019 nginx-1.16.0.tar.gz-rwx------ 1 root root     622 Apr  2 10:32 nginx_install.sh-rwx------ 1 root root     622 Apr  2 10:36 nginx_install_test.sh[root@Centos8 shells]# vim nginx_install_test.sh [root@Centos8 shells]# [root@Centos8 shells]# chmod 700 nginx_install.sh[root@Centos8 shells]# ./nginx_install_test.sh hello Nginx is Ending![root@Centos8 shells]# sh nginx_install_test.sh hello Nginx is Ending![root@Centos8 shells]# bash nginx_install_test.sh hello Nginx is Ending![root@Centos8 shells]# mv nginx_install_test.sh nginx_test.sh[root@Centos8 shells]# lltotal 1020drwxr-xr-x 9 1001 1001     186 Apr 23  2019 nginx-1.16.0-rw-r--r-- 1 root root 1032345 Apr 23  2019 nginx-1.16.0.tar.gz-rwx------ 1 root root     622 Apr  2 10:32 nginx_install.sh-rwx------ 1 root root     629 Apr  2 10:37 nginx_test.sh[root@Centos8 shells]# cat /etc/shells/bin/sh/bin/bash/usr/bin/sh/usr/bin/bash[root@Centos8 shells]# \n\nshell的符号~ 家目录\n&#x2F;- 返回上一次的目录\n[root@Centos8 bin]# pwd/usr/bin[root@Centos8 bin]# cd ~[root@Centos8 ~]# pwd/root[root@Centos8 ~]# cd -/usr/bin[root@Centos8 bin]#! 执行历史命令[root@Centos8 bin]# echo &quot;hello&quot;hello[root@Centos8 bin]# !!echo &quot;hello&quot;hello[root@Centos8 bin]# !ppwd/usr/bin[root@Centos8 bin]# $ 变量中取定值[root@Centos8 bin]# echo $USERroot[root@Centos8 bin]# / + - * \\ % 对应数学运算加 减 乘 除 取余[root@Centos8 bin]# expr 3 \\+ 36[root@Centos8 bin]# expr 3 \\- 30[root@Centos8 bin]# expr 3 \\* 39[root@Centos8 bin]# expr 3 \\/ 31[root@Centos8 bin]# expr 3 \\% 30[root@Centos8 bin]# &amp; 后台执行/* 星号是shell中的通配符，匹配所有? 问号是shell中的通配符，匹配除回车外的一个字符; 分好可以在shll中一行执行多个命令，命令间用分号分割| 管道符，上一个命令的输出作为下一个命令的输入 cat filename | grep &quot;abc&quot;\\ 转义字符`` 反引号，命令中执行命令 echo &quot;today is `date + %F ` &quot;&#x27;&#x27; 单引号 脚本中字符串要用单引号引起来，但是不同意双引号的是，单引号不解释变量“ 双引号 脚本中出现的字符串可以用双引号引起来\n\n管道| 管道在shell中使用最多的，很多命令都是通过管道符输出，然后再通过grep再查找\n[root@Centos8 shells]# cat /etc/passwd | grep &quot;root&quot;root:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/noloagin[root@Centos8 shells]#\n\n\n将命令的输出重定向到其他位置（比如文件）时可以用重定向\n\n输出重定向（&gt;(英文)）(JupyterNotebook) [admin@centos7 scripts]$ cat test6.sh # Specify the shell#!/bin/bash# Specify the Author# Author:Sun# Specify the create date# Created:2022/11/13 10:37# Specify the script`s version# Release:1.0# Add Description# Scription Description:Output redirection# 将date的输出重定向到test6_redirection.sh中，没有文件时将会新建，存在时将会覆盖原有的内容date &gt; test6_redirection.log# 将who的输出追加到test6_redirection.log中，并不会覆盖原有的内容who &gt;&gt; test6_redirection.log(JupyterNotebook) [admin@centos7 scripts]$ ./test6.sh (JupyterNotebook) [admin@centos7 scripts]$ lltotal 44-rwxrwxr-x 1 admin admin 694 Nov 13 15:40 a-chmod-777.sh-rwxrwxr-x 1 admin admin 295 Nov 13 20:22 a-script-copy.sh-rwxrwxr-x 1 admin admin 297 Nov 13 20:28 a-script-demo.sh-rwxrwxr-x 1 admin admin 392 Nov 13 16:00 test1.sh-rwxrwxr-x 1 admin admin 379 Nov 13 17:12 test2.sh-rwxrwxr-x 1 admin admin 420 Nov 13 19:48 test3.sh-rwxrwxr-x 1 admin admin 418 Nov 13 19:56 test4.sh-rwxrwxr-x 1 admin admin 534 Nov 13 20:11 test5_221113.log-rwxrwxr-x 1 admin admin 474 Nov 13 20:10 test5.sh-rw-rw-r-- 1 admin admin 193 Nov 13 20:28 test6_redirection.log-rwxr-xr-x 1 admin admin 539 Nov 13 20:27 test6.sh(JupyterNotebook) [admin@centos7 scripts]$ cat test6_redirection.log Sun Nov 13 20:28:36 CST 2022root     pts/4        2022-11-13 19:36 (114.254.0.50)admin    pts/6        2022-11-13 19:36 (114.254.0.50)root     pts/3        2022-11-13 17:23 (114.242.250.71)(JupyterNotebook) [admin@centos7 scripts]$ \n\n输入重定向（&lt;(英文)）\n输入重定向是文件的内容重定向至命令\ncommand &lt; inputfile\nwc 可以统计数据中的文本，默认情况下会输出3个值\n文本的行数\n文本的单词数\n文本的字节数\n\n(JupyterNotebook) [admin@centos7 scripts]$ wc &lt; test6.sh  19  43 495(JupyterNotebook) [admin@centos7 scripts]$ \n\n内连输入重定向(&lt;&lt;)\n使用此符号时，必须指定一个文本标记来划分输入数据的起止。任何字符串都可以作为文本标记，但在数据开始和结尾的文本标记必须一致\n\ncommond &lt;&lt; markerdatemarker\n\n(JupyterNotebook) [admin@centos7 scripts]$ wc &lt;&lt; EOF&gt; test data 1&gt; test data e&gt; test data 3&gt; EOF 3  9 36(JupyterNotebook) [admin@centos7 scripts]$ (JupyterNotebook) [admin@centos7 scripts]$ wc &lt;&lt; END&gt; TEST DATA 1&gt; TEST DATA 2&gt; END 2  6 24(JupyterNotebook) [admin@centos7 scripts]$ \n\n重定向\n&#x2F;&gt; 重定向输入\n&#x2F;&gt;&gt; 重定向追加输入\n&lt; 重定向输出\n&lt;&lt; 重定向追加输出\n\n[root@Centos8 shells]# lltotal 1020drwxr-xr-x 9 1001 1001     186 Apr 23  2019 nginx-1.16.0-rw-r--r-- 1 root root 1032345 Apr 23  2019 nginx-1.16.0.tar.gz-rwx------ 1 root root     622 Apr  2 10:32 nginx_install.sh-rwx------ 1 root root     629 Apr  4 22:33 nginx_test.sh[root@Centos8 shells]# pwd/root/shells[root@Centos8 shells]# echo haha &gt; ./forward.txt[root@Centos8 shells]# lltotal 1024-rw-r--r-- 1 root root       5 Apr  4 22:41 forward.txtdrwxr-xr-x 9 1001 1001     186 Apr 23  2019 nginx-1.16.0-rw-r--r-- 1 root root 1032345 Apr 23  2019 nginx-1.16.0.tar.gz-rwx------ 1 root root     622 Apr  2 10:32 nginx_install.sh-rwx------ 1 root root     629 Apr  4 22:33 nginx_test.sh[root@Centos8 shells]# cat forward.txt haha[root@Centos8 shells]# echo haha1 &gt; ./forward.txt[root@Centos8 shells]# cat forward.txt haha1[root@Centos8 shells]# echo haha2 &gt; ./forward.txt[root@Centos8 shells]# cat forward.txt haha2[root@Centos8 shells]# echo haha1 &gt; ./forward.txt[root@Centos8 shells]# echo haha2 &gt;&gt; ./forward.txt[root@Centos8 shells]# cat forward.txt haha1haha2[root@Centos8 shells]# echo haha3 &gt;&gt; ./forward.txt[root@Centos8 shells]# cat forward.txt haha1haha2haha3[root@Centos8 shells]# wc &lt; forward.txt  3  3 18[root@Centos8 shells]# wc forward.txt  3  3 18 forward.txt\n\nshell数学运算expr(JupyterNotebook) [admin@centos7 StudyScripts]$ expr 1 + 23(JupyterNotebook) [admin@centos7 StudyScripts]$ expr 1 - 2-1(JupyterNotebook) [admin@centos7 StudyScripts]$ expr 1 * 2expr: syntax error(JupyterNotebook) [admin@centos7 StudyScripts]$ expr 1 \\* 22(JupyterNotebook) [admin@centos7 StudyScripts]$ expr 1 / 20(JupyterNotebook) [admin@centos7 StudyScripts]$ expr 1 % 21(JupyterNotebook) [admin@centos7 StudyScripts]$ \n\n使用方括号为了兼容Bourne shell，bash shell保留了expr命令，但同时也提供了另一种更简单的方法执行数学运算。在bash中，要将数学运算结果赋给变量，可以使用$和方括号（$[operation]），获取变量值通过 $变量名。\n(JupyterNotebook) [admin@centos7 StudyScripts]$ var1=$[ 1 + 5 ](JupyterNotebook) [admin@centos7 StudyScripts]$ echo $var16(JupyterNotebook) [admin@centos7 StudyScripts]$ var2=$[$var1*2](JupyterNotebook) [admin@centos7 StudyScripts]$ echo $var212(JupyterNotebook) [admin@centos7 StudyScripts]$ \n\n脚本退出查看退出状态码Linux提供了专门的变量$?来保存最后一个已执行命令的退出状态码。\nLinux退出状态码\n\n\n\n状态码\n描述\n\n\n\n0\n命令成功结束\n\n\n1\n一般性未知错误\n\n\n2\n不适合的shell命令\n\n\n126\n命令无法执行\n\n\n127\n没找到命令\n\n\n128\n无效的退出参数\n\n\n128+x\n与Linux信号x相关的严重参数\n\n\n130\n通过Ctrl+C终止命令\n\n\n255\n正常范围之外的退出状态码\n\n\nexit\nexit\n\n格式化输出echo语法\n功能：将内容输出到默认显示设备应用场景：需要计算机程序输出的地方\n\n\necho命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。 功能说明:显示文字。\n\n[root@Centos8 ~]# echo &quot;Login:&quot;;readLogin:11[root@Centos8 ~]# echo -n &quot;Login:&quot;;readLogin:22[root@Centos8 ~]# echo -n &quot;Date:&quot;;date +%FDate:2022-04-05[root@Centos8 ~]# echo &quot;Date:&quot;;date +%FDate:2022-04-05[root@Centos8 ~]# 语法:echo [-ne][字符串]补充说明:1、echo会将输入的字符串送往标准输出。2、输出的字符串间以空白字符隔开,并在最后加上换行号。OPTIONS：-n  不要在最后自动换行-e  若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出:转义字符\\a  发出警告声;\\b  删除前一个字符;\\t  插入tab;\\n  换行且光标移至行首;\\c  最后不加上换行符号;\\f  换行但光标仍旧停留在原来的位置;\\r  光标移至行首，但不换行;\\v  与\\f相同;\\       插入\\字符;\\0nnn   打印nnn(八进制)所代表的ASCII字符;  备注：数字0  不要理解成字母o\\xNN  打印NN(十六进制)所代表的ASCII字符;-–help  显示帮助-–version显示版本信息[root@Centos8 ~]# echo -e &quot;\\a123&quot;123[root@Centos8 ~]# echo -e &quot;123\\b&quot;123[root@Centos8 ~]# echo -e &quot;\\b123&quot;                                                                  123[root@Centos8 ~]# echo -e &quot;\\t123&quot;    123[root@Centos8 ~]# echo -e &quot;12\\n3&quot;123cat[root@Centos8 ~]# echo -e &quot;\\c123&quot;[root@Centos8 ~]# echo -e &quot;\\f123&quot;123[root@Centos8 ~]# echo -e &quot;\\r123&quot;123[root@Centos8 ~]# echo -e &quot;\\v12\\n3&quot;123[root@Centos8 ~]# 你的进制转换过关吗？[root@zutuanxue ~]# echo -e &quot;\\0123&quot;   #ot(123) = 83  对应ascii表的SS[root@zutuanxue ~]# echo -e &quot;\\x61&quot;   #ox(61) = 97  对应ascii表的aa\n\ntime.sh#!/bin/bash# 倒计时for time in $(seq 9 -1 0);do    echo -ne &quot;\\b$time&quot;;sleep 1doneecho -e &quot;\\a&quot;\n\n颜色输出脚本中echo显示内容带颜色显示,echo显示带颜色，需要使用参数-e格式如下：\necho -e &quot;\\033[字背景颜色；文字颜色m字符串\\033[0m&quot;\n\n例如： echo -e “\\033[41;36m something here \\033[0m”其中41的位置代表底色， 36m的位置是代表字的颜色1、字背景颜色和文字颜色之间是英文的2、文字颜色后面有个m3、字符串前后可以没有空格，如果有的话，输出也是同样有空格\n\n下面是相应的字和背景颜色，可以自己来尝试找出不同颜色搭配\n例　　echo -e “\\033[31m 红色字 \\033[0m”　　echo -e “\\033[34m 黄色字 \\033[0m”　　echo -e “\\033[41;33m 红底黄字 \\033[0m”　　echo -e “\\033[41;37m 红底白字 \\033[0m”　　字颜色：30—–37　　echo -e “\\033[30m 黑色字 \\033[0m”　　echo -e “\\033[31m 红色字 \\033[0m”　　echo -e “\\033[32m 绿色字 \\033[0m”　　echo -e “\\033[33m 黄色字 \\033[0m”　　echo -e “\\033[34m 蓝色字 \\033[0m”　　echo -e “\\033[35m 紫色字 \\033[0m”　　echo -e “\\033[36m 天蓝字 \\033[0m”　　echo -e “\\033[37m 白色字 \\033[0m”　　字背景颜色范围：40—–47　　echo -e “\\033[40;37m 黑底白字 \\033[0m”　　echo -e “\\033[41;37m 红底白字 \\033[0m”　　echo -e “\\033[42;37m 绿底白字 \\033[0m”　　echo -e “\\033[43;37m 黄底白字 \\033[0m”　　echo -e “\\033[44;37m 蓝底白字 \\033[0m”　　echo -e “\\033[45;37m 紫底白字 \\033[0m”　　echo -e “\\033[46;37m 天蓝底白字 \\033[0m”　　echo -e “\\033[47;30m 白底黑字 \\033[0m”　　最后面控制选项说明　　\\033[0m 关闭所有属性　　\\033[1m 设置高亮度　　\\033[4m 下划线　　\\033[5m 闪烁　　\\033[7m 反显　　\\033[8m 消隐　　\\033[30m — \\33[37m 设置前景色　　\\033[40m — \\33[47m 设置背景色　　　　　　\\033[nA 光标上移n行　　\\033[nB 光标下移n行　　\\033[nC 光标右移n行　　\\033[nD 光标左移n行　　\\033[y;xH设置光标位置　　\\033[2J 清屏　　\\033[K 清除从光标到行尾的内容　　\\33[s 保存光标位置　　\\033[u 恢复光标位置　　\\033[?25l 隐藏光标　　\\033[?25h 显示光标　　用法例子  光标下移三行　　[root@zutuanxue ~]# echo -e &quot;\\033[0m today is fine \\033[3B&quot; today is fine \n\nfruits_shop.sh\n需求：输出一个水果购物界面 fruits_shop.sh\n\n案例要点：\n• echo输出缩进问题• 字体颜色输出\n#!/bin/bash# #Author: www.zutuanxue.com#Release: #Description:打印水果超市列表echo -e &quot;\\t\\t    \\033[32m Fruits List \\033[0m      \\n&quot;echo -e &quot;\\t   \\033[31mFruit\\033[0m   \\t\\t \\033[31mPrice\\033[0m \\t\\t\\033[31mWeight\\033[0m&quot;echo -e &quot;\\t\\033[34m1)Apple\\t\\t￥10.00\\t\\t1KG\\033[0m&quot;echo -e &quot;\\t\\033[34m2)Banana\\t￥9.00\\t\\t1KG\\033[0m&quot;echo -e &quot;\\t\\033[34m3)Orange\\t￥15.20\\t\\t1KG\\033[0m&quot;\n\n格式化输入read命令默认接受键盘的输入，回车符代表输入结束\nread命令选项\n•\t-p打印信息•\t-t限定时间•\t-s不回显•\t-n输入字符个数\n[root@Centos8 shells]# cat read_command_study.sh #!/bin/bashclear# echo -ne &quot;Login:&quot;# read acc# 打印信息read -p &quot;Login:&quot; accecho -ne &quot;Password:&quot;# 不回显，现实10s，限制输入6个字符read -s -t10 -n6 pwdechoecho -e &quot;account:$acc \\tpassword:$pwd&quot;[root@Centos8 shells]# bash read_command_study.sh Login:rootPassword:account:root    password:123456[root@Centos8 shells]# \n\nlogin.sh[root@Centos8 shells]# cat login.sh #!/usr/bin/bash# 模拟登陆clearecho &quot;Centos Linux 8 (Core)&quot;echo -e &quot;Kernel &#x27;uname -r &#x27; an &#x27; uname -m &#x27;\\n&quot;echo -ne &quot;$HOSTNAME login: &quot;read accread -p &quot;Password: &quot; pwd[root@Centos8 shells]# bash login.sh Centos Linux 8 (Core)Kernel &#x27;uname -r &#x27; an &#x27; uname -m &#x27;Centos8 login: rootPassword: 123456\n\nshell变量变量介绍\n在编程中，我们总有一些数据需要临时存放在在内存，以待后学使用时快速读出\n\n计算机的单位:1B=8bit1KB=1024B1MB=1024KB1GB=1024MB1TB=1024GB1PB=1024TB1EB=1024PB1ZB=1024EB...好了，已经够大了！当然还有YB、BB更大的单位，同样进制也是1024.1G=1024*1024*1024=1073741824B\n\n假如你将一个1B的字符存入内存，如何读出呢？有没有一种大海捞针的感觉啊！我们讨论一下计算机是如何通过让我们人类快速将数据存在内存，如何从内存中读出数据的。我们研究过变量后就明白了。\n变量：变量是编程中最常用的一种临时在内存中存取数据的一种方式。\n变量存取原理\n关于内存的说明a、系统启动    内存被按照1B一个单位划分成N块     并且以十六进制为每一个空间编号b、内存跟踪表记录  使用和未使用的内存的地址编号c、内存申请    系统从未使用的内存中拿出一个或者一段连续空间  给你使用   同时在内存跟踪表中记录该地址被占用不在分给别人，同时在系统中建立映射机制   比如:变量名 STRING1=‘ABC’name&lt;==&gt;0x5d、释放内存从内存跟踪表中将记录删除，下次存数据直接覆盖\n\n\nCHAR1(0x3)=A从图片可以看出，当我们在脚本中定义变量存值的时候，可以从以下方面看到变化：a、内存占用：如果存的是一个字符则占用1个字节，如果存的是字符串则是字符串的长度加1个字节长度(\\0是一个特殊字符，代表字符串结束)。b、变量名与内存空间关系：计算机中会将对应的内存空间地址和变量名称绑定在一起，此时代表这段内存空间已经被程序占用，其他程序不可复用；然后将变量名对应的值存在对应内存\n\n变量定义什么时候需要定义变量？如果某个内容需要多次使用，并且在代码中重复出现，那么可以用变量代表该内容。这样在修改内容的时候，仅仅需要修改变量的值。在代码运作的过程中，可能会把某些命令的执行结果保存起来，后续代码需要使用这些结果，就可以直接使用这个变量。\n定义一个变量变量格式： 变量名&#x3D;值在shell编程中的变量名和等号之间不能有空格。变量名命名规则：\n•\t命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n•\t中间不能有空格，可以使用下划线（_）。\n•\t不能使用标点符号。\n•\t不能使用bash里的关键字（可用help命令查看保留关键字）。\n定义变量举例：VAR1&#x3D;1 age&#x3D;18 整形 name&#x3D;‘baism’ 字符串 score&#x3D;88.8 浮点\n注意：字符串要用单引号或双引号引起来建议变量名为大写，和命令区分_name\n\n定义变量演示：\n变量赋值，此种方法设置为本地变量[root@zutuanxue ~]# name=&quot;baism&quot;[root@zutuanxue ~]# school=&#x27;ayitula&#x27;[root@zutuanxue ~]# age=30[root@zutuanxue ~]# score=88.8\n\n取消变量 unset取消当前环境中的变量，如果是变量设置是保存在文件中，下次重启又会恢复\n[root@zutuanxue ~]# unset name[root@zutuanxue ~]# echo $name\n\n有类型变量 declare\ni 整形变量 将变量看成整数\n-r 只读变量 使变量只读 readonly,该变量的值无法改变，并且不能为unset\n-x 全局变量标记变量通过环境导出 export\n-a 索引数组 指定为索引数组（普通数组）；查看普通数组\n-A 关联数组 指定为关联数组 查看关联数组\n\n[root@zutuanxue ~]# declare -i num=&#x27;asa&#x27;[root@zutuanxue ~]# echo $num0[root@zutuanxue ~]# num=100[root@zutuanxue ~]# echo $num100[root@zutuanxue ~]# declare -r num[root@zutuanxue ~]# echo $num100[root@zutuanxue~]# num=200-bash: num: 只读变量[root@zutuanxue ~]# declare -xdeclare -x HISTCONTROL=&quot;ignoredups&quot;declare -x HISTSIZE=&quot;1000&quot;declare -x HOME=&quot;/root&quot;declare -x HOSTNAME=&quot;Bai_Shuming&quot;declare -x LANG=&quot;zh_CN.UTF-8&quot;declare -x LESSOPEN=&quot;||/usr/bin/lesspipe.sh %s&quot;\n\n变量分类本地变量定义在脚本或当前终端中，脚本执行完毕或终端结束变量失效\n环境变量定义在用户家目录下的.bashrc或.bash_profile文件中，私有变量，只能本用户使用\n\n查看用户的环境变量 env( | wc -l)\n查询当前用户的所有变量（临时变量与环境变量） set (| wc -l)\n将当前环境变量变成环境变量 export\n\n定义一个临时变量1、[root@zutuanxue tmp]# export A=hello //临时将一个本地变量（临时变量）变成环境变量[root@zutuanxue tmp]# env|grep ^AA=hello2、[root@zutuanxue tmp]# A=HELLO[root@zutuanxue tmp]# export A3、定义一个永久生效变量：vim .bash_profile 或者 ~/.bashrcA=hello关于export说明用户登录时:1) 用户登录到Linux系统后，系统将启动一个用户shell。在这个shell中，可以使用shell命令或声明变量，也可以创建并运行 shell脚本程序。运行脚本时:2) 运行shell脚本程序时，系统将创建一个子shell。此时，系统中将有两个shell，一个是登录时系统启动的shell，另一个是系统为运行脚本程序创建的shell。当一个脚本程序运行完毕，它的脚本shell将终止，可以返回到执行该脚本之前的shell。从这种意义上来说，用户可以有许多 shell，每个shell都是由某个shell（称为父shell）派生的。在子shell中定义的变量只在该子shell内有效。如果在一个shell脚本程序中定义了一个变量，当该脚本程序运行时，这个定义的变量只是该脚本程序内的一个局部变量，其他的shell不能引用它，要使某个变量的值可以在其他shell中被改变，可以使用export命令对已定义的变量进行输出。 export命令将使系统在创建每一个新的shell时定义这个变量的一个拷贝。这个过程称之为变量输出。[root@Centos8 ~]# _age=88[root@Centos8 ~]# _name=&#x27;baism&#x27;[root@Centos8 ~]# export _name[root@Centos8 ~]# vim var_test.sh[root@Centos8 ~]# [root@Centos8 ~]# [root@Centos8 ~]# bash var_test.sh baism[root@Centos8 ~]# cat var_test.sh #!/bin/bashecho $_ageecho $_name[root@Centos8 ~]# \n\n父shell与子shell\n\n全局变量使用export命令将本地变量输出为当前shell中的环境变量所有用户及shell都可以使用，可以在&#x2F;etc&#x2F;profile &#x2F;etc&#x2F;bashrc下永久定义\n\n打印全局变量 printenv\n\n内置变量系统变量(内置bash中变量) ： shell本身已经固定好了它的名字和作用.\n $?：上一条命令执行后返回的状态，当返回状态值为0时表示执行正常，非0值表示执行异常或出错 若退出状态值为0，表示命令运行成功 若退出状态值为127,表示command not found 若退出状态值为126,表示找到了该命令但无法执行（权限不够） 若退出状态值为1&amp;2,表示没有那个文件或目录 $$：当前所在进程的进程号     echo $$   eg：kill -9 `echo $$`  = exit   退出当前会话$!：后台运行的最后一个进程号  （当前终端）  # gedit &amp;!$ 调用最后一条命令历史中的参数!! 调用最后一条命令历史$#：脚本后面接的参数的个数$*：脚本后面所有参数，参数当成一个整体输出，每一个变量参数之间以空格隔开$@: 脚本后面所有参数，参数是独立的，也是全部输出$0：当前执行的进程/程序名  echo $0   $1~$9 位置参数变量$&#123;10&#125;~$&#123;n&#125; 扩展位置参数变量  第10个位置变量必须用&#123;&#125;大括号括起来./1.sh a b c[root@zutuanxue shell01]# cat 2.sh #!/bin/bash#xxxxecho &quot;\\$0 = $0&quot;echo &quot;\\$# = $#&quot;echo &quot;\\$* = $*&quot;echo &quot;\\$@ = $@&quot;echo &quot;\\$1 = $1&quot; echo &quot;\\$2 = $2&quot; echo &quot;\\$3 = $3&quot; echo &quot;\\$11 = $&#123;11&#125;&quot; echo &quot;\\$12 = $&#123;12&#125;&quot; 了解$*和$@的区别：$* :表示将变量看成一个整体$@ :表示变量是独立的#!/bin/bashfor i in &quot;$@&quot;doecho $idoneecho &quot;======我是分割线=======&quot;for i in &quot;$*&quot;doecho $idone[root@zutuanxue shell01]# bash 3.sh a b cabc======我是分割线=======a b c\n\n变量比较变量总结说明：\n\n本地变量：当前用户自定义的变量。当前进程中有效，其他进程及当前进程的子进程无效。\n环境变量：当前进程有效，并且能够被子进程调用。\n全局变量：全局所有的用户和程序都能调用，且继承，新建的用户也默认能调用.\n内置变量：shell本身已经固定好了它的名字和作用.\n\n\n\n\n变量类型\n作用域\n生命周期\n\n\n\n本地变量\n当前shell环境(子shell不能用)\n脚本结束或终端结束\n\n\n环境变量\n当前shell或者子shell\n当前进程结束\n\n\n全局变量\n所有用户及shell环境\n关机\n\n\n内置变量\n所有用户及shell环境\n关机\n\n\n变量管理shell数组数组介绍默认数组关联数字shell五大运算符1.\t基本语法 \t$[运算式]2.\t实例 \t计算（2+3)*4 \t[root@Centos8 shells]# s=$[(2+3)*4][root@Centos8 shells]# echo $s20[root@Centos8 shells]# expr 2 + 35[root@Centos8 shells]# echo $[(2+3)*4]20[root@Centos8 shells]# expr 1+21+2[root@Centos8 shells]# expr 1 + 23[root@Centos8 shells]# expr 1 - 2-1[root@Centos8 shells]# expr 1 \\* 22[root@Centos8 shells]# expr 6 \\/ 23[root@Centos8 shells]# expr 6 \\% 42[root@Centos8 shells]# \n\n赋值数学比较关系文件类型比较条件控制\n基本语法a. test conditionb. condition（注意condition前后要有空格）\n\n[root@Centos8 shells]# a=hello[root@Centos8 shells]# echo $ahello[root@Centos8 shells]# test $a=hell(0为真 1为假)[root@Centos8 shells]# test $a = pell[root@Centos8 shells]# echo $?1[root@Centos8 shells]# test $a = hello[root@Centos8 shells]# echo $?0[root@Centos8 shells]# [ $a = Hello ][root@Centos8 shells]# echo $?1[root@Centos8 shells]# [ $a = hello ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# \n\n\n常用判断条件a.\t两个整数之间比较-eq等于（equal) -ne不等于（not equal)-lt小于（less than) -le小于等于（less equal）-gt大于（greater than) -ge大于等于（greater equal)b.\t文件权限的判断-r 读的权限（read）-w 写的权限（write）-x 执行的权限（execute）c.\t文件类型的判断-e 文件存在（existense）-f 文件存在并且是一个常规的文件（file）-d 文件存在并且是一个目录（directory）\n\n[root@Centos8 shells]# [ 4 -eq 3 ][root@Centos8 shells]# echo $?1[root@Centos8 shells]# [ 4 -ne 3 ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [ 4 -lt 3 ][root@Centos8 shells]# echo $?1[root@Centos8 shells]# [ 4 -gt 3 ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [ 4 -le 3 ][root@Centos8 shells]# echo $?1[root@Centos8 shells]# [ 4 -ge 3 ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [root@Centos8 shells]# [ -r add.sh ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [ -x add.sh ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [ -w add.sh ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [root@Centos8 shells]# [ -e add.sh ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [ -f add.sh ][root@Centos8 shells]# echo $?0[root@Centos8 shells]# [ -d add.sh ][root@Centos8 shells]# echo $?1[root@Centos8 shells]# # 多条件判断 &amp;&amp;且 || 或[root@Centos8 shells]#a=15[root@Centos8 shells]# [ $a -lt 20 ] &amp;&amp; echo &quot;$a &lt; 20&quot; || echo &quot;$a &gt; 20&quot;15 &lt; 20[root@Centos8 shells]# a=159[root@Centos8 shells]# [ $a -lt 20 ] &amp;&amp; echo &quot;$a &lt; 20&quot; || echo &quot;$a &gt; 20&quot;159 &gt; 20[root@Centos8 shells]# \n\n流程控制ifif\n# 单分支# ;分割命令if [条件判断];then    程序fiif[条件判断]then    程序fi# 写法1#!/bin/bashif [ $1 = user1 ]thenecho &quot;welcome, $1&quot;fi# 写法2#!/bin/bash  if [ &quot;$1&quot;x = &quot;user1&quot;x ]thenecho &quot;welcome, $1&quot;fi[root@Centos8 ~]# bash if01.sh user1welcome, user1[root@Centos8 ~]# a=33[root@Centos8 ~]# if [ $a  -gt 18 -a $a -lt 35 ]; then echo &quot;OK&quot;; fiOK[root@Centos8 ~]# a=333[root@Centos8 ~]# if [ $a  -gt 18 -a $a -lt 35 ]; then echo &quot;OK&quot;; fi[root@Centos8 ~]# \n\nif…else[root@Centos8 ~]# ./if01.sh user1 33welcome, user1成年人[root@Centos8 ~]# cat -n if01.sh      1  #!/bin/bash     2       3  # $1 判断用户     4  if [ &quot;$1&quot;x = &quot;user1&quot;x ]     5  then     6  echo &quot;welcome, $1&quot;     7  fi     8       9  if [ $2 -gt 18 ]    10  then    11      echo &quot;成年人&quot;    12  else    13      echo &quot;未成年人&quot;    14  fi[root@Centos8 ~]# ./if01.sh user1 3welcome, user1未成年人[root@Centos8 ~]# \n\nif…elif..else[root@Centos8 ~]# ./if01.sh user1 3 34welcome, user1未成年人E[root@Centos8 ~]# ./if01.sh user1 34 134welcome, user1成年人Error ! ! ![root@Centos8 ~]#[root@Centos8 ~]# cat if01.sh #!/bin/bash# $1 判断用户if [ &quot;$1&quot;x = &quot;user1&quot;x ]thenecho &quot;welcome, $1&quot;fi# $2 判断用户是否成年if [ $2 -gt 18 ]then    echo &quot;成年人&quot;else    echo &quot;未成年人&quot;fi# $3 判断成绩等级if [ $3 -ge 90 -a $3 -le 100 ]then    echo &quot;A&quot;elif [ $3 -ge 80 -a $3 -lt 90 ]then    echo &quot;B&quot;elif [ $3 -ge 70 -a $3 -lt 80 ]then    echo &quot;C&quot;elif [ $3 -ge 60 -a $3 -lt 70 ]then    echo &quot;D&quot;elif [ $3 -ge 0 -a $3 -lt 60 ]then    echo &quot;E&quot;else    echo &quot;Error ! ! !&quot;fi[root@Centos8 ~]# \n\nif高级语法case1.\t基本语法case $变量值 in&quot;值1&quot;)    如果变量值=值1，则执行程序1;;&quot;值2&quot;)    如果变量值=值2，则执行程序2;;&quot;值3&quot;)    如果变量值=值3，则执行程序3;;**    **其他分支***)    如果变量值都不符合以上的值，执行此程序;;esac\n\n2.\t实例[root@Centos8 shells]# vim case01.sh[root@Centos8 shells]# chmod 744 case01.sh [root@Centos8 shells]# ./case01.sh 2 Ctwoc[root@Centos8 shells]# ./case01.sh 2 Ftwoother[root@Centos8 shells]# ./case01.sh 4 Aothera[root@Centos8 shells]# cat case01.sh #!/bin/bash# case用例case $1 in1)    echo &quot;one&quot;;;2)    echo &quot;two&quot;;;3)    echo &quot;three&quot;;;*)    echo &quot;other&quot;;;esaccase $2 in&quot;A&quot;)    echo &quot;a&quot;;;&quot;B&quot;)    echo &quot;b&quot;;;&quot;C&quot;)    echo &quot;c&quot;;;*)    echo &quot;other&quot;;;esac[root@Centos8 shells]# \n\nforfor循环介绍\n基本语法\n\n# 在双小括号的情况下，里面可以直接用数学上的符号，# 如果是$[]内的话，需要用-lt小于 -le小于等于 -gt大于 -ge大于等于for((初始值;循环控制条件;变量变化))do    程序done\n\n\n实例1\n\n[root@Centos8 shells]# ./for01.sh 1005050[root@Centos8 shells]# cat for01.sh #!/bin/bash# for循环从1加到100for(( i=1; i&lt;= $1; i++ ))do    sum=$[ $sum + $i ];doneecho $sum[root@Centos8 shells]# ./for01.sh 1000500500[root@Centos8 shells]# \n\n\n实例2\n\n[root@Centos8 shells]# vim for02.sh[root@Centos8 shells]# ./for02.sh linuxwindowsmacunix[root@Centos8 shells]# cat for02.sh #/bin/bash# forfor os in linux windows mac unixdo    echo &quot;$os&quot;done[root@Centos8 shells]# [root@Centos8 shells]# for i in &#123;1..100&#125;;do sum1=$[ $sum1+$i ];done;echo $sum15050[root@Centos8 shells]# \n\n$* $@区别\n$* $@都表示传递给函数或脚本的所有参数。在不加引号的情况下，输出的参数都是一样的$1,$2,,,。加了引号之后$*表示所有的参数输出为一个整体，$@还是依旧依次输出$1,$2,,,\n\n[root@Centos8 shells]# chmod 744 for03.sh [root@Centos8 shells]# ./for03.sh a b c d e=======$*========abcde=======$@========abcde=======$*========a b c d e=======$@========abcde[root@Centos8 shells]# cat for03.sh #!/bin/bashecho &#x27;=======$*========&#x27;for parmeter in $*do    echo &quot;$parmeter&quot;doneecho &#x27;=======$@========&#x27;for parmeter in $@do    echo &quot;$parmeter&quot;doneecho &#x27;=======$*========&#x27;for parmeter in &quot;$*&quot;do    echo &quot;$parmeter&quot;doneecho &#x27;=======$@========&#x27;for parmeter in &quot;$@&quot;do    echo &quot;$parmeter&quot;done[root@Centos8 shells]# \n\nwhilewhile语法while [条件判断式]do    程序done\n\nwhile实战[root@Centos8 shells]# bash while.sh 1005050[root@Centos8 shells]# cat while.sh #!/bin/bash# while循环a=1while [ $a -le $1 ]do    sum=$[ $sum + $a ]    a=$[$a + 1]doneecho $sum[root@Centos8 shells]# bash while.sh 1055[root@Centos8 shells]# \n\nwhile实战utilutil介绍util语法case介绍case语法特殊变量shell函数函数介绍函数语法函数应用系统函数date[root@Centos8 shells]# bash cmd01.sh qweqwe_log_1649663196[root@Centos8 shells]# cat cmd01.sh #!/bin/bash# 系统函数datefilename=&quot;$1&quot;_log_$(date +%s)echo &quot;$filename&quot;[root@Centos8 shells]# \n\nbasename\n获取当前文件名，针对最后一个”&#x2F;“之后的内容\n\n[root@Centos8 shells]# basename /root/shells/parmeter.sh parmeter.sh[root@Centos8 shells]# basename /root/shells/parmeter.sh .shparmeter[root@Centos8 shells]# bash parmeter.sh a b c d=====$n=====ScripName：parmeter.shScriptName: parmeter1st parmeter: a2ed parmeter: b=====$#=====parmeter numbers 4=====$*=====a b c d=====$@=====a b c d=====$*=====a b c d=====$@=====a b c d[root@Centos8 shells]# vim parmeter.sh[root@Centos8 shells]# cat parmeter.sh #/bin/bash# 系统内置函数echo &#x27;=====$0=====&#x27;echo &quot;ScripName：$0&quot;echo &quot;ScriptName: $(basename $0 .sh)&quot;echo &quot;1st parmeter: $1&quot;echo 2ed parmeter: $2echo &#x27;=====$#=====&#x27;echo parmeter numbers $#echo &#x27;=====$*=====&#x27;echo $*echo &#x27;=====$@=====&#x27;echo $@echo &#x27;=====$*=====&#x27;echo &quot;$*&quot;echo &#x27;=====$@=====&#x27;echo &quot;$@&quot;[root@Centos8 shells]# \n\ndiranaem\n获取当前路径，针对最后一个”&#x2F;“之前的内容\n\n[root@Centos8 shells]# dirname /root/shells/parmeter.sh /root/shells[root@Centos8 shells]# dirname ./parmeter.sh .[root@Centos8 shells]# [root@Centos8 shells]# /root/shells/parmeter.sh a b c=====$n=====ScripName：/root/shells/parmeter.shScriptName: parmeterScriptPath: /root/shells1st parmeter: a2ed parmeter: b=====$#=====parmeter numbers 3=====$*=====a b c=====$@=====a b c=====$*=====a b c=====$@=====a b c[root@Centos8 shells]# cat parmeter.sh #/bin/bash# 系统内置函数echo &#x27;=====$n=====&#x27;echo &quot;ScripName：$0&quot;echo &quot;$baename&quot;echo &quot;$dirname&quot;echo &quot;ScriptName: $(basename $0 .sh)&quot;echo &quot;ScriptPath: $(cd $(dirname $0); pwd)&quot;echo &quot;1st parmeter: $1&quot;echo 2ed parmeter: $2echo &#x27;=====$#=====&#x27;echo parmeter numbers $#echo &#x27;=====$*=====&#x27;echo $*echo &#x27;=====$@=====&#x27;echo $@echo &#x27;=====$*=====&#x27;echo &quot;$*&quot;echo &#x27;=====$@=====&#x27;echo &quot;$@&quot;[root@Centos8 shells]# \n\n自定义函数[function] funname[()]&#123;    Aaction    [return int;]&#125;```sh1. 再调用函数地方之前，先声明函数，shell脚本是逐行运行，不会像其他语言一样先编译2. 函数返回值，只能通过$?系统变量获得，可以下显示加：return返回，如果不加将以最后一条执行命令结果作为返回值。return后跟数值（0-255）```sh[root@Centos8 shells]# vim function.sh[root@Centos8 shells]# ./function.sh 请输入第一个整数：123请输入第一个整数：321444和：444[root@Centos8 shells]# cat function.sh #!/bin/bash# function addfunction add()&#123;    s=$[$1 + $2]    echo $s&#125;read -p &quot;请输入第一个整数：&quot; aread -p &quot;请输入第一个整数：&quot; badd $a $bsum=$(add $a $b)echo &quot;和：&quot;$sum[root@Centos8 shells]# \n\n正则表达式正则表达式介绍常规匹配\n[root@Centos8 shells]# cat /etc/passwd | grep rootroot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin[root@Centos8 shells]# \n\n特殊字符# ^ 匹配一行的开头，匹配所有以s开头的[root@Centos8 shells]# cat /etc/passwd | grep ^ssync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownsystemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologinsystemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologinsetroubleshoot:x:995:991::/var/lib/setroubleshoot:/sbin/nologinsssd:x:992:988:User for sssd:/:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin[root@Centos8 shells]# cat /etc/passwd | grep ^sssssd:x:992:988:User for sssd:/:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin[root@Centos8 shells]# # $ 匹配一行的结束，以t结束的[root@Centos8 shells]# cat /etc/passwd | grep t$halt:x:7:0:halt:/sbin:/sbin/halt[root@Centos8 shells]# # ^$ 匹配空行# . 匹配任意一个字符，匹配r开头，t结尾，中间有任意两个字符的数据[root@Centos8 shells]# cat /etc/passwd | grep r..troot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologin[root@Centos8 shells]# # * 不单独使用，和前一个字符一起使用，表示匹配前一个字符0次或多次[root@Centos8 shells]# cat /etc/passwd | grep ro.troot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin[root@Centos8 shells]# # .*匹配任意字符的任意次，也就是任意字符串；匹配以a开头，bash结尾，中间是任意字符串的数据[root@Centos8 shells]# cat /etc/passwd | grep ^a.*bash$admin:x:1000:1000::/home/admin:/bin/bash[root@Centos8 shells]# # []表示字符区间，匹配某个范围内的一个字符[6,8]   匹配6或8[0-9]   匹配0-9之间任意一个数[0-9]*  匹配任意长度的数字字符串[a-z]   匹配a-z之间任意一个[a-z]*  匹配任意长度的a-z的字符串[a-c,e-f]   匹配a-c,e-f各一个组成的字符串[root@Centos8 shells]# cat /etc/passwd | grep r[a-z]toperator:x:11:0:operator:/root:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinrngd:x:990:986:Random Number Generator Daemon:/var/lib/rngd:/sbin/nologin# \\ 转义字符[root@Centos8 shells]# cat /root/shells/tar01.sh | grep &#x27;\\$&#x27;if [ $# -ne 1 ]if [ -d $1 ]DIR_NAME=$(basename $1)DIR_PATH=$(cd $(dirname $1); pwd)DATE=$(date +%y%m%d)FILE=archive_$&#123;DIR_NAME&#125;_$DATE.tar.gzDEST=/root/File/$FILEtar -czf $DEST $DIR_PATH/$DIR_NAMEif [ $? -eq 0 ]    echo &#x27;归档文件为：$DEST&#x27;[root@Centos8 shells]# cat /root/shells/tar01.sh | grep /&#x27;\\$&#x27;DEST=/root/File/$FILEtar -czf $DEST $DIR_PATH/$DIR_NAME[root@Centos8 shells]# # + 一次或多次# ？ 零次或一次\n\nPOSIX字符shell对文件的操作shell对文件操作介绍sed编辑器sed编辑器被称作流编辑器，与普通的交互式文本编辑器截然不同。在交互式文本编辑器（比如vim）中，可以用键盘命令交互式的插入、删除或替换文本数据。流编辑器则是根据事先设计好的一组规则编辑数据流。\n\n\nsed命令的格式如下\n\nsed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]\n\n参数说明\n-e script或–expression&#x3D;script 以选项中指定的script来处理输入的文本文件。\n-f script文件–file&#x3D;&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。\n-h或–help 显示帮助。\n-n或–quiet或–silent 仅显示script处理后的结果。\n-V或–version 显示版本信息。\n\n动作说明\na ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～\nc ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！\nd ：删除，因为是删除啊，所以 d 后面通常不接任何东东；\ni ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\np ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～\ns ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s&#x2F;old&#x2F;new&#x2F;g 就是啦！\n\n\ns 取代\n\n\n使用替换（s）命令，用斜线间指定的第二个字符串“AA”替换第一个字符串“world”\n\n[root@cfff3ad6bb5a shells]# pwd/home/shells[root@cfff3ad6bb5a shells]# echo &quot;hello world&quot;      hello world[root@cfff3ad6bb5a shells]# echo &quot;hello world&quot; | sed &#x27;s/world/AA/&#x27;hello AA[root@cfff3ad6bb5a shells]# \n\n\n使用替换（s）命令，同时对数据做多处修改\n\n\n注意：sed编辑器不会修改文本文件的数据，他只是将修改后的数据发送到STDOUT，如果查看原来的文件还是原先内容\n\n[root@cfff3ad6bb5a shells]# cat data1.txt The quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]# sed &#x27;s/dog/cat/&#x27; data1.txt The quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy catThe quick brown fox jumps over the lazy cat[root@cfff3ad6bb5a shells]# cat data1.txt The quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]# \n\n\n以行为单位的新增\n\n\n使用新增（a）命令在指定行新增数据，文件的第2行后添加一行，并将结果输出到标准输出\n\n[root@cfff3ad6bb5a shells]# sed -e 2a\\test-add-new-line data1.txt The quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogtest-add-new-lineThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]#\n\n\n以行为单位的删除\n\n\n使用删除（d）命令删除指定行；将2至4行删除；将第2行删除\n\n[root@cfff3ad6bb5a shells]# nl data1.txt      1  The quick brown fox jumps over the lazy dog     2  The quick brown fox jumps over the lazy dog     3  The quick brown fox jumps over the lazy dog     4  The quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]# nl data1.txt | sed &#x27;2,4d&#x27;     1  The quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]# nl data1.txt | sed &#x27;2d&#x27;     1  The quick brown fox jumps over the lazy dog     3  The quick brown fox jumps over the lazy dog     4  The quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]# \n\n\n以行为单位的替换与显示\n\n\n将2-4行替换为NO 2-4 number\n\n[root@cfff3ad6bb5a shells]# nl data1.txt      1  The quick brown fox jumps over the lazy dog     2  The quick brown fox jumps over the lazy dog     3  The quick brown fox jumps over the lazy dog     4  The quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]# nl data1.txt | sed &#x27;2,4c NO 2-4 number&#x27;     1  The quick brown fox jumps over the lazy dogNO 2-4 number[root@cfff3ad6bb5a shells]# \n\n\n仅列出文件第2-4行\n\n[root@cfff3ad6bb5a shells]# nl data1.txt | sed -n &#x27;2,4p&#x27;     2  The quick brown fox jumps over the lazy dog     3  The quick brown fox jumps over the lazy dog     4  The quick brown fox jumps over the lazy dog[root@cfff3ad6bb5a shells]# \n\n\n\n\n\nsed小技巧shell对输出流的处理cut在文件中负责剪切数据的\n\n基本用法\ncut [选项参数] filename说明：默认分隔符是制表符\n\n选项参数\n\n\n\n\n\n选项参数\n功能\n\n\n\n-f\n列号，提取第几列\n\n\n-d\n分隔符，按照指定分隔符分割列，默认是制表符”\\t“\n\n\n-c\n按字符进行分割，后加n表示去第几列，比如-c 2\n\n\n\n实例\n\n# 数据准备[root@Centos8 shells]# cat cut01.sh #!/bin/bash# 文本处理工具 cut dong shenguan zhenlai laile le[root@Centos8 shells]# # 1、切割第一列 （按空格切割，提取第1列）[root@Centos8 shells]# cut -d &quot; &quot; -f 1 cut01.sh #!/bin/bash#dongguanlaile[root@Centos8 shells]# # 2、切割第2，3列 （按空格切割，提取第2，3列）[root@Centos8 shells]# cut -d &quot; &quot; -f 2,3 cut01.sh #!/bin/bash文本处理工具 cutshenzhenlaile# 切割第1，6，7列 （查找以bash结尾的文件，按“:”切割，提取第1，6，7列）[root@Centos8 shells]# cat /etc/passwd | grep bash$root:x:0:0:root:/root:/bin/bashadmin:x:1000:1000::/home/admin:/bin/bash[root@Centos8 shells]# cat /etc/passwd | grep bash$ | cut -d &quot;:&quot; -f 1,6,7root:/root:/bin/bashadmin:/home/admin:/bin/bash# 切割第1，5-最后1列 （查找以bash结尾的文件，按“:”切割，提取第1，5-最后1列）[root@Centos8 shells]# cat /etc/passwd | grep bash$ | cut -d &quot;:&quot; -f 1,5-root:root:/root:/bin/bashadmin::/home/admin:/bin/bash[root@Centos8 shells]# # 3、切割ifconfig获得的IP地址（之所以-f 10是因为上一步获取到的inet开头之前有8个空格）[root@Centos8 shells]# ifconfig eth0 | grep netmask        inet 172.17.9.131  netmask 255.255.192.0  broadcast 172.17.63.255[root@Centos8 shells]# ifconfig eth0 | grep netmask | cut -d &quot; &quot; -f 10172.17.9.131[root@Centos8 shells]# \n\nawk\n强大的文本分析工具，吧文件逐行读入，以空格为默认分隔符将每行切片，切开的部分再进行处理，awk本质上就是gawk\n\n[root@Centos8 shells]# which awk/usr/bin/awk[root@Centos8 shells]# ll /usr/bin | grep awklrwxrwxrwx. 1 root root          4 5月  11 2019 awk -&gt; gawk-rwxr-xr-x. 1 root root     698520 5月  11 2019 gawk[root@Centos8 shells]# \n\n\n基本用法\n\n\nawk [选项参数] ‘&#x2F;pattern1&#x2F;{action1} &#x2F;pattern2{action2}…’ filenaem\npattern：表示 awk在数据中查找的内容就是匹配模式\naction：在找到匹配内容时所执行的一系列命令\n\n\n选项参数\n-F 指定输入文件分隔符-v 赋值一个用户定义变量\n\n实例\n\n\n# 数据准备[root@Centos8 shells]# cp /etc/passwd passwd[root@Centos8 shells]# ll-rw-r--r-- 1 root root    1582 4月  12 11:08 passwd1[root@Centos8 shells]# # 1、搜索passwd 文件以root关键字开头的所有行，并输出改行的第1，7列搜索passwd 文件以root关键字开头的所有行，并输出改行的第1，7列[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; &#x27;/^root/ &#123;print $7&#125;&#x27;/bin/bash[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; &#x27;/^root/ &#123;print $1&#125;&#x27;root[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; &#x27;/^root/ &#123;print $1 $7&#125;&#x27;root/bin/bash[root@Centos8 shells]# # [root@Centos8 shells]# cat passwd | grep ^root | cut -d &quot;:&quot; -f 1,7root:/bin/bash[root@Centos8 shells]# # 2、搜索passwd 文件以root关键字开头的所有行，并输出该行的第1，7列搜索passwd 文件以root关键字开头的所有行，并输出改行的第1，7列，中间以，分割[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; &#x27;/^root/ &#123;print $1&quot;,&quot;$7&#125;&#x27;root,/bin/bash[root@Centos8 shells]# # 3、显示passwd的第1，7列，在开始加入&quot;user,shell&quot;，末尾 加入&quot;end of file!&quot;[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; &#x27;BEGIN&#123;print &quot;user,shell&quot;&#125;/^s/&#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;end of file!&quot;&#125;&#x27;user,shellsync,/bin/syncshutdown,/sbin/shutdownsystemd-coredump,/sbin/nologinsystemd-resolve,/sbin/nologinsetroubleshoot,/sbin/nologinsssd,/sbin/nologinsshd,/sbin/nologinend of file!# 在passwd中搜索以down结尾的文件，显示passwd的第1，7列，在开始加入&quot;Begin of File!&quot;，末尾 加入&quot;End of File!&quot;[root@Centos8 shells]# awk -F &quot;:&quot; &#x27;BEGIN&#123;print &quot;Begin of File!&quot;&#125;/down$/&#123;print $1&quot;-&quot;$7&#125; END&#123;print &quot;End of File!&quot;&#125;&#x27; passwdBegin of File!shutdown-/sbin/shutdownEnd of File![root@Centos8 shells]# # 在passwd的id中加1再输出[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; &#x27;&#123;print $3&#125;&#x27;0123[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; &#x27;&#123;print $3+1&#125;&#x27;1234[root@Centos8 shells]# cat passwd | awk -F &quot;:&quot; -v i=2 &#x27;&#123;print $3+i&#125;&#x27;2345[root@Centos8 shells]# \n\n\nawk内置变量\nFILENAME 文件名NR 已读的纪录数（行号）NF 浏览记录的域的个数（切割后，列的个数）\n\n\n[root@Centos8 shells]# awk -F &quot;:&quot; &#x27;&#123;print &quot;FileName: &quot;FILENAME &quot; 行号：&quot;NR &quot; 列数：&quot;NF&#125;&#x27; passwdFileName: passwd 行号：1 列数：7FileName: passwd 行号：2 列数：7FileName: passwd 行号：3 列数：7FileName: passwd 行号：4 列数：7FileName: passwd 行号：5 列数：7FileName: passwd 行号：6 列数：7FileName: passwd 行号：7 列数：7FileName: passwd 行号：8 列数：7FileName: passwd 行号：9 列数：7FileName: passwd 行号：10 列数：7FileName: passwd 行号：11 列数：7FileName: passwd 行号：12 列数：7FileName: passwd 行号：13 列数：7FileName: passwd 行号：14 列数：7FileName: passwd 行号：15 列数：7FileName: passwd 行号：16 列数：7FileName: passwd 行号：17 列数：7FileName: passwd 行号：18 列数：7FileName: passwd 行号：19 列数：7FileName: passwd 行号：20 列数：7FileName: passwd 行号：21 列数：7FileName: passwd 行号：22 列数：7FileName: passwd 行号：23 列数：7FileName: passwd 行号：24 列数：7FileName: passwd 行号：25 列数：7FileName: passwd 行号：26 列数：7FileName: passwd 行号：27 列数：7FileName: passwd 行号：28 列数：7FileName: passwd 行号：29 列数：7FileName: passwd 行号：30 列数：7[root@Centos8 shells]# # 查出所有的空行的行号[root@Centos8 shells]# ifconfig | awk &#x27;/^$/&#123;print &quot;行号：&quot; NR&#125;&#x27;行号：9行号：18[root@Centos8 shells]# [root@Centos8 shells]# ifconfig | grep -n ^$ | cut -f 1 -d &quot;:&quot;918[root@Centos8 shells]# ifconfig | grep -n ^$9:18:[root@Centos8 shells]# # 切割IP[root@Centos8 shells]# ifconfig eth0 | awk &#x27;/netmask/&#123;print $2&#125;&#x27;172.17.9.131[root@Centos8 shells]# \n\nShell案例归档文件\n实际生产中往往需要对重要数据进行归档备份需求：实现一个每天对指定目录归档备份的脚本输入一个目录名称，末尾不带&#x2F;，将目录下的所有文件按天归档，并将归档日期附加在归档文件名上，放在&#x2F;root&#x2F;archive下归档命令 tar后面加上-c表示归档，加上-z表示压缩，得到的文件名后缀为.tar.gz\n\n# 创建定时任务[root@Centos8 shells]# [root@Centos8 shells]# crontab -lno crontab for root[root@Centos8 shells]# crontab -e[root@Centos8 shells]# crontab -l55 18 * * * /root/shells/tar01.sh /root/shells[root@Centos8 shells]# [root@Centos8 shells]# cat tar01.sh #!/bin/bash# 判断输入的参数是否唯一，否则提示错误if [ $# -ne 1 ]then    echo &quot;参数不唯一！请输入一个归档目录名：&quot;    exitfi# 从参数中获取目录名称# -d 判断是否为目录if [ -d $1 ]then    echoelse    echo &quot;目录不存在！&quot;fi# 获取路径名DIR_NAME=$(basename $1)DIR_PATH=$(cd $(dirname $1); pwd)# 获取当前日期DATE=$(date +%y%m%d)# 定义生成的归档文件名称FILE=archive_$&#123;DIR_NAME&#125;_$DATE.tar.gzDEST=/root/backup/File/$FILE# 开始归档目录文件echo &#x27;开始归档。。。&#x27;echotar -czf $DEST $DIR_PATH/$DIR_NAMEif [ $? -eq 0 ]then    echo    echo &#x27;归档成功！&#x27;    echo &#x27;归档文件为：&#x27;$DEST    echoelse    echo &#x27;归档出现问题！！！&#x27;    echofiexit[root@Centos8 shells]# \n\n删除前一天的归档文件#!/bin/bash# After the backup is complete, check whether the number of files is correct if [ $# -ne 2 ]then\techo &quot;Args error! Please input 2 args: &quot;\texitfi# Check whether is a directoryif [ -d $1 ]then\techoelse\techo &quot;1st arg is not a directory!&quot;fiTOTAL=$(ls -l $1 |grep ^-|wc -l)# echo $TOTALif [ $TOTAL -ne $2 ];then\techo &quot;The number of backup file is error!&quot;\texitelse\techofiNOW_DATE=$(date +%y%m%d)BEF_DATE=$((NOW_DATE-1))find $1 -type f -name &quot;*$BEF_DATE*&quot; -delete\n\n正则匹配手机号[root@Centos8 shells]# echo &quot;13212345678&quot; | grep ^1[356789][0-9][0-9][0-9][0-9][0-9][0-9][0-7][0-9][0-9]$13212345678[root@Centos8 shells]# echo &quot;15212345678&quot; | grep ^1[356789][0-9][0-9][0-9][0-9][0-9][0-9][0-7][0-9][0-9]$ 15212345678[root@Centos8 shells]# echo &quot;11212345678&quot; | grep ^1[356789][0-9][0-9][0-9][0-9][0-9][0-9][0-7][0-9][0-9]$ [root@Centos8 shells]# [root@Centos8 shells]# echo &quot;15212345678&quot; | grep -E ^1[356789][0-9]&#123;9&#125;15212345678[root@Centos8 shells]# \n\n发送消息\n利用Linux的mesg和write向其他用户发送消息需求：实现向某个用户快速发送消息，输入用户名作为第一个参数，后面直接跟要发送的消息。脚本需要检测用户是否登录在系统中，是否打开消息功能，以及当前发送消息是否为空\n\n# 确认mesg是否开启[root@Centos8 ~]# mesg n[root@Centos8 ~]# mesg是 n# 关闭[root@Centos8 ~]# mesg n# + 打开 - 关闭[root@Centos8 ~]# who -Troot     - pts/0        2022-04-12 16:27 (45.116.153.139)admin    + pts/1        2022-04-12 16:58 (45.116.153.139)[root@Centos8 ~]# mesg是 n[root@Centos8 ~]# who -Troot     - pts/0        2022-04-12 16:27 (45.116.153.139)admin    + pts/1        2022-04-12 16:58 (45.116.153.139)# 打开[root@Centos8 ~]# mesg y[root@Centos8 ~]# who -Troot     + pts/0        2022-04-12 16:27 (45.116.153.139)admin    + pts/1        2022-04-12 16:58 (45.116.153.139)[root@Centos8 ~]# [root@Centos8 ~]# cat /root/shells/send_message.sh #!/bin/bash# mesg 发送消息# 查看用户是否登录LOGIN_USER=$(who | grep -i -m 1 $1 | awk &#x27;&#123;print $1&#125;&#x27;)if [ -z $LOGIN_USER ]then    echo &quot;$1 不在线！！！&quot;    echo &quot;脚本退出。。。&quot;    exitfi# 用户是否开启mesg功能IS_ALLOWED=$(who -T | grep -i -m 1 $1 | awk &#x27;&#123;print $2&#125;&#x27;)if [ &quot;+&quot; != $IS_ALLOWED ]then    echo &quot;$1 没有开启消息功能！！！&quot;    echo &quot;脚本退出。。。&quot;    exitfi# 确认是否有消息发送if [ -z $2 ]then    echo &quot;没有消息发送！！！&quot;    echo &quot;脚本退出！！&quot;    exitfi# 从参数中获取要发送的消息MESSAGE=$(echo $* | cut -d &quot; &quot; -f 2-)# 获取用户登录终端USER_TERMINAL=$(who | grep -i -m 1 $1 | awk &#x27;&#123;print $2&#125;&#x27;)# 写入要发送的消息echo $MESSAGE | write $LOGIN_USER $USER_TERMINALif [ $? -ne 0 ]then    echo &quot;发送成功！&quot;else    echo &quot;发送失败！&quot;fiexit[root@Centos8 ~]# \n\n计算程序消耗时间并自动输出日志到指定目录#!/bin/bashecho &quot;================================================================================&quot;echo &quot;================================== Strat Test ==================================&quot;echo &quot;================================================================================&quot;# 获取执行脚本文件名称长度len=$&#123;#string[0]&#125;# 截取子字符串（去除文件名的.sh后缀）name=$0exec_name=$&#123;name:0:len-3&#125;# 脚本执行结果存放文件名result_name=&quot;$exec_name-$1.log&quot;# 创建脚本执行结果存放文件touch &quot;./results/$&#123;result_name:2&#125;&quot;# 结果文件绝对路径abs_path=`pwd`&quot;/results&quot;# 开始测试start_ime=`date +%Y%m%d-%H:%M:%S`start_time_s=`date +%s`# docker search 镜像名 查找镜像docker search $1 | tee ./results/$&#123;result_name:2&#125;end_time=`date +%Y%m%d-%H:%M:%S`end_time_s=`date +%s`total_tiime=$[ $end_time_s - $start_time_s ]echo &quot;================================================================================&quot;echo &quot;===================================  End Test  =================================&quot;echo &quot;================================================================================&quot;echo &quot;$start_ime ---&gt; $end_time&quot;echo &quot;Total:$total_tiime seconds&quot;echo &quot;The results are saved in &quot; $&#123;abs_path&#125;$&#123;result_name:1&#125;echo &quot;================================================================================&quot;\n\n在程序运行前和运行后输出时间echo start: `date`for ((i=1;i&lt;=10;i++))do\techo &quot;The next number is $i&quot;\tpwd\tsleep 1\tls\tsleep 1\tpwd\techo $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)doneecho end: `date`\n\n为当前目录下的文件包括子文件夹更改权限#!/bin/bash# Specify the Author# Author:Sun# Specify the create date# Created:2022/11/13 10:37# Specify the script`s version# Release:1.0# Add Description# Scription Description:Change the permissions of current directory and subdirectories# -c或——changes    # 效果类似“-v”参数，但仅回报更改的部分，如果文件权限已经改变，显示其操作信息；# -f或--quiet或——silent # 操作过程中不显示任何错误信息；# -R或——recursive  # 递归处理，将指令目录下的所有文件及子目录一并处理；# -v或——verbose    # 显示命令运行时的详细执行过程；sudo chmod -Rc 777 $1/*\n\n从当前目录下复制文件并重命名#!/bin/bashsudo cp ./a-script-demo.sh ./test$1.sh\n\n从源文件夹复制到目录文件中#!/bin/bashcp -r $1 $2\n\n删除指定文件夹下同一后缀的所有文件#!/bin/bash# delete all file like *.out from /data/docker/vscode-server/C/Posixfind $1 -name/ &quot;*.out&quot; -delete\n\nShell 实战cron 定时任务配置# docker conainers stop and start0 1 * * * /data/shell/docker_stop.sh vscode-server0 7 * * * /data/shell/docker_start.sh vscode-server# Periodic delete file40 12,23 * * * /data/shell/tar_delete.sh /root/backup/File /data# Periodic backup file30 12,23 * * * /data/shell/tar_delete.sh /root/backup/File /data# delete all file like *.out from /data/docker/vscode-server/C/Posix30 6-23 * * * /data/shell/delete_suf.sh /data/docker/vscode-server# chmod 777 for /data0 */4 * * * /data/shell/chmod_permission.sh /data/docker# update auth to ubuntu0 3 * * * /data/shell/update_ubuntu_auth.sh# sync file from source dir to target dir25 6-23 * * * /data/shell/sync_files.sh /data/docker/vscode-server/Hexo/HexoGithub/source/_posts/ data/docker/vscode-server/Hexo/ldspdvsun.gitlab.io/source/_posts/# sync local and remote repo55 6-23 * * * /data/shell/sync_local_remote_repo.sh /data/docker/vscode-server/Hexo/HexoGithub/55 6-23 * * * /data/shell/sync_local_remote_repo.sh /data/docker/vscode-server/Hexo/ldspdvsun.gitlab.io/\n\n容器定时关闭与启动root@10-7-153-197:/data/shell# cat docker_stop.sh#!/bin/bashdocker stop $1root@10-7-153-197:/data/shell# cat docker_start.sh#!/bin/bashdocker start $1root@10-7-153-197:/data/shell#\n\n定时备份与删除文件root@10-7-153-197:/data/shell# cat tar_delete.sh#!/bin/bash# 设置备份目录backup_dir=$1# 获取当前日期和时间now=$(date +&quot;%Y-%m-%d_%H-%M-%S&quot;)# 备份文件if [ $(date +%H) -eq 23 ] &amp;&amp; [ $(date +%M) -eq 30 ]; then    tar -czvf &quot;$&#123;backup_dir&#125;/backup_$&#123;now&#125;.tar.gz&quot; $2elif [ $(date +%H) -eq 12 ] &amp;&amp; [ $(date +%M) -eq 30 ]; then    tar -czvf &quot;$&#123;backup_dir&#125;/backup_$&#123;now&#125;.tar.gz&quot; $2fi# 删除文件if [ $(date +%H) -eq 12 ] &amp;&amp; [ $(date +%M) -eq 40 ]; then    # 删除前一天23点的备份    last_day=$(date -d &quot;yesterday&quot; +&quot;%Y-%m-%d&quot;)    rm &quot;$&#123;backup_dir&#125;/backup_$&#123;last_day&#125;_23&quot;*&quot;.tar.gz&quot;elif [ $(date +%H) -eq 23 ] &amp;&amp; [ $(date +%M) -eq 40 ]; then    # 删除当天12点的备份    rm &quot;$&#123;backup_dir&#125;/backup_$&#123;now:0:10&#125;_12&quot;*&quot;.tar.gz&quot;firoot@10-7-153-197:/data/shell#\n\n删除指定后缀文件root@10-7-153-197:/data/shell# cat delete_suf.sh#!/bin/bash# delete all file like *.outsudo find $1/ -name &quot;*.out&quot; -deletesudo find $1/ -name &quot;*.o&quot; -deletesudo find $1/ -name &quot;*.log&quot; -deletesudo find &quot;$1&quot; -type d -name &quot;.pytest_cache&quot; -exec rm -rf &#123;&#125; +sudo find &quot;$1&quot; -type d -name &quot;__pycache__&quot; -exec rm -rf &#123;&#125; +sudo find &quot;$1&quot; -type d -name &quot;.mypy_cache&quot; -exec rm -rf &#123;&#125; +root@10-7-153-197:/data/shell#\n\n修改指定文件权限root@10-7-153-197:/data/shell# cat chmod_permission.sh#!/bin/bashsudo chmod -R 777 $1/*\n\n更改 Ubuntu 下 Nginx 认证权限root@10-7-153-197:/data/shell# cat update_ubuntu_auth.sh#!/bin/bash# Step 1: Get current date with a prefixcurrent_date=$(date +&#x27;%m%d&#x27;)prefix=&quot;Author@&quot;prefixed_date=&quot;$&#123;prefix&#125;$&#123;current_date&#125;&quot;# Step 2: Write the prefixed date to password.txtecho &quot;$prefixed_date&quot; &gt; password.txt# Step 3: Generate password and update .htpasswd fileif sudo htpasswd -b -c /etc/nginx/.htpasswd Author &quot;$prefixed_date&quot;; then    echo &quot;Password updated successfully.&quot;else    echo &quot;Password update failed.&quot;    exit 1fi# Step 4: Restart Nginxif sudo systemctl restart nginx; then    echo &quot;Nginx restarted successfully.&quot;else    echo &quot;Nginx restart failed.&quot;    exit 1firoot@10-7-153-197:/data/shell#\n\n同步本地文件夹与目标文件夹root@10-7-153-197:/data/shell# cat sync_files.sh#!/bin/bash# 检查参数数量if [ &quot;$#&quot; -ne 2 ]; then  echo &quot;Usage: ./sync_files.sh SOURCE_DIR TARGET_DIR&quot;  exit 1fi# 获取命令行参数SOURCE_DIR=&quot;$1&quot;TARGET_DIR=&quot;$2&quot;# 确保目标目录存在mkdir -p &quot;$TARGET_DIR&quot;# 查找第一个目录下的所有文件find &quot;$SOURCE_DIR&quot; -type f | while read -r filedo  # 获取相对于 $SOURCE_DIR 的文件路径  relative_path=$&#123;file#$SOURCE_DIR&#125;  # 去掉路径前的&#x27;/&#x27;符号  relative_path=$&#123;relative_path#/&#125;  # 定义在第二个目录中的文件路径  target_file=&quot;$TARGET_DIR/$relative_path&quot;  # 确保目标文件所在的目录存在  mkdir -p &quot;$(dirname &quot;$target_file&quot;)&quot;  # 检查文件在第二个目录中是否存在  if [ -f &quot;$target_file&quot; ]; then    # 比较文件内容    if ! diff -q &quot;$file&quot; &quot;$target_file&quot; &gt; /dev/null 2&gt;&amp;1; then      echo &quot;文件不一致，复制: $file -&gt; $target_file&quot;      cp &quot;$file&quot; &quot;$target_file&quot;    else      echo &quot;文件一致: $file -&gt; $target_file&quot;    fi  else    echo &quot;目标不存在，复制新文件: $file -&gt; $target_file&quot;    cp &quot;$file&quot; &quot;$target_file&quot;  fidoneroot@10-7-153-197:/data/shell#\n\n同步本地与远程仓库root@10-7-153-197:/data/shell# cat sync_local_remote_repo.sh#!/bin/bash# 检查参数数量if [ &quot;$#&quot; -ne 1 ]; then  echo &quot;Usage: $0 REPO_DIR&quot;  exit 1fi# 获取命令行参数REPO_DIR=&quot;$1&quot;# 检查指定目录是否是Git仓库if [ ! -d &quot;$REPO_DIR/.git&quot; ]; then  echo &quot;The specified directory is not a Git repository.&quot;  exit 1fi# 进入指定的Git仓库目录cd &quot;$REPO_DIR&quot; || exit# 检查工作目录中的变化changes=$(git status --porcelain)# 如果没有变化，退出if [ -z &quot;$changes&quot; ]; then  echo &quot;No changes detected.&quot;  exit 0fi# 获取变化的文件名changed_files=$(echo &quot;$changes&quot; | awk &#x27;&#123;print $2&#125;&#x27;)# 输出变化的文件echo &quot;Changes detected in the following files:&quot;echo &quot;$changed_files&quot;# 添加所有变化git add .# 提交变化，以变化的文件名作为提交信息commit_message=$(echo &quot;$changed_files&quot; | tr &#x27;\\n&#x27; &#x27; &#x27;)git commit -m &quot;$commit_message&quot;# 推送到远程仓库git push origin mainecho &quot;Changes committed and pushed to the repository.&quot;root@10-7-153-197:/data/shell#\n\n标准化编译 C 项目及 C 文件root@10-7-153-197:/data/shell# cat sunmy_c_build.sh#!/bin/bash# --- 配置变量 ---CC=&quot;gcc&quot;CFLAGS=&quot;-Wall -O2&quot;LDFLAGS=&quot;-lpthread -lrt -lgcc&quot;SYMBOLS=70  # 分隔线符号数量OBJS_DIR_NAME=&quot;objs&quot;  # 统一对象文件目录名# --- 函数定义 ---help() &#123;    echo -n $(seq 1 $SYMBOLS | xargs -I &#123;&#125; printf &#x27;=&#x27;)    echo -e &quot;\\n\\033[1m\\t\\t\\t  C 项目构建脚本帮助\\033[0m&quot;    echo -e &quot;用法: \\033[35m$0 [命令] [参数]\\033[0m 或    \\033[35m  $0 [项目目录] [命令]\\033[0m&quot;    echo -e &quot;\\033[33m支持设置环境变量 GCC 指定编译器路径 (如: GCC=/usr/bin/gcc)\\033[0m&quot;    echo -n $(seq 1 $SYMBOLS | xargs -I &#123;&#125; printf &#x27;-&#x27;)    echo -e &quot;\\n\\033[32m命令列表:\\033[0m&quot;    echo &quot;  [需要项目目录的命令]&quot;    echo &quot;    all         - 编译项目并生成可执行文件到项目目录/all_results&quot;    echo &quot;    clean       - 清理项目构建产物 (对象文件/可执行文件)&quot;    echo &quot;    debug       - 以调试模式编译 (添加 -DDEBUG 标志)&quot;    echo &quot;    run         - 编译并运行项目&quot;    echo &quot;    valgrind    - 使用 Valgrind 运行项目&quot;    echo &quot;    install     - 安装可执行文件到 /usr/local/bin&quot;    echo &quot;    uninstall   - 从 /usr/local/bin 卸载&quot;    echo &quot;  [独立命令]&quot;    echo &quot;    s  &lt;源文件&gt;  - 编译并运行单个 C 文件 (示例: $0 s test.c)&quot;    echo &quot;    sv &lt;源文件&gt;  - 用 Valgrind 调试单个 C 文件&quot;    echo &quot;    h            - 显示此帮助信息&quot;    echo -n $(seq 1 $SYMBOLS | xargs -I &#123;&#125; printf &#x27;=&#x27;)    echo -e &quot;\\n\\033[33m示例:\\033[0m&quot;    echo &quot;  # 编译运行项目:&quot;    echo &quot;  $0 /path/to/project run&quot;    echo &quot;  # 调试单个文件:&quot;    echo &quot;  $0 sv test.c&quot;    echo -n $(seq 1 $SYMBOLS | xargs -I &#123;&#125; printf &#x27;=&#x27;)    echo    exit 0&#125;setup_project() &#123;    PROJECT_DIR=&quot;$1&quot;    if [ ! -d &quot;$PROJECT_DIR&quot; ]; then        echo -e &quot;\\033[31m错误: 项目目录不存在 &#x27;$PROJECT_DIR&#x27;\\033[0m&quot;        exit 1    fi    # 初始化项目相关路径    TARGET=&quot;$PROJECT_DIR/all_results&quot;    DIR_SRC=&quot;$PROJECT_DIR/src&quot;    DIR_INCLUDE=&quot;$PROJECT_DIR/include&quot;    OBJS_DIR=&quot;$PROJECT_DIR/$OBJS_DIR_NAME&quot;    # 搜索源文件 (最多搜索4层子目录)    if [ -d &quot;$DIR_SRC&quot; ]; then        DIRS=$(find &quot;$DIR_SRC&quot; -maxdepth 4 -type d)        SRCS_C=$(for dir in $DIRS; do find &quot;$dir&quot; -maxdepth 1 -name &quot;*.c&quot;; done)        OBJS_C=$(echo &quot;$SRCS_C&quot; | sed &quot;s|$DIR_SRC/|$OBJS_DIR/|g&quot; | sed &quot;s|.c|.o|g&quot;)    else        echo -e &quot;\\033[33m警告: 项目目录中未找到 src 文件夹\\033[0m&quot;    fi&#125;compile_project() &#123;    echo -e &quot;\\033[36m[编译] 生成对象文件到 $OBJS_DIR\\033[0m&quot;    mkdir -p &quot;$OBJS_DIR&quot;    for src in $SRCS_C; do        obj=&quot;$OBJS_DIR/$(basename $src .c).o&quot;        echo &quot;编译: $src → $obj&quot;        $CC $CFLAGS -I &quot;$DIR_INCLUDE&quot; -c &quot;$src&quot; -o &quot;$obj&quot; || exit 1    done&#125;link_project() &#123;    echo -e &quot;\\033[36m[链接] 生成可执行文件: $TARGET\\033[0m&quot;    $CC $CFLAGS -o &quot;$TARGET&quot; $OBJS_C $LDFLAGS || exit 1    echo -e &quot;\\033[32m构建成功！使用 &#x27;file $TARGET&#x27; 查看详细信息\\033[0m&quot;&#125;# --- 项目相关命令 ---cmd_all() &#123;    compile_project    link_project&#125;cmd_clean() &#123;    echo -e &quot;\\033[31m清理: 删除 $OBJS_DIR 和 $TARGET\\033[0m&quot;    rm -rf &quot;$OBJS_DIR&quot; &quot;$TARGET&quot;&#125;cmd_debug() &#123;    CFLAGS=&quot;$CFLAGS -DDEBUG -g&quot;    cmd_all&#125;cmd_run() &#123;    cmd_all    echo -e &quot;\\n\\033[36m[运行] $TARGET\\033[0m&quot;    &quot;$TARGET&quot;&#125;cmd_valgrind() &#123;    cmd_all    echo -e &quot;\\n\\033[36m[Valgrind] 检测内存泄漏\\033[0m&quot;    valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes &quot;$TARGET&quot;&#125;cmd_install() &#123;    cmd_all    local install_path=&quot;/usr/local/bin/$(basename $TARGET)&quot;    echo -e &quot;\\033[36m[安装] 复制到 $install_path\\033[0m&quot;    sudo cp &quot;$TARGET&quot; &quot;$install_path&quot;&#125;cmd_uninstall() &#123;    local install_path=&quot;/usr/local/bin/$(basename $TARGET)&quot;    echo -e &quot;\\033[31m[卸载] 移除 $install_path\\033[0m&quot;    sudo rm -f &quot;$install_path&quot;&#125;# --- 独立命令 ---cmd_single() &#123;    local src=&quot;$1&quot;    if [ -z &quot;$src&quot; ]; then        echo -e &quot;\\033[31m错误: 请指定源文件 (示例: $0 s test.c)\\033[0m&quot;        exit 1    fi    if [ ! -f &quot;$src&quot; ]; then        echo -e &quot;\\033[31m错误: 文件不存在 &#x27;$src&#x27;\\033[0m&quot;        exit 1    fi    local out=&quot;$(basename $src .c).out&quot;    echo -e &quot;\\033[36m[编译] $src → $out\\033[0m&quot;    $CC $CFLAGS &quot;$src&quot; -o &quot;$out&quot; || exit 1    echo -e &quot;\\033[32m[运行] 执行 $out\\033[0m&quot;    ./&quot;$out&quot;    rm -f &quot;$out&quot;&#125;cmd_valgrind_single() &#123;    local src=&quot;$1&quot;    if [ -z &quot;$src&quot; ]; then        echo -e &quot;\\033[31m错误: 请指定源文件 (示例: $0 sv test.c)\\033[0m&quot;        exit 1    fi    local out=&quot;$(basename $src .c).out&quot;    echo -e &quot;\\033[36m[编译] $src → $out\\033[0m&quot;    $CC $CFLAGS &quot;$src&quot; -o &quot;$out&quot; || exit 1    echo -e &quot;\\033[32m[Valgrind] 检测内存泄漏\\033[0m&quot;    valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./&quot;$out&quot;    rm -f &quot;$out&quot;&#125;# --- 主逻辑 ---main() &#123;    # 处理帮助命令    if [ &quot;$1&quot; = &quot;h&quot; ] || [ &quot;$1&quot; = &quot;-h&quot; ] || [ &quot;$1&quot; = &quot;--help&quot; ]; then        help    fi    # 解析命令模式    case &quot;$1&quot; in        s|sv|h)  # 独立命令            command=&quot;$1&quot;            shift            case &quot;$command&quot; in                s)  cmd_single &quot;$@&quot; ;;                sv) cmd_valgrind_single &quot;$@&quot; ;;                h)  help ;;            esac            ;;        *)  # 项目命令            if [ $# -lt 2 ]; then                echo -e &quot;\\033[31m错误: 需要项目目录和命令 (使用 -h 查看帮助)\\033[0m&quot;                exit 1            fi            PROJECT_DIR=&quot;$1&quot;            command=&quot;$2&quot;            shift 2            setup_project &quot;$PROJECT_DIR&quot;            case &quot;$command&quot; in                all)       cmd_all ;;                clean)     cmd_clean ;;                debug)     cmd_debug ;;                run)       cmd_run ;;                valgrind)  cmd_valgrind ;;                install)   cmd_install ;;                uninstall) cmd_uninstall ;;                *) echo -e &quot;\\033[31m错误: 未知命令 &#x27;$command&#x27;\\033[0m&quot;; help ;;            esac            ;;    esac&#125;# --- 执行主函数 ---main &quot;$@&quot;\n\n采集Linux系统基本信息#!/bin/bash# 系统信息收集脚本 v1.0# 功能：同时生成详细版和精简版系统信息报告# 检查root权限check_root()&#123;    [ &quot;$EUID&quot; -ne 0 ] &amp;&amp; &#123;         echo -e &quot;\\033[31m请使用root或sudo运行此脚本\\033[0m&quot;        exit 1    &#125;&#125;# 全局变量LINE1=&#x27;================================================================================&#x27;LINE2=&#x27;--------------------------------------------------------------------------------&#x27;BASE_NAME=&quot;SystemInfo-$(date +&quot;%Y%m%d_%H%M%S&quot;)-$(hostname -s)&quot;FULL_FILE=&quot;$&#123;BASE_NAME&#125;-full.txt&quot;SIMPLE_FILE=&quot;$&#123;BASE_NAME&#125;-simple.txt&quot;PACKAGES_FILE=&quot;$&#123;BASE_NAME&#125;-packages.txt&quot;BLUE=&#x27;\\033[34m&#x27;ORANGE=&#x27;\\033[33m&#x27;GREEN=&#x27;\\033[32m&#x27;RESET=&#x27;\\033[0m&#x27;# 初始化输出文件init_files()&#123;    # 创建空文件    &gt; &quot;$FULL_FILE&quot;    &gt; &quot;$SIMPLE_FILE&quot;    &gt; &quot;$PACKAGES_FILE&quot;      # 写入文件头    for file in &quot;$FULL_FILE&quot; &quot;$SIMPLE_FILE&quot;; do        echo -e &quot;$LINE1&quot; &gt;&gt; &quot;$file&quot;        echo -e &quot;$LINE2&quot; &gt;&gt; &quot;$file&quot;        if [[ &quot;$file&quot; == &quot;$FULL_FILE&quot; ]]; then            echo -e &quot;\\t\\t\\t\\t\\t\\t系统信息收集报告 - 完整版 By Sunmy&quot; &gt;&gt; &quot;$file&quot;        else            echo -e &quot;\\t\\t\\t\\t\\t\\t系统信息收集报告 - 精简版 By Sunmy&quot; &gt;&gt; &quot;$file&quot;        fi        echo -e &quot;\\t\\t\\t\\t\\t\\t版本: v1.0&quot; &gt;&gt; &quot;$file&quot;        echo -e &quot;\\t\\t\\t\\t\\t\\t生成时间: $(date &quot;+%Y-%m-%d %H:%M:%S&quot;)&quot; &gt;&gt; &quot;$file&quot;        echo -e &quot;\\t\\t\\t\\t\\t\\t主机名: $(hostname)&quot; &gt;&gt; &quot;$file&quot;        echo -e &quot;$LINE2&quot; &gt;&gt; &quot;$file&quot;        echo -e &quot;$LINE1&quot; &gt;&gt; &quot;$file&quot;    done&#125;# 输出控制函数output()&#123;    local type=$1    shift    local content=&quot;$*&quot;      case &quot;$type&quot; in        &quot;full&quot;)             echo -e &quot;$content&quot; &gt;&gt; &quot;$FULL_FILE&quot;            ;;        &quot;simple&quot;)             echo -e &quot;$content&quot; &gt;&gt; &quot;$SIMPLE_FILE&quot;            ;;        &quot;package&quot;)            echo -e &quot;$content&quot; &gt;&gt; &quot;$PACKAGES_FILE&quot;            ;;        &quot;both&quot;)             echo -e &quot;$content&quot; | tee -a &quot;$FULL_FILE&quot; &gt;/dev/null            echo -e &quot;$content&quot; &gt;&gt; &quot;$SIMPLE_FILE&quot;            ;;        &quot;display&quot;)             echo -e &quot;$content&quot;            ;;    esac&#125;#----------------------------------------------# 信息收集模块#----------------------------------------------show_os_full()&#123;    # 完整版    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$LINE1&quot;    output &quot;full&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[操作系统信息]&quot;    output &quot;full&quot; &quot;$LINE2&quot;      output &quot;full&quot; &quot;\\n# 内核版本:&quot;    output &quot;full&quot; &quot;$ uname -a&quot;    uname -a &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$ cat /proc/version&quot;    cat /proc/version &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 内核参数:&quot;    output &quot;full&quot; &quot;$ cat /proc/cmdline&quot;    cat /proc/cmdline &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 系统运行时间:&quot;    output &quot;full&quot; &quot;$ uptime&quot;    uptime &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;\\n# 查看发行版详细信息:&quot;    output &#x27;$ cat /etc/os-release&#x27;    cat /etc/os-release &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &#x27;$ lsb_release -a&#x27;    lsb_release -a &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;$LINE1&quot;&#125;show_os_simple()&#123;    # 精简版    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$LINE1&quot;    output &quot;simple&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[操作系统信息]&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;\\n# 内核版本:&quot;    output &quot;simple&quot; &quot;$ uname -srmo&quot;    uname -srmo &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$ cat /proc/version&quot;    cat /proc/version &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;\\n# 内核参数:&quot;    output &quot;simple&quot; &quot;$ cat /proc/cmdline&quot;    cat /proc/cmdline &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;\\n# 系统运行时间:&quot;    output &quot;simple&quot; &quot;$ uptime -p&quot;    uptime -p &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;\\n# 查看发行版详细信息:&quot;    output &quot;simple&quot; &#x27;$ cat /etc/os-release&#x27;    cat /etc/os-release &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &#x27;$ lsb_release -a&#x27;    lsb_release -a &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;$LINE1&quot;&#125;show_cpu_full()&#123;    # 完整版    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$LINE1&quot;    output &quot;full&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[CPU信息]&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;\\n# lscpu输出:&quot;    output &quot;full&quot; &quot;$ lscpu&quot;    lscpu &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# CPU详细信息:&quot;    output &quot;full&quot; &quot;$ cat /proc/cpuinfo&quot;    cat /proc/cpuinfo &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;$LINE1&quot;&#125;show_cpu_simple()&#123;    # 精简版    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$LINE1&quot;    output &quot;simple&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[CPU信息]&quot;    output &quot;simple&quot; &quot;$LINE2&quot;      output &quot;simple&quot; &quot;\\n# CPU型号:&quot;    output &quot;simple&quot; &quot;$ cat /proc/cpuinfo | grep &#x27;model name&#x27; | uniq&quot;    cat /proc/cpuinfo | grep &#x27;model name&#x27; | uniq &gt;&gt; &quot;$SIMPLE_FILE&quot;      output &quot;simple&quot; &quot;\\n# 物理CPU数量:&quot;    output &quot;simple&quot; &quot;$ cat /proc/cpuinfo | grep &#x27;physical id&#x27; | sort | uniq | wc -l&quot;    cat /proc/cpuinfo | grep &#x27;physical id&#x27; | sort | uniq | wc -l &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;\\n# CPU核心数:&quot;    output &quot;simple&quot; &quot;$ cat /proc/cpuinfo | grep &#x27;cpu cores&#x27; | uniq&quot;    cat /proc/cpuinfo | grep &#x27;cpu cores&#x27; | uniq &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;$LINE1&quot;&#125;show_memory_full()&#123;    # 完整版    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$LINE1&quot;    output &quot;full&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[内存信息]&quot;    output &quot;full&quot; &quot;$LINE2&quot;      output &quot;full&quot; &quot;\\n# 完整内存信息:&quot;    output &quot;full&quot; &quot;$ cat /proc/meminfo&quot;    cat /proc/meminfo &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$ free -h&quot;    free -h &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;$LINE1&quot;&#125;show_memory_simple()&#123;    # 精简版    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$LINE1&quot;    output &quot;simple&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[内存信息]&quot;    output &quot;simple&quot; &quot;$LINE2&quot;      output &quot;simple&quot; &quot;\\n# 主要内存信息:&quot;    output &quot;simple&quot; &quot;$ cat /proc/meminfo | grep -E &#x27;MemTotal|MemFree|MemAvailable|Buffers|Cached&#x27;&quot;    cat /proc/meminfo | grep -E &#x27;MemTotal|MemFree|MemAvailable|Buffers|Cached&#x27; &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$ free -h&quot;    free -h &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;$LINE1&quot;&#125;show_disk_full()&#123;    # 完整版    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$LINE1&quot;    output &quot;full&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[磁盘信息]&quot;    output &quot;full&quot; &quot;$LINE2&quot;      output &quot;full&quot; &quot;\\n# 分区表信息:&quot;    output &quot;full&quot; &quot;$ fdisk -l&quot;    fdisk -l &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 块设备信息:&quot;    output &quot;full&quot; &quot;$ lsblk&quot;    lsblk &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 磁盘使用情况:&quot;    output &quot;full&quot; &quot;$ df -hT&quot;    df -hT &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;$LINE1&quot;&#125;show_disk_simple()&#123;    # 精简版    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$LINE1&quot;    output &quot;simple&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[磁盘信息]&quot;    output &quot;simple&quot; &quot;$LINE2&quot;      output &quot;simple&quot; &quot;\\n# 分区表信息:&quot;    output &quot;simple&quot; &quot;$ fdisk -l 2&gt;/dev/null&quot;    fdisk -l 2&gt;/dev/null &gt;&gt; &quot;$SIMPLE_FILE&quot;      output &quot;simple&quot; &quot;\\n# 块设备信息:&quot;    output &quot;simple&quot; &quot;$ lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL,UUID&quot;    lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL,UUID &gt;&gt; &quot;$SIMPLE_FILE&quot;      output &quot;simple&quot; &quot;\\n# 磁盘使用情况:&quot;    output &quot;simple&quot; &quot;$ df -hT&quot;    df -hT &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;$LINE1&quot;&#125;show_network_full()&#123;    # 完整版    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$LINE1&quot;    output &quot;full&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[网络信息]&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;\\n# 主机名解析:&quot;    output &quot;full&quot; &quot;$ cat /etc/hostname&quot;    cat /etc/hostname &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;\\n# 查看网络信息:&quot;    output &quot;full&quot; &quot;$ ifconfig -a&quot;    ifconfig -a &gt;&gt; &quot;$FULL_FILE&quot; 2&gt;/dev/null    output &quot;full&quot; &quot;\\n# IP地址信息:&quot;    output &quot;full&quot; &quot;$ ip addr show&quot;    ip addr show &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 路由表信息:&quot;    output &quot;full&quot; &quot;$ ip route show&quot;    ip route show &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 路由接口信息:&quot;    output &quot;full&quot; &quot;$ ip -s link&quot;    ip -s link &gt;&gt; &quot;$FULL_FILE&quot;    ip route show &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 网络连接信息:&quot;    output &quot;full&quot; &quot;$ ss -tulnp&quot;    ss -tulnp &gt;&gt; &quot;$FULL_FILE&quot;      output &quot;full&quot; &quot;\\n# 防火墙状态:&quot;    if command -v ufw &amp;&gt;/dev/null; then        output &quot;full&quot; &quot;$ ufw status verbose&quot;        ufw status verbose &gt;&gt; &quot;$FULL_FILE&quot;    elif command -v firewall-cmd &amp;&gt;/dev/null; then        output &quot;full&quot; &quot;$ firewall-cmd --state&quot;        firewall-cmd --state &gt;&gt; &quot;$FULL_FILE&quot;    else        output &quot;full&quot; &quot;未检测到常用防火墙工具&quot;    fi    output &quot;full&quot; &quot;\\n# DNS解析信息:&quot;    output &quot;full&quot; &quot;$ cat /etc/resolv.conf&quot;    cat /etc/resolv.conf &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;$LINE1&quot;&#125;show_network_simple()&#123;    # 精简版    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$LINE1&quot;    output &quot;simple&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[网络信息]&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;\\n# 网络接口简况:&quot;    output &quot;simple&quot; &quot;$ ip -br addr&quot;    ip -br addr &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;$LINE1&quot;&#125;show_packages_both()&#123;    output &quot;both&quot; &quot;\\n[软件包信息]&quot;    output &quot;both&quot; &quot;$LINE1&quot;      if command -v dpkg &amp;&gt;/dev/null; then        # Debian/Ubuntu系统        output &quot;both&quot; &quot;\\n# 已安装软件包数:&quot;        dpkg -l | grep &#x27;^ii&#x27; | wc -l | tee -a &quot;$FULL_FILE&quot; &gt;&gt; &quot;$SIMPLE_FILE&quot;              output &quot;package&quot; &quot;# Debian软件包列表&quot;        output &quot;package&quot; &quot;Package\\tVersion\\tArchitecture&quot;        dpkg-query -W -f=&#x27;$&#123;Package&#125;\\t$&#123;Version&#125;\\t$&#123;Architecture&#125;\\n&#x27; | sort &gt;&gt; &quot;$PACKAGES_FILE&quot;          elif command -v rpm &amp;&gt;/dev/null; then        # RHEL/CentOS系统        output &quot;both&quot; &quot;\\n# 已安装软件包数:&quot;        rpm -qa | wc -l | tee -a &quot;$FULL_FILE&quot; &gt;&gt; &quot;$SIMPLE_FILE&quot;              output &quot;package&quot; &quot;# RPM软件包列表&quot;        output &quot;package&quot; &quot;Name\\tVersion\\tRelease\\tArch&quot;        rpm -qa --queryformat=&#x27;%&#123;NAME&#125;\\t%&#123;VERSION&#125;\\t%&#123;RELEASE&#125;\\t%&#123;ARCH&#125;\\n&#x27; | sort &gt;&gt; &quot;$PACKAGES_FILE&quot;    else        output &quot;both&quot; &quot;无法确定包管理器类型&quot;    fi      output &quot;display&quot; &quot;\\n软件包列表已保存到: $PACKAGES_FILE&quot;&#125;show_security_full()&#123;    # 完整版    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;&quot;    output &quot;full&quot; &quot;$LINE1&quot;    output &quot;full&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[安全信息]&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;\\n# 登录用户历史:&quot;    output &quot;full&quot; &quot;$ last -n 20&quot;    last -n 20 &gt;&gt; &quot;$FULL_FILE&quot;    output &quot;full&quot; &quot;$LINE2&quot;    output &quot;full&quot; &quot;$LINE1&quot;&#125;show_security_simple()&#123;      # 精简版    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;&quot;    output &quot;simple&quot; &quot;$LINE1&quot;    output &quot;simple&quot; &quot;\\t\\t\\t\\t\\t\\t\\t\\t[安全信息]&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;\\n# 当前登录用户:&quot;    output &quot;simple&quot; &quot;$ who&quot;    who &gt;&gt; &quot;$SIMPLE_FILE&quot;    output &quot;simple&quot; &quot;$LINE2&quot;    output &quot;simple&quot; &quot;$LINE1&quot;&#125;#----------------------------------------------# 主执行流程#----------------------------------------------main()&#123;    clear    check_root    init_files      # 显示开始信息    output &quot;display&quot; &quot;$BLUE正在收集系统信息...$RESET&quot;    output &quot;display&quot; &quot;完整报告将保存到:$ORANGE $FULL_FILE $RESET&quot;    output &quot;display&quot; &quot;精简报告将保存到:$ORANGE $SIMPLE_FILE $RESET&quot;      # 执行信息收集    show_os_full    show_cpu_full    show_memory_full    show_disk_full    show_network_full    show_security_full    show_os_simple    show_cpu_simple    show_memory_simple    show_disk_simple    show_network_simple    show_security_simple      show_packages_both      # 设置文件权限    sudo chmod 777 &quot;$FULL_FILE&quot; &quot;$SIMPLE_FILE&quot; &quot;$PACKAGES_FILE&quot;      # 显示完成信息    output &quot;display&quot; &quot;\\n$GREEN系统信息收集完成！$RESET&quot;    output &quot;display&quot; &quot;文件大小统计:&quot;    du -h &quot;$FULL_FILE&quot; &quot;$SIMPLE_FILE&quot; &quot;$PACKAGES_FILE&quot; | tee -a &quot;$FULL_FILE&quot;&#125;# 执行主函数main\n\nLinux常用命令之文件处理文件管理\n查看文件信息：ls\n切换工作目录：cd\n显示当前目录路径：pwd\n创建新目录：mkdir\n创建空文件：touch\n删除文件或目录：rm\n拷贝：cp\n移动&#x2F;重命名：mv\n建立文件链接：ln\n查找文件：find\n查找文件内容：cat\\less\\more\\head\\tail\n打包压缩：tar\n\n文本处理\n文本编辑：vi&#x2F;vim\n屏幕输出：echo\n输出重定向：&gt;\n\n修改文件权限\nr；读权限read-4\nw：写权限write-2\nx：执行权限exeute-1\n-：无权限-0\nchmod 777 文件名\n\n查看网卡信息\nifconfig\nip addr\n\n测试远程主机的流动性\nping\n-c：ping的次数\n-i：每次ping的时间间隔\n\n\n\n打印linux网络网络的状态信息\nnetstat\n-t：列出所有tcp\n-n：以数字形式显示地址和端口\n-p：显示进程的pid和名字\n\n\n\n","categories":["Linux系统基础"],"tags":["Shell"]},{"title":"Nmon","url":"/cmchtge8v000pnegbhlcshb78/","content":"\n下载地址\nhttps://nmon.sourceforge.net/pmwiki.php?n=Site.Download\n\n上传并解压[admin@Centos8 nmon]$ ll | grep nmon16m总用量 7056-rw-rw-r-- 1 admin admin 7222481 2月  24 2020 nmon16m_helpsystems.tar.gz[admin@Centos8 nmon]$[admin@Centos8 nmon]$ tar -zxvf nmon16m_helpsystems.tar.gz…-rwxr----- 1 admin admin  350222 2月  20 2020 nmon_x86_64_centos6-rwxr----- 1 admin admin  404896 2月  20 2020 nmon_x86_64_centos7-rwxr----- 1 admin admin  472080 2月  20 2020 nmon_x86_64_centos8…[admin@Centos8 nmon][admin@Centos8 nmon]$ ./nmon_x86_64_centos8 -f -s 5 -c 12 -m ./report/\n\n查看脚本运行结果[admin@Centos8 nmon]$ cd report/[admin@Centos8 report]$ ll-rw-rw-r-- 1 admin admin 31408 9月  26 10:07 Centos8_220926_1006.nmon\n\n数据采集完关闭进程[admin@Centos8 report]$ ps -ef | grep nmonadmin      12378   11982  0 10:11 pts/2    00:00:00 grep --color=auto nmon[admin@Centos8 report]$ kill -9 12378[admin@Centos8 report]$\n","categories":["Linux开源工具"],"tags":["Nmon"]},{"title":"UnixBench","url":"/cmchtge8v000rnegb2a8sd78d/","content":"Unixbench安装[admin@Centos8 bench_scripts]$ git clone https://github.com/kdlucas/byte-unixbench.git[admin@Centos8 bench_scripts]$ lldrwxrwxr-x  4 admin admin     89 9月  28 22:45 byte-unixbench[admin@Centos8 bench_scripts]$ cd byte-unixbench/[admin@Centos8 byte-unixbench]$ ll总用量 28-rw-rw-r-- 1 admin admin 18092 9月  28 22:45 LICENSE.txt-rw-rw-r-- 1 admin admin  6331 9月  28 22:45 README.mddrwxrwxr-x 5 admin admin   152 9月  28 22:45 UnixBench[admin@Centos8 byte-unixbench]$ cd UnixBench/[admin@Centos8 UnixBench]$ ll总用量 124-rw-rw-r-- 1 admin admin 10794 9月  28 22:45 Makefiledrwxrwxr-x 2 admin admin    91 9月  28 22:45 pgms-rw-rw-r-- 1 admin admin 17753 9月  28 22:45 README-rwxrwxr-x 1 admin admin 63802 9月  28 22:45 Rundrwxrwxr-x 2 admin admin   291 9月  28 22:45 srcdrwxrwxr-x 2 admin admin    69 9月  28 22:45 testdir-rw-rw-r-- 1 admin admin 18259 9月  28 22:45 USAGE-rw-rw-r-- 1 admin admin  4622 9月  28 22:45 WRITING_TESTS# 最新版本UnixBench5.1.3，包含system和graphic测试，如果你需要测试graphic，则需要修改Makefile,不要注释掉”GRAPHIC_TESTS = defined”，同时需要系统提供x11perf命令gl_glibs库，# 使用下列单元格中的命令安装图形库[admin@Centos8 UnixBench]$ vim Makefile [admin@Centos8 UnixBench]$ make\n\n\nmake过程中可能会提示如下错误，可通过以下命令完成更正\n\n# 错误1make: gcc：命令未找到make: *** [pgms/arithoh] 错误 127# 错误2gcc -o ./pgms/ubgears -DTIME -Wall -pedantic -ansi -O2 -fomit-frame-pointer -fforce-addr -ffast-math -Wall ./src/ubgears.c -lGL -lXext -lX11 -lm./src/ubgears.c:51:19: 致命错误：GL/gl.h：没有那个文件或目录#include &lt;GL/gl.h&gt; # 错误3Run: &quot;2D graphics: rectangles&quot;: Can&#x27;t exec &quot;x11perf&quot;: No such file or directory at /tmp/soft/Unixbench/byte-unixbench-5.1.3/UnixBench/pgms/gfx-x11 line 381.Run: exec() failed (returned); aborting\n\n\n解决方法\n\n# 1[root@SqaServer UnixBench]# yum install -y gcc# 2[root@SqaServer UnixBench]# yum install -y SDL-devel mesa-libGL-devel# 3[root@SqaServer UnixBench]# yum install -y x11perf\n\nsystem测试[admin@Centos8 UnixBench]$ ./Runmake allmake[1]: Entering directory &#x27;/opt/lx/bench_scripts/byte-unixbench/UnixBench&#x27;make distrmake[2]: Entering directory &#x27;/opt/lx/bench_scripts/byte-unixbench/UnixBench&#x27;Checking distribution of files./pgms  exists./src  exists./testdir  exists./tmp  exists./results  existsmake[2]: Leaving directory &#x27;/opt/lx/bench_scripts/byte-unixbench/UnixBench&#x27;make programsmake[2]: Entering directory &#x27;/opt/lx/bench_scripts/byte-unixbench/UnixBench&#x27;make[2]: Nothing to be done for &#x27;programs&#x27;.make[2]: Leaving directory &#x27;/opt/lx/bench_scripts/byte-unixbench/UnixBench&#x27;make[1]: Leaving directory &#x27;/opt/lx/bench_scripts/byte-unixbench/UnixBench&#x27;sh: 3dinfo: command not found   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark   Multi-CPU version                  Version 5 revisions by Ian Smith,                                      Sunnyvale, CA, USA   January 13, 2011                   johantheghost at yahoo period com------------------------------------------------------------------------------   Use directories for:      * File I/O tests (named fs***) = /opt/lx/bench_scripts/byte-unixbench/UnixBench/tmp      * Results                      = /opt/lx/bench_scripts/byte-unixbench/UnixBench/results------------------------------------------------------------------------------Wide character in print at ./Run line 1643.Wide character in printf at ./Run line 1674.1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 101 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 101 x Execl Throughput  1 2 31 x File Copy 1024 bufsize 2000 maxblocks  1 2 31 x File Copy 256 bufsize 500 maxblocks  1 2 31 x File Copy 4096 bufsize 8000 maxblocks  1 2 31 x Pipe Throughput  1 2 3 4 5 6 7 8 9 101 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 101 x Process Creation  1 2 31 x System Call Overhead  1 2 3 4 5 6 7 8 9 101 x Shell Scripts (1 concurrent)  1 2 31 x Shell Scripts (8 concurrent)  1 2 3Wide character in printf at ./Run line 1574.========================================================================   BYTE UNIX Benchmarks (Version 5.1.3)   System: Centos8: GNU/Linux   OS: GNU/Linux -- 4.18.0-348.7.1.el8_5.x86_64 -- #1 SMP Wed Dec 22 13:25:12 UTC 2021   Machine: x86_64 (x86_64)   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)   CPU 0: Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz (5000.1 bogomips)          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET   15:52:57 up 4 days, 27 min,  3 users,  load average: 1.35, 0.51, 0.27; runlevel 2022-09-26------------------------------------------------------------------------Benchmark Run: 五 9月 30 2022 15:52:57 - 16:20:541 CPU in system; running 1 parallel copy of testsDhrystone 2 using register variables       30533182.3 lps   (10.0 s, 7 samples)Double-Precision Whetstone                     5262.3 MWIPS (8.7 s, 7 samples)Execl Throughput                               2308.0 lps   (29.8 s, 2 samples)File Copy 1024 bufsize 2000 maxblocks        402528.4 KBps  (30.0 s, 2 samples)File Copy 256 bufsize 500 maxblocks          105800.9 KBps  (30.0 s, 2 samples)File Copy 4096 bufsize 8000 maxblocks       1274830.3 KBps  (30.0 s, 2 samples)Pipe Throughput                              525172.7 lps   (10.0 s, 7 samples)Pipe-based Context Switching                 147504.8 lps   (10.0 s, 7 samples)Process Creation                               8027.9 lps   (30.0 s, 2 samples)Shell Scripts (1 concurrent)                   3421.2 lpm   (60.0 s, 2 samples)Shell Scripts (8 concurrent)                    461.3 lpm   (60.1 s, 2 samples)System Call Overhead                         264662.3 lps   (10.0 s, 7 samples)System Benchmarks Index Values               BASELINE       RESULT    INDEXDhrystone 2 using register variables         116700.0   30533182.3   2616.4Double-Precision Whetstone                       55.0       5262.3    956.8Execl Throughput                                 43.0       2308.0    536.7File Copy 1024 bufsize 2000 maxblocks          3960.0     402528.4   1016.5File Copy 256 bufsize 500 maxblocks            1655.0     105800.9    639.3File Copy 4096 bufsize 8000 maxblocks          5800.0    1274830.3   2198.0Pipe Throughput                               12440.0     525172.7    422.2Pipe-based Context Switching                   4000.0     147504.8    368.8Process Creation                                126.0       8027.9    637.1Shell Scripts (1 concurrent)                     42.4       3421.2    806.9Shell Scripts (8 concurrent)                      6.0        461.3    768.9System Call Overhead                          15000.0     264662.3    176.4                                                                   ========System Benchmarks Index Score                                         724.3[admin@Centos8 UnixBench]$ \n\n\nhttps://blog.csdn.net/xzm_0602/article/details/109736916\n\ngraphics测试 # 最新版本UnixBench5.1.3，包含system和graphic测试，如果你需要测试graphic，则需要修改Makefile,不要注释掉”GRAPHIC_TESTS = defined”，同时需要系统提供x11perf命令gl_glibs库，# 使用以下命令安装图形库yum -y install gcc automake autoconf libtool make yum install perl-Time-HiRes –y yum install mesa* -y yum install glut –yyum install –y xorg-x11*\n\n[root@centos7 soft]# cd byte-unixbench-5.1.3/UnixBench/[root@centos7 UnixBench]# make all[root@centos7 UnixBench]# ./Run graphicsmake allmake[1]: Entering directory `/tmp/soft/byte-unixbench-5.1.3/UnixBench&#x27;Checking distribution of files./pgms  exists./src  exists./testdir  exists./tmp  exists./results  existsmake[1]: Leaving directory `/tmp/soft/byte-unixbench-5.1.3/UnixBench&#x27;sh: 3dinfo: command not found   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark   Multi-CPU version                  Version 5 revisions by Ian Smith,                                      Sunnyvale, CA, USA   January 13, 2011                   johantheghost at yahoo period com1 x 2D graphics: rectangles  1 2 31 x 2D graphics: ellipses  1 2 31 x 2D graphics: aa polygons  1 2 3\n\n3D测试[root@SqaServer UnixBench]# ./Run ubgearsmake allmake[1]: Entering directory `/tmp/soft/unixbench/byte-unixbench-5.1.3/UnixBench&#x27;Checking distribution of files./pgms  exists./src  exists./testdir  exists./tmp  exists./results  existsmake[1]: Leaving directory `/tmp/soft/unixbench/byte-unixbench-5.1.3/UnixBench&#x27;sh: 3dinfo: command not found   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark   Multi-CPU version                  Version 5 revisions by Ian Smith,                                      Sunnyvale, CA, USA   January 13, 2011                   johantheghost at yahoo period com1 x 3D graphics: gears  1 2 3========================================================================   BYTE UNIX Benchmarks (Version 5.1.3)   System: SqaServer: GNU/Linux   OS: GNU/Linux -- 3.10.0-1160.71.1.el7.x86_64 -- #1 SMP Tue Jun 28 15:37:28 UTC 2022   Machine: x86_64 (x86_64)   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)   CPU 0: 12th Gen Intel(R) Core(TM) i7-12700 (4223.9 bogomips)          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET   CPU 1: 12th Gen Intel(R) Core(TM) i7-12700 (4223.9 bogomips)          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET   CPU 2: 12th Gen Intel(R) Core(TM) i7-12700 (4223.9 bogomips)          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET   CPU 3: 12th Gen Intel(R) Core(TM) i7-12700 (4223.9 bogomips)          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET   14:03:11 up  8:58,  2 users,  load average: 0.22, 0.20, 0.15; runlevel 5------------------------------------------------------------------------Benchmark Run: 一 11月 21 2022 14:03:11 - 14:04:354 CPUs in system; running 1 parallel copy of tests3D graphics: gears                              114.5 fps   (20.2 s, 2 samples)3D Graphics Benchmarks Index Values          BASELINE       RESULT    INDEX3D graphics: gears                               33.4        114.5     34.3                                                                   ========3D Graphics Benchmarks Index Score                                     34.3------------------------------------------------------------------------Benchmark Run: 一 11月 21 2022 14:04:35 - 14:04:354 CPUs in system; running 4 parallel copies of tests[root@SqaServer UnixBench]#\n\nCentos安装X11perf工具#tar -xvf x11perf-1.5.tar.gz1）解压x11perf-1.5.tar.gz，2）安装：#cd x11perf-1.5[root@centos7 x11perf-1.6.1]# ./configure --build=x86_64-linux（我的机器是X86架构的）[root@centos7 x11perf-1.6.1]# make# make过程中有warning，不用管[root@centos7 x11perf-1.6.1]# make install执行完后回到UnixBench下执行./Run graphics测试\n\n参考链接\nhttps://www.x.org/archive/individual/app/x11perf-1.6.1.tar.gz\n\n","categories":["Linux开源工具"],"tags":["UnixBench"]},{"title":"Perf","url":"/cmchtge8w000unegbcbuy2j57/","content":"安装admin@Centos8 lx]$ cat /etc/redhat-releaseCentOS Linux release 8.5.2111[admin@Centos8 lx]$ sudo yum install perfakopytov_sysbench                                                                                                                                                                                        214  B/s | 833  B     00:03  akopytov_sysbench-source                                                                                                                                                                                 229  B/s | 833  B     00:03  软件包 perf-4.18.0-348.7.1.el8_5.x86_64 已安装。依赖关系解决。无需任何处理。完毕！\n\n查看参数信息[admin@Centos8 lx]$ perf -h usage: perf [--version] [--help] [OPTIONS] COMMAND [ARGS] The most commonly used perf commands are:   annotate        Read perf.data (created by perf record) and display annotated code   archive         Create archive with object files with build-ids found in perf.data file   bench           General framework for benchmark suites   buildid-cache   Manage build-id cache.   buildid-list    List the buildids in a perf.data file   c2c             Shared Data C2C/HITM Analyzer.   config          Get and set variables in a configuration file.   daemon          Run record sessions on background   data            Data file related processing   diff            Read perf.data files and display the differential profile   evlist          List the event names in a perf.data file   ftrace          simple wrapper for kernel&#x27;s ftrace functionality   inject          Filter to augment the events stream with additional information   kallsyms        Searches running kernel for symbols   kmem            Tool to trace/measure kernel memory properties   kvm             Tool to trace/measure kvm guest os   list            List all symbolic event types   lock            Analyze lock events   mem             Profile memory accesses   record          Run a command and record its profile into perf.data   report          Read perf.data (created by perf record) and display the profile   sched           Tool to trace/measure scheduler properties (latencies)   script          Read perf.data (created by perf record) and display trace output   stat            Run a command and gather performance counter statistics   test            Runs sanity tests.   timechart       Tool to visualize total system behavior during a workload   top             System profiling tool.   version         display the version of perf binary   probe           Define new dynamic tracepoints   trace           strace inspired tool See &#x27;perf help COMMAND&#x27; for more information on a specific command.[admin@Centos8 lx]$ perf top[admin@Centos8 lx]$ \n","categories":["Linux开源工具"],"tags":["Perf"]},{"title":"Sysbench","url":"/cmchtge8w000wnegbgc3mao4q/","content":"安装sysbench\n进入到sysbench源码目录&#x2F;tmp&#x2F;soft&#x2F;sysbench-1.0.20\n\n[root@centos7 sysbench-1.0.20]# \n\n\n执行autogen.sh用它来生成configure这个文件\n\n[root@centos7 sysbench-1.0.20]# ./autogen.sh\n\n\n执行configure &amp;&amp; make &amp;&amp; make install 来完成sysbench的安装\n\n[root@centos7 sysbench-1.0.20]# ./configure --prefix=/usr/local/sysbench/ --with-mysql --with-mysql-includes=/data/software/mysql8/include --with-mysql-libs=/data/software/mysql8/lib[root@centos7 sysbench-1.0.20]# make[root@centos7 sysbench-1.0.20]# make install我这里之所以要这样写是因为我的mysql安装在/data/software/mysql8/；而不是默认的rpm的安装位置\n\n\n测试是否安装成功：\n\n[root@centos7 sysbench-1.0.20]# /usr/local/sysbench/bin/sysbench --versionsysbench 1.0.20到目前为止sysbench的安装就算是完成了！\n\nMySQL测试\n默认已经安装好MySQL\n\n./autogen.sh./configure\n\n#ERROR: cannot find MySQL libraries. If you want to compile with MySQL support 没找到mysql库 需要用参数指定下 –with-mysql-includes和–with-mysql-libs\n如何查找mysql的安装路径？\n安装mysql-devel，使用mysql_config查看mysql的安装路径yum install -y mysql-develmysql_config -help\n\n再次执行.&#x2F;configure，成功。\n./configure --with-mysql-includes=/usr/include/mysql --with-mysql-libs=/usr/lib64/mysqlmakemake install使用如下命令测试是否安装成功sysbench --version\n\n参考链接\nhttps://longsheng.org/post/14886.html\n\n\nhttps://blog.csdn.net/weixin_41561862/article/details/84651301\n\n执行.&#x2F;autogen.sh过程可能会遇到如下错误[root@SqaServer sysbench-1.0.20]# ./autogen.shautomake 1.10.x (aclocal) wasn&#x27;t found, exiting[root@SqaServer sysbench-1.0.20]# ./autogen.shlibtoolize 1.4+ wasn&#x27;t found, exiting# 解决方法[root@SqaServer sysbench-1.0.20]# yum install -y automake[root@SqaServer sysbench-1.0.20]# yum install -y libtool\n\n执行.&#x2F;configure出现错误\n# 问题cannot find MySQL client libraries# 解决方法，安装依赖[root@SqaServer sysbench-1.0.20]# sudo yum install mysql-devel# 执行./configure，如果还不行，执行[root@centos7 sysbench-1.0.20]# ./configure --prefix=/usr/local/sysbench/ --with-mysql --with-mysql-includes=/data/software/mysql8/include \n","categories":["Linux开源工具"],"tags":["Sysbench"]},{"title":"AFL","url":"/cmchtge8x000ynegb7v447qh6/","content":"上传并解压工具wget https://ghdl.feizhuqwq.cf/https://github.com/google/AFL/archive/refs/tags/v2.57b.tar.gz[root@k8smaster soft]# tar -zxvf AFL-2.57b.tar.gz [root@k8smaster soft]# lsAFL-2.57b  AFL-2.57b.tar.gz[root@k8smaster soft]#2.编译（默认已经具备gcc环境）[root@k8smaster AFL-2.57b]# make[root@k8smaster AFL-2.57b]# make install当输入afl-后使用Tab补全出现如下内容证明安装成功[root@k8smaster AFL-2.57b]# afl-afl-analyze  afl-clang++  afl-fuzz     afl-gcc      afl-plot     afl-tmin   afl-clang    afl-cmin     afl-g++      afl-gotcpu   afl-showmap  afl-whatsup  [root@k8smaster AFL-2.57b]#\n\n备注：针对以上内容的解释• afl-gcc 和afl-g++ 分别对应的是gcc 和g++ 的封装• afl-clang 和afl-clang++ 分别对应clang 的c 和c++ 编译器封装À。• afl-fuzz 是AFL 的主体，用于对目标程序进行fuzz。• afl-analyze 可以对用例进行分析，通过分析给定的用例，看能否发现用例中有意义的字段。• afl-qemu-trace 用于qemu-mode，默认不安装，需要手工执行qemu-mode 的编译脚本进行编译，后面会介绍。• afl-plot 生成测试任务的状态图• afl-tmin 和afl-cmin 对用例进行简化• afl-whatsup 用于查看fuzz 任务的状态• afl-gotcpu 用于查看当前CPU 状态• afl-showmap 用于对单个用例进行执行路径跟踪\n\n创建相应文件夹并编制测试脚本[root@k8smaster AFL-2.57b]# mkdir fuzz_in fuzz_out[root@k8smaster AFL-2.57b]# echo &quot;123AFc&quot; &gt;&gt; fuzz_in/1[root@k8smaster AFL-2.57b]# ls afl_test/afl_test*afl_test/afl_test.c[root@k8smaster AFL-2.57b]# cat ./afl_test/afl_test.c #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;signal.h&gt; int vuln(char *str)&#123;    int len = strlen(str);    if(str[0] == &#x27;A&#x27; &amp;&amp; len == 66)    &#123;        raise(SIGSEGV);        //如果输入的字符串的首字符为A并且长度为66，则异常退出    &#125;    else if(str[0] == &#x27;F&#x27; &amp;&amp; len == 6)    &#123;        raise(SIGSEGV);        //如果输入的字符串的首字符为F并且长度为6，则异常退出    &#125;    else    &#123;        printf(&quot;it is good!\\n&quot;);    &#125;    return 0;&#125;int main(int argc, char *argv[])&#123;    char buf[100]=&#123;0&#125;;    gets(buf);//存在栈溢出漏洞    printf(buf);//存在格式化字符串漏洞    vuln(buf);    return 0;&#125;\n\nC文件编译[root@k8smaster AFL-2.57b]# [root@k8smaster AFL-2.57b]# afl-gcc -g -o ./afl_test/afl_test  ./afl_test/afl_test.c\n\n参考链接\nhttps://zhuanlan.zhihu.com/p/524552737\n\n\nhttps://www.jianshu.com/p/a77274dcebce\n\n","categories":["Linux开源工具"],"tags":["AFL"]},{"title":"ApacheBench","url":"/cmchtge8y0011negb8ov525ud/","content":"[admin@Centos8 lx]$ pwd/opt/lx# 输入下面两个命令，检测依赖包apr-util-1.5.2-6.el7.x86_64；yum-utils-1.1.31-40.el7.noarch是否安装[admin@Centos8 lx]$ rpm -qa|grep apr-utilapr-util-1.6.1-6.el8.x86_64apr-util-openssl-1.6.1-6.el8.x86_64apr-util-bdb-1.6.1-6.el8.x86_64[admin@Centos8 lx]$ rpm -qa|grep yum-utilsyum-utils-4.0.21-3.el8.noarch[admin@Centos8 lx]$ mkdir abtmp[admin@Centos8 lx]$ cd abtmp/# 如果没有安装，请使用以下命令安装[admin@Centos8 abtmp]# yum -y install apr-util[admin@Centos8 abtmp]# yum -y install yum-utils# 如果没有安装，请使用以上命令安装[admin@Centos8 abtmp]$ [admin@Centos8 abtmp]$ pwd/opt/lx/abtmp# 安装ab工具[admin@Centos8 abtmp]$ sudo yum install yum-utils.noarchakopytov_sysbench                                                                                                                                                                                        227  B/s | 833  B     00:03  akopytov_sysbench-source                                                                                                                                                                                 301  B/s | 833  B     00:02  软件包 yum-utils-4.0.21-3.el8.noarch 已安装。依赖关系解决。无需任何处理。完毕！[admin@Centos8 abtmp]$ yumdownloader httpd-tools*CentOS-8.5.2111 - Base - mirrors.aliyun.com                                                                                                                                                               21 kB/s | 3.9 kB     00:00  CentOS-8.5.2111 - Extras - mirrors.aliyun.com                                                                                                                                                             15 kB/s | 1.5 kB     00:00  CentOS-8.5.2111 - AppStream - mirrors.aliyun.com                                                                                                                                                          33 kB/s | 4.3 kB     00:00  akopytov_sysbench                                                                                                                                                                                        2.1 kB/s | 3.9 kB     00:01  导入 GPG 公钥 0x04DCFD39: Userid: &quot;https://packagecloud.io/akopytov/sysbench-prerelease (https://packagecloud.io/docs#gpg_signing) &lt;support@packagecloud.io&gt;&quot; 指纹: 9789 8D69 F99E E5CA C462 A0F8 CF10 4890 04DC FD39 来自: https://packagecloud.io/akopytov/sysbench/gpgkey确定吗？[y/N]： yakopytov_sysbench                                                                                                                                                                                        1.6 kB/s | 6.5 kB     00:03  akopytov_sysbench-source                                                                                                                                                                                 3.1 kB/s | 3.9 kB     00:01  导入 GPG 公钥 0x04DCFD39: Userid: &quot;https://packagecloud.io/akopytov/sysbench-prerelease (https://packagecloud.io/docs#gpg_signing) &lt;support@packagecloud.io&gt;&quot; 指纹: 9789 8D69 F99E E5CA C462 A0F8 CF10 4890 04DC FD39 来自: https://packagecloud.io/akopytov/sysbench/gpgkey确定吗？[y/N]： yakopytov_sysbench-source                                                                                                                                                                                 290  B/s | 1.3 kB     00:04  Docker CE Stable - x86_64                                                                                                                                                                                7.0 kB/s | 3.5 kB     00:00  httpd-tools-2.4.37-43.module_el8.5.0+1022+b541f3b1.x86_64.rpm                                                                                                                                            150 kB/s | 107 kB     00:00  [admin@Centos8 abtmp]$ rpm2cpio httpd-tools*.rpm | cpio -idmv./usr/bin/ab./usr/bin/htdbm./usr/bin/htdigest./usr/bin/htpasswd./usr/bin/httxt2dbm./usr/bin/logresolve./usr/lib/.build-id./usr/lib/.build-id/33./usr/lib/.build-id/33/6c269480766febcb49d92ac989c447c6ccf020./usr/lib/.build-id/43/ddb0757ee63df612386e5f9e979ddb13fd2a67./usr/lib/.build-id/4c./usr/lib/.build-id/4c/83c9ff7f3582c02c3ed20f1b0782e9ea057cc1./usr/lib/.build-id/71./usr/lib/.build-id/71/0b9fa43212365ecd69cda8475f99226c10292b./usr/lib/.build-id/8c./usr/lib/.build-id/8c/465d35e5425ee725c67d7f91d8daefd4117856./usr/lib/.build-id/95/b29a4b8eae007fa43f315144d11e76d69147ae./usr/share/doc/httpd-tools./usr/share/doc/httpd-tools/LICENSE./usr/share/doc/httpd-tools/NOTICE./usr/share/man/man1/ab.1.gz./usr/share/man/man1/htdbm.1.gz./usr/share/man/man1/htdigest.1.gz./usr/share/man/man1/htpasswd.1.gz./usr/share/man/man1/httxt2dbm.1.gz./usr/share/man/man1/logresolve.1.gz396 块# 将./user/bin/ab复制到系统bin下即可：[admin@Centos8 abtmp]$ sudo cp /opt/lx/abtmp/usr/bin/ab /usr/bin[admin@Centos8 abtmp]$ ab -VThis is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/[admin@Centos8 abtmp]$ \n\n\nhttps://blog.csdn.net/luckymama/article/details/74231680\n\n","categories":["Linux开源工具"],"tags":["ApacheBench"]},{"title":"CloudPerf","url":"/cmchtge8y0013negbeh4rasvl/","content":"安装[root@Centos8 lx]# pip3 install cloudperf[root@Centos8 lx]# cloudperf prices --filter region=us-west-2 | head -10     instanceType    region    spot-az  vcpu    memory     price         t3a.nano us-west-2 us-west-2c     2     0.500   0.00140         t3a.nano us-west-2 us-west-2b     2     0.500   0.00140         t3a.nano us-west-2 us-west-2a     2     0.500   0.00140         t3a.nano us-west-2 us-west-2d     2     0.500   0.00140          t3.nano us-west-2 us-west-2a     2     0.500   0.00160          t3.nano us-west-2 us-west-2b     2     0.500   0.00160          t3.nano us-west-2 us-west-2c     2     0.500   0.00160          t3.nano us-west-2 us-west-2d     2     0.500   0.00160         t4g.nano us-west-2 us-west-2d     2     0.500   0.00180[root@Centos8 lx]# \n\n参考链接\nhttps://github.com/bra-fsn/cloudperf\n\n","categories":["Linux开源工具"],"tags":["CloudPerf"]},{"title":"Fio","url":"/cmchtge8z0016negbd0xj45dh/","content":"下载安装[root@Centos8 lx]# pwd/opt/lx1.下载[root@Centos8 lx]# wget https://git.kernel.dk/cgit/fio/snapshot/fio-3.32.tar.gz[root@Centos8 lx]# ll总用量 307932-rw-r--r--  1 root  root    6182071 9月  30 10:36 fio-3.32.tar.gz2.解压缩[root@Centos8 lx]# tar -zxvf fio-3.32.tar.gz [root@Centos8 lx]# ll总用量 307940drwxrwxr-x 18 root  root       4096 8月  31 00:51 fio-3.32[root@Centos8 lx]# cd fio-3.32/[root@Centos8 fio-3.32]# lsarch                  doc              gclient.h         init.c         oslib           STEADYSTATE-TODObackend.c             engines          gcompat.c         io_ddir.h      parse.c         tblktrace_api.h        err.h            gcompat.h         ioengines.c    parse.h         td_error.cblktrace.c            eta.c            gerror.c          ioengines.h    printing.c      td_error.hblktrace.h            examples         gerror.h          iolog.c        printing.h      thread_options.hcairo_text_helpers.c  exp              gettime.c         iolog.h        profile.c       tickmarks.ccairo_text_helpers.h  fifo.c           gettime.h         io_u.c         profile.h       tickmarks.hcconv.c               fifo.h           gettime-thread.c  io_u.h         profiles        time.ccgroup.c              file.h           gfio.c            io_u_queue.c   pshared.c       toolscgroup.h              filehash.c       gfio.h            io_u_queue.h   pshared.h       trim.cci                    filehash.h       GFIO-TODO         json.c         rate-submit.c   trim.hCITATION.cff          filelock.c       ghelpers.c        json.h         rate-submit.h   unittestsclient.c              filelock.h       ghelpers.h        lib            README.rst      verify.cclient.h              filesetup.c      goptions.c        libfio.c       REPORTING-BUGS  verify.hcompiler              fio.1            goptions.h        log.c          rwlock.c        verify-state.hconfigure             fio.c            graph.c           log.h          rwlock.h        workqueue.cCOPYING               fio.h            graph.h           Makefile       server.c        workqueue.hcrc                   fio_sem.c        hash.h            memory.c       server.h        zbd.cdebug.c               fio_sem.h        helpers.c         minmax.h       SERVER-TODO     zbd.hdebug.h               fio_time.h       helpers.h         MORAL-LICENSE  smalloc.c       zbd_types.hdedupe.c              FIO-VERSION-GEN  helper_thread.c   optgroup.c     smalloc.h       zone-dist.cdedupe.h              flist.h          helper_thread.h   optgroup.h     stat.c          zone-dist.hDEDUPE-TODO           flow.c           HOWTO.rst         options.c      stat.hdiskutil.c            flow.h           idletime.c        options.h      steadystate.cdiskutil.h            gclient.c        idletime.h        os             steadystate.h[root@Centos8 fio-3.32]# ./configure [root@Centos8 fio-3.32]# make[root@Centos8 fio-3.32]# make install[root@Centos8 fio-3.32]# lsarch                  diskutil.h        flow.h            ioengines.c    os              steadystate.hbackend.c             diskutil.o        flow.o            ioengines.d    oslib           steadystate.obackend.d             doc               gclient.c         ioengines.h    parse.c         STEADYSTATE-TODObackend.o             engines           gclient.h         ioengines.o    parse.d         tblktrace_api.h        err.h             gcompat.c         iolog.c        parse.h         td_error.cblktrace.c            eta.c             gcompat.h         iolog.d        parse.o         td_error.dblktrace.d            eta.d             gerror.c          iolog.h        printing.c      td_error.hblktrace.h            eta.o             gerror.h          iolog.o        printing.h      td_error.oblktrace.o            examples          gettime.c         io_u.c         profile.c       thread_options.hcairo_text_helpers.c  exp               gettime.d         io_u.d         profile.d       tickmarks.ccairo_text_helpers.h  fifo.c            gettime.h         io_u.h         profile.h       tickmarks.hcconv.c               fifo.d            gettime.o         io_u.o         profile.o       time.ccconv.d               fifo.h            gettime-thread.c  io_u_queue.c   profiles        time.dcconv.o               fifo.o            gettime-thread.d  io_u_queue.d   pshared.c       time.ocgroup.c              file.h            gettime-thread.o  io_u_queue.h   pshared.d       toolscgroup.d              filehash.c        gfio.c            io_u_queue.o   pshared.h       trim.ccgroup.h              filehash.d        gfio.h            json.c         pshared.o       trim.dcgroup.o              filehash.h        GFIO-TODO         json.d         rate-submit.c   trim.hci                    filehash.o        ghelpers.c        json.h         rate-submit.d   trim.oCITATION.cff          filelock.c        ghelpers.h        json.o         rate-submit.h   unittestsclient.c              filelock.d        goptions.c        lib            rate-submit.o   verify.cclient.d              filelock.h        goptions.h        libfio.c       README.rst      verify.dclient.h              filelock.o        graph.c           libfio.d       REPORTING-BUGS  verify.hclient.o              filesetup.c       graph.h           libfio.o       rwlock.c        verify.ocompiler              filesetup.d       hash.h            log.c          rwlock.d        verify-state.hconfig-host.h         filesetup.o       helpers.c         log.d          rwlock.h        workqueue.cconfig-host.mak       fio               helpers.d         log.h          rwlock.o        workqueue.dconfig.log            fio.1             helpers.h         log.o          server.c        workqueue.hconfigure             fio.c             helpers.o         Makefile       server.d        workqueue.oCOPYING               fio.d             helper_thread.c   memory.c       server.h        zbd.ccrc                   fio.h             helper_thread.d   memory.d       server.o        zbd.ddebug.c               fio.o             helper_thread.h   memory.o       SERVER-TODO     zbd.hdebug.d               fio_sem.c         helper_thread.o   minmax.h       smalloc.c       zbd.odebug.h               fio_sem.d         HOWTO.rst         MORAL-LICENSE  smalloc.d       zbd_types.hdebug.o               fio_sem.h         idletime.c        optgroup.c     smalloc.h       zone-dist.cdedupe.c              fio_sem.o         idletime.d        optgroup.d     smalloc.o       zone-dist.ddedupe.d              fio_time.h        idletime.h        optgroup.h     stat.c          zone-dist.hdedupe.h              FIO-VERSION-FILE  idletime.o        optgroup.o     stat.d          zone-dist.odedupe.o              FIO-VERSION-GEN   init.c            options.c      stat.hDEDUPE-TODO           flist.h           init.d            options.d      stat.odiskutil.c            flow.c            init.o            options.h      steadystate.cdiskutil.d            flow.d            io_ddir.h         options.o      steadystate.d[root@Centos8 fio-3.32]# [root@Centos8 fio-3.32]# fio --versionfio-3.32[root@Centos8 fio-3.32]# \n\nFIO测试参数-filename=/dev/sdb1       测试文件名称，通常选择需要测试的盘的data目录。 只能是分区，不能是目录，会破坏数据-direct=1                 测试过程绕过机器自带的buffer。使测试结果更真实。-rw=randrw                测试随机写和读的I/O-rw=rw/readwrite          测试顺序读写的I/O-rw=read                  顺序读-rw=write                 顺序写-rw=randread              随机读-rw=randwrite             随机写-iodepth=1                队列深度，只有使用libaio时才有意义，这是一个可以影响IOPS的参数，通常情况下为1。-ioengine=psync/libaio    io引擎使用pync方式-bs=4k                    单次io的块文件大小为4k (单次IO越小的时候，单次IO所耗费的时间也越少，相应的IOPS也就越大)-size=2G                  测试文件大小为2g，以每次4k的io进行测试,此大小不能超过filename的大小，否则会报错。-numjobs=10               测试线程为10.-runtime=10               测试时间为10秒，如果不写则一直将2g文件分4k每次写完为止。-lockmem=1g               只使用1g内存进行测试。-rwmixwrite=30            在混合读写的模式下，写占30% -group_reporting          关于显示结果的，汇总每个进程的信息。-name=name                直接测试读会在测试设备写入name.*文件-output=rw.txt            将输出内容写入文件\n\n顺序读[root@Centos8 fio-3.32]# fio -fimename=/dev/sdc1 -direct=1 -rw=read -iodepth=1 -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=namename: (g=0): rw=read, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=psync, iodepth=1fio-3.32Starting 1 processname: Laying out IO file (1 file / 2048MiB)3;fio-3.32;name;0;0;132160;13209;3302;10005;0;0;0.000000;0.000000;105;30823;301.964763;973.421730;1.000000%=110;5.000000%=113;10.000000%=115;20.000000%=118;30.000000%=120;40.000000%=122;50.000000%=124;60.000000%=127;70.000000%=132;80.000000%=140;90.000000%=166;95.000000%=236;99.000000%=6455;99.500000%=6520;99.900000%=7700;99.950000%=8585;99.990000%=10944;0%=0;0%=0;0%=0;105;30823;302.054914;973.424289;9732;26864;99.570070%;13152.210526;4290.142507;0;0;0;0;0;0;0.000000;0.000000;0;0;0.000000;0.000000;1.000000%=0;5.000000%=0;10.000000%=0;20.000000%=0;30.000000%=0;40.000000%=0;50.000000%=0;60.000000%=0;70.000000%=0;80.000000%=0;90.000000%=0;95.000000%=0;99.000000%=0;99.500000%=0;99.900000%=0;99.950000%=0;99.990000%=0;0%=0;0%=0;0%=0;0;0;0.000000;0.000000;0;0;0.000000%;0.000000;0.000000;0.479808%;3.028788%;33040;0;13;100.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;95.13%;0.90%;0.41%;0.21%;0.32%;0.58%;2.43%;0.02%;0.01%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;vda;32948;3;0;0;11703;18;11720;93.61%name: (groupid=0, jobs=1): err= 0: pid=1302977: Fri Sep 30 11:41:06 2022  read: IOPS=3302, BW=12.9MiB/s (13.5MB/s)(129MiB/10005msec)    clat (usec): min=105, max=30823, avg=301.96, stdev=973.42     lat (usec): min=105, max=30823, avg=302.05, stdev=973.42    clat percentiles (usec):     |  1.00th=[  111],  5.00th=[  114], 10.00th=[  116], 20.00th=[  119],     | 30.00th=[  121], 40.00th=[  123], 50.00th=[  125], 60.00th=[  128],     | 70.00th=[  133], 80.00th=[  141], 90.00th=[  167], 95.00th=[  237],     | 99.00th=[ 6456], 99.50th=[ 6521], 99.90th=[ 7701], 99.95th=[ 8586],     | 99.99th=[10945]   bw (  KiB/s): min= 9732, max=26864, per=99.57%, avg=13152.21, stdev=4290.14, samples=19   iops        : min= 2433, max= 6716, avg=3288.00, stdev=1072.56, samples=19  lat (usec)   : 250=95.13%, 500=0.90%, 750=0.41%, 1000=0.21%  lat (msec)   : 2=0.32%, 4=0.58%, 10=2.43%, 20=0.02%, 50=0.01%  cpu          : usr=0.48%, sys=3.03%, ctx=33040, majf=0, minf=13  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     issued rwts: total=33040,0,0,0 short=0,0,0,0 dropped=0,0,0,0     latency   : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs):   READ: bw=12.9MiB/s (13.5MB/s), 12.9MiB/s-12.9MiB/s (13.5MB/s-13.5MB/s), io=129MiB (135MB), run=10005-10005msecDisk stats (read/write):  vda: ios=32948/3, merge=0/0, ticks=11703/18, in_queue=11720, util=93.61%[root@Centos8 fio-3.32]# [root@Centos8 fio-3.32]# \n\n顺序写[root@Centos8 fio-3.32]# fio -fimename=/dev/sdc1 -direct=1 -rw=write -iodepth=1 -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=namename: (g=0): rw=write, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=psync, iodepth=1fio-3.32Starting 1 process3;fio-3.32;name;0;0;0;0;0;0;0;0;0.000000;0.000000;0;0;0.000000;0.000000;1.000000%=0;5.000000%=0;10.000000%=0;20.000000%=0;30.000000%=0;40.000000%=0;50.000000%=0;60.000000%=0;70.000000%=0;80.000000%=0;90.000000%=0;95.000000%=0;99.000000%=0;99.500000%=0;99.900000%=0;99.950000%=0;99.990000%=0;0%=0;0%=0;0%=0;0;0;0.000000;0.000000;0;0;0.000000%;0.000000;0.000000;134036;13402;3350;10001;0;0;0.000000;0.000000;139;20761;297.476504;755.833998;1.000000%=146;5.000000%=148;10.000000%=150;20.000000%=154;30.000000%=156;40.000000%=160;50.000000%=164;60.000000%=168;70.000000%=177;80.000000%=185;90.000000%=201;95.000000%=268;99.000000%=5079;99.500000%=5472;99.900000%=6586;99.950000%=8355;99.990000%=10682;0%=0;0%=0;0%=0;139;20761;297.621334;755.840060;10786;20912;100.000000%;13490.947368;3024.208427;0.700000%;3.120000%;33509;0;12;100.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;94.51%;1.66%;0.50%;0.30%;0.36%;0.82%;1.82%;0.01%;0.01%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;vda;40;33240;0;0;76;8686;8762;93.18%name: (groupid=0, jobs=1): err= 0: pid=1304816: Fri Sep 30 11:45:19 2022  write: IOPS=3350, BW=13.1MiB/s (13.7MB/s)(131MiB/10001msec); 0 zone resets    clat (usec): min=139, max=20761, avg=297.48, stdev=755.83     lat (usec): min=139, max=20761, avg=297.62, stdev=755.84    clat percentiles (usec):     |  1.00th=[  147],  5.00th=[  149], 10.00th=[  151], 20.00th=[  155],     | 30.00th=[  157], 40.00th=[  161], 50.00th=[  165], 60.00th=[  169],     | 70.00th=[  178], 80.00th=[  186], 90.00th=[  202], 95.00th=[  269],     | 99.00th=[ 5080], 99.50th=[ 5473], 99.90th=[ 6587], 99.95th=[ 8356],     | 99.99th=[10683]   bw (  KiB/s): min=10786, max=20912, per=100.00%, avg=13490.95, stdev=3024.21, samples=19   iops        : min= 2696, max= 5228, avg=3372.68, stdev=756.08, samples=19  lat (usec)   : 250=94.51%, 500=1.66%, 750=0.50%, 1000=0.30%  lat (msec)   : 2=0.36%, 4=0.82%, 10=1.82%, 20=0.01%, 50=0.01%  cpu          : usr=0.70%, sys=3.12%, ctx=33509, majf=0, minf=12  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     issued rwts: total=0,33509,0,0 short=0,0,0,0 dropped=0,0,0,0     latency   : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs):  WRITE: bw=13.1MiB/s (13.7MB/s), 13.1MiB/s-13.1MiB/s (13.7MB/s-13.7MB/s), io=131MiB (137MB), run=10001-10001msecDisk stats (read/write):  vda: ios=40/33240, merge=0/0, ticks=76/8686, in_queue=8762, util=93.18%[root@Centos8 fio-3.32]# [root@Centos8 fio-3.32]# \n\n随机读[root@Centos8 fio-3.32]# fio -fimename=/dev/sdc1 -direct=1 -rw=randread -iodepth=1 -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=namename: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=psync, iodepth=1fio-3.32Starting 1 process3;fio-3.32;name;0;0;133532;13351;3337;10001;0;0;0.000000;0.000000;189;14700;298.421947;348.277458;1.000000%=205;5.000000%=214;10.000000%=220;20.000000%=228;30.000000%=234;40.000000%=244;50.000000%=254;60.000000%=264;70.000000%=272;80.000000%=284;90.000000%=313;95.000000%=350;99.000000%=1351;99.500000%=2998;99.900000%=4947;99.950000%=5734;99.990000%=8585;0%=0;0%=0;0%=0;189;14700;298.527259;348.284972;9536;15608;99.468205%;13280.000000;1775.100874;0;0;0;0;0;0;0.000000;0.000000;0;0;0.000000;0.000000;1.000000%=0;5.000000%=0;10.000000%=0;20.000000%=0;30.000000%=0;40.000000%=0;50.000000%=0;60.000000%=0;70.000000%=0;80.000000%=0;90.000000%=0;95.000000%=0;99.000000%=0;99.500000%=0;99.900000%=0;99.950000%=0;99.990000%=0;0%=0;0%=0;0%=0;0;0;0.000000;0.000000;0;0;0.000000%;0.000000;0.000000;0.650000%;3.130000%;33383;0;10;100.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;45.23%;51.86%;1.04%;0.61%;0.48%;0.57%;0.22%;0.01%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;vda;33035;0;0;0;8597;0;8597;92.61%name: (groupid=0, jobs=1): err= 0: pid=1305109: Fri Sep 30 11:45:59 2022  read: IOPS=3337, BW=13.0MiB/s (13.7MB/s)(130MiB/10001msec)    clat (usec): min=189, max=14700, avg=298.42, stdev=348.28     lat (usec): min=189, max=14700, avg=298.53, stdev=348.28    clat percentiles (usec):     |  1.00th=[  206],  5.00th=[  215], 10.00th=[  221], 20.00th=[  229],     | 30.00th=[  235], 40.00th=[  245], 50.00th=[  255], 60.00th=[  265],     | 70.00th=[  273], 80.00th=[  285], 90.00th=[  314], 95.00th=[  351],     | 99.00th=[ 1352], 99.50th=[ 2999], 99.90th=[ 4948], 99.95th=[ 5735],     | 99.99th=[ 8586]   bw (  KiB/s): min= 9536, max=15608, per=99.46%, avg=13280.00, stdev=1775.10, samples=19   iops        : min= 2384, max= 3902, avg=3320.00, stdev=443.78, samples=19  lat (usec)   : 250=45.23%, 500=51.86%, 750=1.04%, 1000=0.61%  lat (msec)   : 2=0.48%, 4=0.57%, 10=0.22%, 20=0.01%  cpu          : usr=0.65%, sys=3.13%, ctx=33383, majf=0, minf=10  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     issued rwts: total=33383,0,0,0 short=0,0,0,0 dropped=0,0,0,0     latency   : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs):   READ: bw=13.0MiB/s (13.7MB/s), 13.0MiB/s-13.0MiB/s (13.7MB/s-13.7MB/s), io=130MiB (137MB), run=10001-10001msecDisk stats (read/write):  vda: ios=33035/0, merge=0/0, ticks=8597/0, in_queue=8597, util=92.61%[root@Centos8 fio-3.32]# [root@Centos8 fio-3.32]# \n\n随机写[root@Centos8 fio-3.32]# fio -fimename=/dev/sdc1 -direct=1 -rw=randwrite -iodepth=1 -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=namename: (g=0): rw=randwrite, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=psync, iodepth=1fio-3.32Starting 1 process3;fio-3.32;name;0;0;0;0;0;0;0;0;0.000000;0.000000;0;0;0.000000;0.000000;1.000000%=0;5.000000%=0;10.000000%=0;20.000000%=0;30.000000%=0;40.000000%=0;50.000000%=0;60.000000%=0;70.000000%=0;80.000000%=0;90.000000%=0;95.000000%=0;99.000000%=0;99.500000%=0;99.900000%=0;99.950000%=0;99.990000%=0;0%=0;0%=0;0%=0;0;0;0.000000;0.000000;0;0;0.000000%;0.000000;0.000000;134196;13418;3354;10001;0;0;0.000000;0.000000;141;12568;296.852976;718.281384;1.000000%=148;5.000000%=150;10.000000%=154;20.000000%=158;30.000000%=160;40.000000%=164;50.000000%=168;60.000000%=175;70.000000%=181;80.000000%=189;90.000000%=209;95.000000%=284;99.000000%=4751;99.500000%=5472;99.900000%=6848;99.950000%=7700;99.990000%=10682;0%=0;0%=0;0%=0;141;12568;297.003431;718.287242;11224;20224;100.000000%;13453.894737;2598.393818;0.670000%;3.360000%;33549;0;11;100.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;94.15%;1.93%;0.47%;0.40%;0.38%;1.14%;1.52%;0.01%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;vda;24;33267;0;1;57;8488;8546;91.95%name: (groupid=0, jobs=1): err= 0: pid=1305264: Fri Sep 30 11:46:20 2022  write: IOPS=3354, BW=13.1MiB/s (13.7MB/s)(131MiB/10001msec); 0 zone resets    clat (usec): min=141, max=12568, avg=296.85, stdev=718.28     lat (usec): min=141, max=12568, avg=297.00, stdev=718.29    clat percentiles (usec):     |  1.00th=[  149],  5.00th=[  151], 10.00th=[  155], 20.00th=[  159],     | 30.00th=[  161], 40.00th=[  165], 50.00th=[  169], 60.00th=[  176],     | 70.00th=[  182], 80.00th=[  190], 90.00th=[  210], 95.00th=[  285],     | 99.00th=[ 4752], 99.50th=[ 5473], 99.90th=[ 6849], 99.95th=[ 7701],     | 99.99th=[10683]   bw (  KiB/s): min=11224, max=20224, per=100.00%, avg=13453.89, stdev=2598.39, samples=19   iops        : min= 2806, max= 5056, avg=3363.47, stdev=649.60, samples=19  lat (usec)   : 250=94.15%, 500=1.93%, 750=0.47%, 1000=0.40%  lat (msec)   : 2=0.38%, 4=1.14%, 10=1.52%, 20=0.01%  cpu          : usr=0.67%, sys=3.36%, ctx=33549, majf=0, minf=11  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     issued rwts: total=0,33549,0,0 short=0,0,0,0 dropped=0,0,0,0     latency   : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs):  WRITE: bw=13.1MiB/s (13.7MB/s), 13.1MiB/s-13.1MiB/s (13.7MB/s-13.7MB/s), io=131MiB (137MB), run=10001-10001msecDisk stats (read/write):  vda: ios=24/33267, merge=0/1, ticks=57/8488, in_queue=8546, util=91.95%[root@Centos8 fio-3.32]# [root@Centos8 fio-3.32]# \n\n混合顺序读写[root@Centos8 fio-3.32]# fio -fimename=/dev/sdc1 -direct=1 -rw=rw -iodepth=1 -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=namename: (g=0): rw=rw, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=psync, iodepth=1fio-3.32Starting 1 process3;fio-3.32;name;0;0;65592;6558;1639;10001;0;0;0.000000;0.000000;104;10993;347.669977;795.991522;1.000000%=109;5.000000%=114;10.000000%=117;20.000000%=120;30.000000%=124;40.000000%=127;50.000000%=132;60.000000%=140;70.000000%=164;80.000000%=199;90.000000%=333;95.000000%=2023;99.000000%=4227;99.500000%=5472;99.900000%=6651;99.950000%=7372;99.990000%=9502;0%=0;0%=0;0%=0;104;10993;347.776933;795.998578;3472;11912;100.000000%;6618.947368;2283.989041;65572;6556;1639;10001;0;0;0.000000;0.000000;139;12143;260.127496;626.014086;1.000000%=144;5.000000%=148;10.000000%=152;20.000000%=156;30.000000%=158;40.000000%=162;50.000000%=166;60.000000%=173;70.000000%=181;80.000000%=189;90.000000%=207;95.000000%=257;99.000000%=4079;99.500000%=5472;99.900000%=6979;99.950000%=8585;99.990000%=11337;0%=0;0%=0;0%=0;140;12143;260.289793;626.018167;3744;12136;100.000000%;6594.052632;2297.365653;0.650000%;3.420000%;32791;0;15;100.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;90.51%;3.88%;0.67%;1.02%;0.55%;2.27%;1.08%;0.01%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;vda;16314;16279;0;0;5087;3625;8711;93.07%name: (groupid=0, jobs=1): err= 0: pid=1305489: Fri Sep 30 11:46:50 2022  read: IOPS=1639, BW=6559KiB/s (6716kB/s)(64.1MiB/10001msec)    clat (usec): min=104, max=10993, avg=347.67, stdev=795.99     lat (usec): min=104, max=10993, avg=347.78, stdev=796.00    clat percentiles (usec):     |  1.00th=[  110],  5.00th=[  115], 10.00th=[  118], 20.00th=[  121],     | 30.00th=[  125], 40.00th=[  128], 50.00th=[  133], 60.00th=[  141],     | 70.00th=[  165], 80.00th=[  200], 90.00th=[  334], 95.00th=[ 2024],     | 99.00th=[ 4228], 99.50th=[ 5473], 99.90th=[ 6652], 99.95th=[ 7373],     | 99.99th=[ 9503]   bw (  KiB/s): min= 3472, max=11912, per=100.00%, avg=6618.95, stdev=2283.99, samples=19   iops        : min=  868, max= 2978, avg=1654.74, stdev=571.00, samples=19  write: IOPS=1639, BW=6557KiB/s (6714kB/s)(64.0MiB/10001msec); 0 zone resets    clat (usec): min=139, max=12143, avg=260.13, stdev=626.01     lat (usec): min=140, max=12143, avg=260.29, stdev=626.02    clat percentiles (usec):     |  1.00th=[  145],  5.00th=[  149], 10.00th=[  153], 20.00th=[  157],     | 30.00th=[  159], 40.00th=[  163], 50.00th=[  167], 60.00th=[  174],     | 70.00th=[  182], 80.00th=[  190], 90.00th=[  208], 95.00th=[  258],     | 99.00th=[ 4080], 99.50th=[ 5473], 99.90th=[ 6980], 99.95th=[ 8586],     | 99.99th=[11338]   bw (  KiB/s): min= 3744, max=12136, per=100.00%, avg=6594.05, stdev=2297.37, samples=19   iops        : min=  936, max= 3034, avg=1648.47, stdev=574.39, samples=19  lat (usec)   : 250=90.51%, 500=3.88%, 750=0.67%, 1000=1.02%  lat (msec)   : 2=0.55%, 4=2.27%, 10=1.08%, 20=0.01%  cpu          : usr=0.65%, sys=3.42%, ctx=32791, majf=0, minf=15  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     issued rwts: total=16398,16393,0,0 short=0,0,0,0 dropped=0,0,0,0     latency   : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs):   READ: bw=6559KiB/s (6716kB/s), 6559KiB/s-6559KiB/s (6716kB/s-6716kB/s), io=64.1MiB (67.2MB), run=10001-10001msec  WRITE: bw=6557KiB/s (6714kB/s), 6557KiB/s-6557KiB/s (6714kB/s-6714kB/s), io=64.0MiB (67.1MB), run=10001-10001msecDisk stats (read/write):  vda: ios=16314/16279, merge=0/0, ticks=5087/3625, in_queue=8711, util=93.07%[root@Centos8 fio-3.32]# \n\n混合随机读写[root@Centos8 fio-3.32]# fio -fimename=/dev/sdc1 -direct=1 -rw=randrw -iodepth=1 -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=namename: (g=0): rw=randrw, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=psync, iodepth=1fio-3.32Starting 1 process3;fio-3.32;name;0;0;67084;6707;1676;10001;0;0;0.000000;0.000000;184;11595;338.259882;502.670713;1.000000%=209;5.000000%=216;10.000000%=222;20.000000%=230;30.000000%=236;40.000000%=244;50.000000%=257;60.000000%=268;70.000000%=272;80.000000%=284;90.000000%=313;95.000000%=415;99.000000%=3424;99.500000%=4292;99.900000%=5210;99.950000%=5799;99.990000%=8716;0%=0;0%=0;0%=0;184;11595;338.352392;502.677982;4864;8712;100.000000%;6748.631579;1116.102156;67080;6707;1676;10001;0;0;0.000000;0.000000;147;9523;255.826808;510.299103;1.000000%=152;5.000000%=156;10.000000%=160;20.000000%=162;30.000000%=166;40.000000%=171;50.000000%=173;60.000000%=177;70.000000%=183;80.000000%=191;90.000000%=207;95.000000%=257;99.000000%=3358;99.500000%=4112;99.900000%=5931;99.950000%=7241;99.990000%=8224;0%=0;0%=0;0%=0;148;9523;255.970946;510.303799;4760;8888;100.000000%;6727.578947;1176.439748;0.650000%;3.220000%;33542;0;11;100.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.0%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;69.55%;26.73%;0.86%;0.43%;0.47%;1.36%;0.60%;0.01%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;0.00%;vda;16626;16627;0;0;5066;3686;8753;93.53%name: (groupid=0, jobs=1): err= 0: pid=1347755: Fri Sep 30 13:24:41 2022  read: IOPS=1676, BW=6708KiB/s (6869kB/s)(65.5MiB/10001msec)    clat (usec): min=184, max=11595, avg=338.26, stdev=502.67     lat (usec): min=184, max=11595, avg=338.35, stdev=502.68    clat percentiles (usec):     |  1.00th=[  210],  5.00th=[  217], 10.00th=[  223], 20.00th=[  231],     | 30.00th=[  237], 40.00th=[  245], 50.00th=[  258], 60.00th=[  269],     | 70.00th=[  273], 80.00th=[  285], 90.00th=[  314], 95.00th=[  416],     | 99.00th=[ 3425], 99.50th=[ 4293], 99.90th=[ 5211], 99.95th=[ 5800],     | 99.99th=[ 8717]   bw (  KiB/s): min= 4864, max= 8712, per=100.00%, avg=6748.63, stdev=1116.10, samples=19   iops        : min= 1216, max= 2178, avg=1687.16, stdev=279.03, samples=19  write: IOPS=1676, BW=6707KiB/s (6868kB/s)(65.5MiB/10001msec); 0 zone resets    clat (usec): min=147, max=9523, avg=255.83, stdev=510.30     lat (usec): min=148, max=9523, avg=255.97, stdev=510.30    clat percentiles (usec):     |  1.00th=[  153],  5.00th=[  157], 10.00th=[  161], 20.00th=[  163],     | 30.00th=[  167], 40.00th=[  172], 50.00th=[  174], 60.00th=[  178],     | 70.00th=[  184], 80.00th=[  192], 90.00th=[  208], 95.00th=[  258],     | 99.00th=[ 3359], 99.50th=[ 4113], 99.90th=[ 5932], 99.95th=[ 7242],     | 99.99th=[ 8225]   bw (  KiB/s): min= 4760, max= 8888, per=100.00%, avg=6727.58, stdev=1176.44, samples=19   iops        : min= 1190, max= 2222, avg=1681.89, stdev=294.11, samples=19  lat (usec)   : 250=69.55%, 500=26.73%, 750=0.86%, 1000=0.43%  lat (msec)   : 2=0.47%, 4=1.36%, 10=0.60%, 20=0.01%  cpu          : usr=0.65%, sys=3.22%, ctx=33542, majf=0, minf=11  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     issued rwts: total=16771,16770,0,0 short=0,0,0,0 dropped=0,0,0,0     latency   : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs):   READ: bw=6708KiB/s (6869kB/s), 6708KiB/s-6708KiB/s (6869kB/s-6869kB/s), io=65.5MiB (68.7MB), run=10001-10001msec  WRITE: bw=6707KiB/s (6868kB/s), 6707KiB/s-6707KiB/s (6868kB/s-6868kB/s), io=65.5MiB (68.7MB), run=10001-10001msecDisk stats (read/write):  vda: ios=16626/16627, merge=0/0, ticks=5066/3686, in_queue=8753, util=93.53%[root@Centos8 fio-3.32]# \n\n参数解释iops ：磁盘的每秒读写次数，这个是随机读写考察的重点  bw   ：磁盘的吞吐量，这个是顺序读写考察的重点，类似于下载速度  avg  ：每个IO请求的平均相应时间io   ：总的输入输出量 runt ：总运行时间msec ：毫秒usec ：微秒lat (msec)：延迟(毫秒)-rw=randwrite：定义测试时的读写策略，可选值如下：随机读：randread，随机写：randwrite，顺序读： read，顺序写：write，混合随机读写：randrw0-ioengine=libaio：libaio指的是异步模式，如果是同步就要用sync。定义fio如何下发IO请求，通常有同步IO和异步IO：同步IO一次只能发出一个IO请求， 等待内核完成后才返回。这样对于单个线程IO队列深度总是小于1，但是可以透过多个线程并发执行来解决。通常会用16~32个线程同时工作把IO队列深度塞满。异步IO则通常使用libaio这样的方式一次提交一批IO 请求，然后等待一批的完成，减少交互的次 数，会更有效率-direct=1：定义是否使用direct IO，可选值如下：值为0，表示使用buffered IO；值为1，表示使用 direct IO-thread：使用pthread_create创建线程，另一种是fork创建进程。进程的开销比线程要大，一般都采用thread测试。–numjobs=1：定义测试的并发线程数-iodepth=64：定义测试时的IO队列深度，默认为1。此处定义的队列深度是指每个线程的队列深度， 如果有多个线程测试，意味着每个线程都是此处定义的队列深度。fio总的IO并发数 =iodepth * numjobs。-filename：定义测试文件（设备）的名称。此处选择文件，则代表测试文件系统的性能，例如：- filename=/opt/fiotest/fiotest.txt；此处选择设备名称，则代表测试裸盘的性能，例：-filename=/dev/vdb1。如果在已经分区、并创建文件系统，且已写入数据的磁盘上进行性能测试，请注意filename选择指定文件，以避免覆盖文件系统和原有数据。-size=100M：定义测试IO操作的数据量，若未指定runtime这类参数，fio会将指定大小的数据量全部 读/写完成，然后才停止测试。该参数的值，可以是带单位的数字，比如size=10G，表示读/写的数据量为10GB；也可是百分数，比如size=20%，表示读/写的数据量占该设备总文件的20%的空间。建议测试数据量为内存两倍大，尽量避免缓存影响。-name=job1：定义测试任务名称。-bs=4k：定义IO的块大小(block size)，单位是k、K、m和M等，默认IO块大小为4 KB。–output TestResult.log：日志输出到TestResult.log。-runtime：定义测试时间。如果未配置，则持续将size指定的文件大小，以每次bs值为分块大小读/ 写完。-group_reporting：定义测试结果显示模式，group_reporting 表示汇总每个进程的统计信息，而非以不同 job汇总展示信息。\n\n问题及解决方案\nfio: engine libaio not loadable\n\n在线yum install -y libaio-devel离线rpm -ivh \n\n\nhttps://blog.csdn.net/Q0717168/article/details/127480289\n\n参考链接\nhttps://git.kernel.dk/cgit/fio/\n\n\nhttps://blog.csdn.net/u012503639/article/details/125393328\n\n\nhttps://blog.csdn.net/BBJG_001/article/details/125025164\n\n\nhttp://t.zoukankan.com/hiyang-p-12764088.html\n\n\nhttps://blog.csdn.net/u012503639/article/details/125393328\n\n\nhttps://blog.csdn.net/u012503639/article/details/125393328\n\n\nhttp://t.zoukankan.com/dongdongwq-p-5390353.html\n\n","categories":["Linux开源工具"],"tags":["Fio"]},{"title":"Linux-bench","url":"/cmchtge8z0019negb7f3ear2h/","content":"下载安装[root@Centos8 lx]# git clone https://github.com/aquasecurity/linux-bench.git &#x27;linux-bench&#x27;...remote: Enumerating objects: 547, done.remote: Counting objects:   0% (1/130)...[root@Centos8 lx]# ll145336-rw-r--r-- 1 root root 148820241 9   7 00:18 go1.19.1.linux-amd64.tar.gzdrwxr-xr-x 2 root root       118 9  20 16:32 lineusedrwxr-xr-x 6 root root       174 9  20 13:20 linkbenchdrwxr-xr-x 6 root root       266 9  20 17:04 linux-benchdrwxr-xr-x 3 root root       117 9  16 15:00 yet-another-bench-script[root@Centos8 lx]# cd linux-bench/\n\n构建[root@Centos8 linux-bench]# go build -o linux-bench .go: downloading github.com/aquasecurity/bench-common v0.4.4go: downloading github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b...\n\n运行[root@Centos8 linux-bench]# ./linux-bench[INFO] 1 Initial Setup[INFO] 1.1 Filesystem Configuration[WARN] 1.1.1 Disable unused filesystems[FAIL] 1.1.1.1.a Ensure mounting of cramfs filesystems is disabled[PASS] 1.1.1.1.b Ensure mounting of cramfs filesystems is disabled== Summary ==81 checks PASS165 checks FAIL107 checks WARN0 checks INFO[root@Centos8 linux-bench]#\n","categories":["Linux开源工具"],"tags":["Linux-bench"]},{"title":"Locust","url":"/cmchtge90001dnegbegt8gmr8/","content":"Centos8安装确定python环境是否符合[root@Centos8 locust]# python3 -VPython 3.10.6[root@Centos8 locust]# \n\n安装locust[root@Centos8 lx]# cd locust[root@Centos8 locust]# pwd/opt/lx/locust[root@Centos8 locust]# python3 install locust==2.15.0\n\n确认是否安装成功[root@Centos8 locust]# locust -Vlocust 2.15.0[root@Centos8 locust]#\n\nWindows10安装确定python环境是否符合PS D:\\PycharmProjects\\pythonProject&gt; python -V Python 3.10.5PS D:\\PycharmProjects\\pythonProject&gt; pip install locust\n\n安装locustPS D:\\PycharmProjects\\pythonProject&gt; pip install locust\n\n确认是否安装成功PS D:\\PycharmProjects\\pythonProject&gt; locust -Vlocust 2.12.1PS D:\\PycharmProjects\\pythonProject&gt; \n\n服务端运行[root@Centos8 locust]# java -jar pinter.jar&lt;2022-09-22 19:17:18,165&gt;[ INFO] HV000001: Hibernate Validator 6.0.14.Final - org.hibernate.validator.internal.util.Version\n\n客户端运行PS D:\\PycharmProjects\\pythonProject\\locust&gt; java -jar pinter.jar\n","categories":["Linux开源工具"],"tags":["Locust"]},{"title":"OhMyZsh学习笔记","url":"/cmchtge91001gnegbbht1hlk1/","content":"安装sudo apt updatesudo apt install zshsudo apt install wget gitsh -c &quot;$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;chsh -s $(which zsh)\n\n插件命令自动提示wget http://mimosa-pudica.net/src/incr-0.2.zshmkdir ~/.oh-my-zsh/plugins/incrmv incr-0.2.zsh ~/.oh-my-zsh/plugins/increcho &#x27;source ~/.oh-my-zsh/plugins/incr/incr*.zsh&#x27; &gt;&gt; ~/.zshrcsource ~/.zshrc\n\nautojumpsudo apt install autojump\n\n将 autojump 添加到插件列表中，例如：\nvim ~/.zshrcplugins=(  git  autojump)source ~/.zshrc\n\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\n\n参考链接\nhttps://zhuanlan.zhihu.com/p/62501175\n\n","categories":["终端增强"],"tags":["OhMyZsh"]},{"title":"Tmux学习笔记","url":"/cmchtge9f003hnegb86ro39io/","content":"Tmux是什么?\nTmux是一个终端复用器（terminal multiplexer），属于常用的开发工具，学会了之后可以大大的提高工作效率。\n\n基本概念在使用tmux之前我们先了解关于tmux的几个名词：\n\nsession，会话（任务）\nwindows，窗口\npane，窗格\n\n\n关于session，很多人把session成为会话，但我觉得叫任务更适合一些。\n\n在普通的终端中，窗口和其中由于session（任务）而启动的进程是连在一起的，关闭窗口，session就结束了，session内部的进程也会终止，不管是否运行完。但是在具体使用中，我们希望当前的session隐藏起来，在终端中做其他事情，但是又不希望session及其进程被关闭。这样就需要用到tmux，对session进行解绑。之后再想继续出来这个session的时候，再次绑定就可以回到之前的工作状态。\n\n对于window可以理解为一个工作区，一个窗口。\n\n对于一个session，可以创建好几个window，对于每一个窗口，都可以将其分解为几个pane小窗格。所以，关于session、window、pane的关系是：\n[pane∈window]∈session\n安装# Ubuntu or Debiansudo apt-get install tmux# CentOS or Fedorasudo yum install tmux# Macbrew install tmux\n\nsession操作启动# 新建session，可以在terminal上输入tmux命令，会自动生成一个id为0的sessiontmux# 也可以在建立时显式地说明session的名字，这个名字可以用于解绑后快速的重新进入该session：tmux new -s your-session-name\n\n分离\n在tmux窗口中，按下ctrl+b d或者输入以下命令，就会将当前session与窗口分离，session转到后台执行：\n\ntmux detach\n\n退出\n如果你想退出该session，可以杀死session：\n\ntmux kill-session -t your-session-name\n\n绑定、解绑、切换session# 假设现在正处于session1，使用分离操作就是将session1进行解绑:tmux detach# 如果你想再次绑定session1，可以使用命令：tmux attach -t your-session-name# 切换到指定session：tmux switch -t your-session-name\n\n重命名sessiontmux rename-session -t old-session new-session\n\nwindow操作\n一个session可以有好几个window窗口。\n\n新建窗口tmux new-window# 新建一个指定名称的窗口tmux new-window -n your-window-name\n\n切换窗口\nctrl+b c: 创建一个新窗口（状态栏会显示多个窗口的信息）\nctrl+b p: 切换到上一个窗口（按照状态栏的顺序）\nctrl+b n: 切换到下一个窗口\nctrl+b w: 从列表中选择窗口（这个最好用）\n\n重命名窗口tmux rename-window -t old_name new_name\n\npane操作\ntmux可以将一个窗口分为几个窗格（pane），每个窗格运行不同的命令。\n\n划分窗格\n命令\n\n# 划分为上下两个窗格tmux split-window# 划分左右两个窗格tmux split-window -h\n\n\n快捷键\n\n左右划分：ctrl+b %上下划分：ctrl+b &quot;\n\n光标位置\n快捷键\n\nctrl+b arrow-key（方向键）\n\n\n命令\n\n# 当前窗格往上移tmux swap-pane -U# 当前窗格往下移tmux swap-pane -D\n\n关闭窗格\nctrl+d，记住如果只有一个窗格就是关闭window\n\n其他操作# 列出所有快捷键，及其对应的 Tmux 命令$ tmux list-keys# 列出所有 Tmux 命令及其参数$ tmux list-commands# 列出当前所有 Tmux 会话的信息$ tmux info# 重新加载当前的 Tmux 配置$ tmux source-file ~/.tmux.conf\n\ntmux上下翻屏\n使用快捷键ctrl+b [ ，就可以通过方向键上下移动使用PageUp和PageDown可以实现上下翻页\n\n引用\nhttps://blog.csdn.net/CSSDCC/article/details/121231906\n\n","categories":["终端增强"],"tags":["Tmux"]},{"title":"Docker学习笔记","url":"/cmchtge9g003inegb2p5peybu/","content":"Docker安装环境准备1、linux基础\n2、Cetnos7\n3、MobaXterm连接\n安装Docker环境查看# 系统内核[name@cetnos7 ~]$ uname -r3.10.0-1160.31.1.el7.x86_64[name@cetnos7 ~]$ uname -r3.10.0-1160.31.1.el7.x86_64\n\n# 系统版本[root@cetnos7 name]# cat /etc/os-releaseNAME=&quot;CentOS Linux&quot;VERSION=&quot;7 (Core)&quot;ID=&quot;centos&quot;ID_LIKE=&quot;rhel fedora&quot;VERSION_ID=&quot;7&quot;PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;ANSI_COLOR=&quot;0;31&quot;CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;HOME_URL=&quot;https://www.centos.org/&quot;BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;\n\n安装官方文档https://docs.docker.com/engine/install/centos/\n# 1、卸载旧的版本yum remove docker \\                  docker-client \\                  docker-client-latest \\                  docker-common \\                  docker-latest \\                  docker-latest-logrotate \\                  docker-logrotate \\                  docker-engine          # 2、需要的安装包yum install -y yum-utils# 3、设置镜像仓库yum-config-manager \\    --add-repo \\    https://download.docker.com/linux/centos/docker-ce.repo  yum-config-manager \\    --add-repo \\    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  # 更新软件包yum makecache fast# 4、安装docker相关内容yum install docker-ce docker-ce-cli containerd.io# 5、启动dockersystemctl start docker# 6、使用docker version验证是否成功\n\n\n# 7、hello-worlddocker run hello-world\n\n\n# 8、查看镜像[root@cetnos7 name]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   3 months ago   13.3kB\n\n卸载docker# 9、卸载依赖yum remove docker-ce docker-ce-cli containerd.io# 10、删除资源rm -rf /var/lib/dockerrm -rf /var/lib/containerd\n\n阿里云镜像加速sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://rojd6brn.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker\n\nDocker常用命令帮助命令docker version\t\t\t# 显示docker的版本信息docker info \t\t\t# 显示docker的系统信息，包括镜像和容器的数量docke 命令 --help\t\t\t# 帮助命令\n\n帮助文档地址 https://docs.docker.com/reference/\n镜像命令docker images查看所有本地主机上的镜像\n[root@cetnos7 docker]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   3 months ago   13.3kB# 解释REPOSITORY\t镜像的仓库源TAG\t\t\t镜像的标签IMAGE ID\t镜像的idCREATED\t\t镜像的创建时间SIZE\t\t镜像的大小# 可选项  -a, --all             Show all images (default hides intermediate images)      --digests         Show digests  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print images using a Go template      --no-trunc        Don&#x27;t truncate output  -q, --quiet           Only show image IDs\n\ndocker search搜索镜像\n[root@cetnos7 docker]# docker search mysqlNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   10999     [OK]mariadb                           MariaDB Server is a high performing open sou…   4165      [OK]mysql/mysql-server                Optimized MySQL Server Docker images. Create…   815                  [OK]percona                           Percona Server is a fork of the MySQL relati…   544       [OK]phpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   240       [OK]centos/mysql-57-centos7           MySQL 5.7 SQL database server                   88mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   86centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]bitnami/mysql                     Bitnami MySQL Docker Image                      52                   [OK]databack/mysql-backup             Back up mysql databases to... anywhere!         44deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]prom/mysqld-exporter                                                              39                   [OK]tutum/mysql                       Base docker image to run a MySQL database se…   35linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   30schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   29                   [OK]centos/mysql-56-centos7           MySQL 5.6 SQL database server                   20circleci/mysql                    MySQL is a widely used, open-source relation…   20mysql/mysql-router                MySQL Router provides transparent routing be…   19arey/mysql-client                 Run a MySQL client from a docker container      17                   [OK]fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   13                   [OK]openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3ansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                2                    [OK]jelastic/mysql                    An image of the MySQL database server mainta…   1widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK]# 可选项  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print search using a Go template      --limit int       Max number of search results (default 25)      --no-trunc        Don&#x27;t truncate output[root@cetnos7 docker]# docker search mysql --filter=STARS=3000NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql     MySQL is a widely used, open-source relation…   10999     [OK]mariadb   MariaDB Server is a high performing open sou…   4165      [OK]\n\ndocker pull下载镜像\n# 下载镜像 docker pull 镜像名[:tag][root@cetnos7 docker]# docker pull mysqlUsing default tag: latest\t# 如果不写tag，默认就是latest最新版latest: Pulling from library/mysql69692152171a: Pull complete\t\t# 分层下载，docker image的核心，联合文件系统1651b0be3df3: Pull complete951da7386bc8: Pull complete0f86c95aa242: Pull complete37ba2d8bd4fe: Pull complete6d278bb05e94: Pull complete497efbd93a3e: Pull completef7fddf10c2c2: Pull complete16415d159dfb: Pull complete0e530ffc6b73: Pull completeb0a4a1a77178: Pull completecd90f92aa9ef: Pull completeDigest: sha256:d50098d7fcb25b1fcb24e2d3247cae3fc55815d64fec640dc395840f8fa80969\t\t# 签名Status: Downloaded newer image for mysql:latestdocker.io/library/mysql:latest\t\t# 真实地址# 等价于它docker pull mysqldocker pull docker.io/library/mysql:latest# 指定版本下载[root@cetnos7 ~]# docker pull mysql:5.75.7: Pulling from library/mysql69692152171a: Already exists1651b0be3df3: Already exists951da7386bc8: Already exists0f86c95aa242: Already exists37ba2d8bd4fe: Already exists6d278bb05e94: Already exists497efbd93a3e: Already existsa023ae82eef5: Pull completee76c35f20ee7: Pull completee887524d2ef9: Pull completeccb65627e1c3: Pull completeDigest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21faStatus: Downloaded newer image for mysql:5.7docker.io/library/mysql:5.7\n\ndocker rmi删除镜像\n[root@cetnos7 docker]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEtomcat        latest    c43a65faae57   4 weeks ago    667MBmysql         5.7       2c9028880e58   5 weeks ago    447MBmysql         latest    c0cdc95609f1   5 weeks ago    556MBhello-world   latest    d1165f221234   3 months ago   13.3kB# [root@cetnos7 docker]# docker rmi -f 容器ID\t\t# 删除指定容器# [root@cetnos7 docker]# docker rmi -f 容器ID 容器ID 容器ID\t\t# 删除多个容器# [root@cetnos7 docker]# docker rmi -f $(docker images -aq)\t\t# 删除全部容器[root@cetnos7 docker]# docker rmi -f 2c9028880e58\t\t# 删除指定容器Untagged: mysql:5.7Untagged: mysql@sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21faDeleted: sha256:2c9028880e5814e8923c278d7e2059f9066d56608a21cd3f83a01e3337bacd68Deleted: sha256:c49c5c776f1bc87cdfff451ef39ce16a1ef45829e10203f4d9a153a6889ec15eDeleted: sha256:8345316eca77700e62470611446529113579712a787d356e5c8656a41c244aeeDeleted: sha256:8ae51b87111404bd3e3bde4115ea2fe3fd2bb2cf67158460423c361a24df156bDeleted: sha256:9d5afda6f6dcf8dd59aef5c02099f1d3b3b0c9ae4f2bb7a61627613e8cdfe562\n\n容器命令&#x3D;&#x3D;说明&#x3D;&#x3D;：我们有了镜像才可以创建容器，linux，下载一个cetnos镜像来测试学习\ndocker pull cetnos\n\n新建容器并启动docker run [可选参数] image# 参数说明--name=&quot;Name&quot;\t容器名字 tomcat01 tomcat02 用来区分容器-d\t\t\t\t后台方式运行-it\t\t\t\t使用交互方式运行，进入容器查看内容-p\t\t\t\t指定容器端口 -p 8080:8080\t-p\tip:主机端口\t-p\t主机端口:容器端口（常用）\t-p\t容器端口\t容器端口-P\t\t\t\t随机指定端口# 测试，启动并进入容器[root@cetnos7 docker]# docker run -it centos /bin/bash[root@88d08d3e888b /]# ls\t\t# 查看容器的centos，基础版本，很多命令都是不完善的bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var# 从容器中退回主机[root@88d08d3e888b /]# exitexit[root@cetnos7 docker]# lsdaemon.json  key.json[root@cetnos7 docker]# cd ../[root@cetnos7 etc]# cd ../[root@cetnos7 /]# lsbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n\n列出所有运行的容器# docker ps\t\t# 列出当前正在运行的容器\t-a\t\t\t# 列出当前正在运行的容器+历史运行过的容器\t-q\t\t\t# 只显示容器的编号\t-n=?\t\t# 显示最近创建的容器[root@cetnos7 /]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES[root@cetnos7 /]# docker ps -aCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS                       PORTS     NAMES88d08d3e888b   centos         &quot;/bin/bash&quot;              5 minutes ago   Exited (130) 3 minutes ago             thirsty_galileoa11f1465cda9   centos         &quot;/bin/bash --name=ce…&quot;   6 minutes ago   Exited (2) 6 minutes ago               mystifying_poincare89e468b92efe   d1165f221234   &quot;/hello&quot;                 15 hours ago    Exited (0) 15 hours ago                hungry_euclidea0927bcd5bd   d1165f221234   &quot;/hello&quot;                 15 hours ago    Exited (0) 15 hours ago                heuristic_bhaskara24251067d1b7   d1165f221234   &quot;/hello&quot;                 22 hours ago    Exited (0) 22 hours ago                laughing_wescoffe49b069aabc4   d1165f221234   &quot;/hello&quot;                 35 hours ago    Exited (0) 35 hours ago                keen_wiles[root@cetnos7 /]# docker ps -qa88d08d3e888ba11f1465cda989e468b92efeea0927bcd5bd24251067d1b7e49b069aabc4[root@cetnos7 /]# docker ps -a -n=1CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                       PORTS     NAMES88d08d3e888b   centos    &quot;/bin/bash&quot;   10 minutes ago   Exited (130) 8 minutes ago             thirsty_galileo[root@cetnos7 /]# docker ps -a -n=2CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                       PORTS     NAMES88d08d3e888b   centos    &quot;/bin/bash&quot;              10 minutes ago   Exited (130) 8 minutes ago             thirsty_galileoa11f1465cda9   centos    &quot;/bin/bash --name=ce…&quot;   11 minutes ago   Exited (2) 11 minutes ago              mystifying_poincare\n\n退出容器exit\t\t\t# 容器停止并退出Ctrl + P + Q\t# 容器不停止退出\n\n删除容器docker rm 容器id \t\t\t\t\t# 删除指定的容器，不能删除正在运行的，强制删除需要rm -fdocker rm -f $(docker ps -aq)\t # 删除所有的容器docker ps -a -q | xargs docker rm # 删除所有容器[root@cetnos7 /]# docker ps -aq88d08d3e888ba11f1465cda989e468b92efeea0927bcd5bd24251067d1b7e49b069aabc4[root@cetnos7 /]# docker rm 88d08d3e888b88d08d3e888b[root@cetnos7 /]# docker ps -aqa11f1465cda989e468b92efeea0927bcd5bd24251067d1b7e49b069aabc4[root@cetnos7 /]# docker rm -f $(docker ps -aq)a11f1465cda989e468b92efeea0927bcd5bd24251067d1b7e49b069aabc4[root@cetnos7 /]# docker ps -aq[root@cetnos7 /]#\n\n启动和停止容器的操作docker start 容器id\t\t# 启动容器docker restart 容器id\t\t# 重启容器docker stop 容器id\t\t# 停止当前正在运行容器docker kill 容器id\t\t# 强制停止当前容器\n\n常用其他命令后台启动容器# 命令 docker run -d 镜像名[root@cetnos7 /]# docker run -d centos1c58ce5ef8c38480f280be84a071083c8515d2aab90d5796078160fe22434e52[root@cetnos7 /]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES[root@cetnos7 /]## 问题 docker ps 发现centos停止了# 常见的坑：docker 容器使用后台运行就必须要有一个前台进程，docker发现没有应用，就会自动停止# nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了\n\n查看日志[root@cetnos7 /]# docker logs --helpUsage:  docker logs [OPTIONS] CONTAINERFetch the logs of a containerOptions:      --details        Show extra details provided to logs  -f, --follow         Follow log output      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)  -t, --timestamps     Show timestamps\t# 时间戳      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)# 编写脚本[root@cetnos7 /]# docker run -d centos /bin/sh -c &quot;while true;do echo sun1;sleep 1;done&quot;a01aa4045648b5d9c22e88038eea9117e718fde7281ed48af5ce81e23e7c528e# 查看容器[root@cetnos7 /]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMESa01aa4045648   centos    &quot;/bin/sh -c &#x27;while t…&quot;   5 seconds ago   Up 4 seconds             festive_montalcini# 显示日志# -tf \t\t\t\t# 显示日志# --tail number \t# 显示日志条数[root@cetnos7 /]# docker logs -tf --tail 10 a01aa40456482021-06-17T02:17:13.845995409Z sun12021-06-17T02:17:14.849198894Z sun12021-06-17T02:17:15.850829523Z sun12021-06-17T02:17:16.853976336Z sun12021-06-17T02:17:17.857956862Z sun12021-06-17T02:17:18.860741444Z sun12021-06-17T02:17:19.864721492Z sun12021-06-17T02:17:20.869478161Z sun12021-06-17T02:17:21.871854909Z sun12021-06-17T02:17:22.885784515Z sun12021-06-17T02:17:23.889363112Z sun12021-06-17T02:17:24.891500188Z sun12021-06-17T02:17:25.893458493Z sun12021-06-17T02:17:26.895170299Z sun1^C[root@cetnos7 /]#docker logs -f -t --tail 容器\n\n查看容器中的进程信息# 命令 docker inspect 容器ID# docker top 容器id[root@cetnos7 /]# docker top a01aa4045648UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                34921               34901               0                   10:16               ?                   00:00:00            /bin/sh -c while true;do echo sun1;sleep 1;done# UID 用户ID # PID 父ID # PPID 进程ID\n\n查看镜像的元数据[root@cetnos7 ~]# docker inspect --helpUsage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]Return low-level information on Docker objectsOptions:  -f, --format string   Format the output using the given Go template  -s, --size            Display total file sizes if the type is container      --type string     Return JSON for specified type[root@cetnos7 ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMESa01aa4045648   centos    &quot;/bin/sh -c &#x27;while t…&quot;   22 hours ago   Up 22 hours             festive_montalcini[root@cetnos7 ~]# docker inspect a01aa4045648[    &#123;        &quot;Id&quot;: &quot;a01aa4045648b5d9c22e88038eea9117e718fde7281ed48af5ce81e23e7c528e&quot;,        &quot;Created&quot;: &quot;2021-06-17T02:16:20.011138636Z&quot;,        &quot;Path&quot;: &quot;/bin/sh&quot;,        &quot;Args&quot;: [            &quot;-c&quot;,            &quot;while true;do echo sun1;sleep 1;done&quot;        ],        &quot;State&quot;: &#123;            &quot;Status&quot;: &quot;running&quot;,            &quot;Running&quot;: true,            &quot;Paused&quot;: false,            &quot;Restarting&quot;: false,            &quot;OOMKilled&quot;: false,            &quot;Dead&quot;: false,            &quot;Pid&quot;: 34921,            &quot;ExitCode&quot;: 0,            &quot;Error&quot;: &quot;&quot;,            &quot;StartedAt&quot;: &quot;2021-06-17T02:16:20.531700464Z&quot;,            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;,        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/a01aa4045648b5d9c22e88038eea9117e718fde7281ed48af5ce81e23e7c528e/resolv.conf&quot;,        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/a01aa4045648b5d9c22e88038eea9117e718fde7281ed48af5ce81e23e7c528e/hostname&quot;,        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/a01aa4045648b5d9c22e88038eea9117e718fde7281ed48af5ce81e23e7c528e/hosts&quot;,        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/a01aa4045648b5d9c22e88038eea9117e718fde7281ed48af5ce81e23e7c528e/a01aa4045648b5d9c22e88038eea9117e718fde7281ed48af5ce81e23e7c528e-json.log&quot;,        &quot;Name&quot;: &quot;/festive_montalcini&quot;,        &quot;RestartCount&quot;: 0,        &quot;Driver&quot;: &quot;overlay2&quot;,        &quot;Platform&quot;: &quot;linux&quot;,        &quot;MountLabel&quot;: &quot;&quot;,        &quot;ProcessLabel&quot;: &quot;&quot;,        &quot;AppArmorProfile&quot;: &quot;&quot;,        &quot;ExecIDs&quot;: null,        &quot;HostConfig&quot;: &#123;            &quot;Binds&quot;: null,            &quot;ContainerIDFile&quot;: &quot;&quot;,            &quot;LogConfig&quot;: &#123;                &quot;Type&quot;: &quot;json-file&quot;,                &quot;Config&quot;: &#123;&#125;            &#125;,            &quot;NetworkMode&quot;: &quot;default&quot;,            &quot;PortBindings&quot;: &#123;&#125;,            &quot;RestartPolicy&quot;: &#123;                &quot;Name&quot;: &quot;no&quot;,                &quot;MaximumRetryCount&quot;: 0            &#125;,            &quot;AutoRemove&quot;: false,            &quot;VolumeDriver&quot;: &quot;&quot;,            &quot;VolumesFrom&quot;: null,            &quot;CapAdd&quot;: null,            &quot;CapDrop&quot;: null,            &quot;CgroupnsMode&quot;: &quot;host&quot;,            &quot;Dns&quot;: [],            &quot;DnsOptions&quot;: [],            &quot;DnsSearch&quot;: [],            &quot;ExtraHosts&quot;: null,            &quot;GroupAdd&quot;: null,            &quot;IpcMode&quot;: &quot;private&quot;,            &quot;Cgroup&quot;: &quot;&quot;,            &quot;Links&quot;: null,            &quot;OomScoreAdj&quot;: 0,            &quot;PidMode&quot;: &quot;&quot;,            &quot;Privileged&quot;: false,            &quot;PublishAllPorts&quot;: false,            &quot;ReadonlyRootfs&quot;: false,            &quot;SecurityOpt&quot;: null,            &quot;UTSMode&quot;: &quot;&quot;,            &quot;UsernsMode&quot;: &quot;&quot;,            &quot;ShmSize&quot;: 67108864,            &quot;Runtime&quot;: &quot;runc&quot;,            &quot;ConsoleSize&quot;: [                0,                0            ],            &quot;Isolation&quot;: &quot;&quot;,            &quot;CpuShares&quot;: 0,            &quot;Memory&quot;: 0,            &quot;NanoCpus&quot;: 0,            &quot;CgroupParent&quot;: &quot;&quot;,            &quot;BlkioWeight&quot;: 0,            &quot;BlkioWeightDevice&quot;: [],            &quot;BlkioDeviceReadBps&quot;: null,            &quot;BlkioDeviceWriteBps&quot;: null,            &quot;BlkioDeviceReadIOps&quot;: null,            &quot;BlkioDeviceWriteIOps&quot;: null,            &quot;CpuPeriod&quot;: 0,            &quot;CpuQuota&quot;: 0,            &quot;CpuRealtimePeriod&quot;: 0,            &quot;CpuRealtimeRuntime&quot;: 0,            &quot;CpusetCpus&quot;: &quot;&quot;,            &quot;CpusetMems&quot;: &quot;&quot;,            &quot;Devices&quot;: [],            &quot;DeviceCgroupRules&quot;: null,            &quot;DeviceRequests&quot;: null,            &quot;KernelMemory&quot;: 0,            &quot;KernelMemoryTCP&quot;: 0,            &quot;MemoryReservation&quot;: 0,            &quot;MemorySwap&quot;: 0,            &quot;MemorySwappiness&quot;: null,            &quot;OomKillDisable&quot;: false,            &quot;PidsLimit&quot;: null,            &quot;Ulimits&quot;: null,            &quot;CpuCount&quot;: 0,            &quot;CpuPercent&quot;: 0,            &quot;IOMaximumIOps&quot;: 0,            &quot;IOMaximumBandwidth&quot;: 0,            &quot;MaskedPaths&quot;: [                &quot;/proc/asound&quot;,                &quot;/proc/acpi&quot;,                &quot;/proc/kcore&quot;,                &quot;/proc/keys&quot;,                &quot;/proc/latency_stats&quot;,                &quot;/proc/timer_list&quot;,                &quot;/proc/timer_stats&quot;,                &quot;/proc/sched_debug&quot;,                &quot;/proc/scsi&quot;,                &quot;/sys/firmware&quot;            ],            &quot;ReadonlyPaths&quot;: [                &quot;/proc/bus&quot;,                &quot;/proc/fs&quot;,                &quot;/proc/irq&quot;,                &quot;/proc/sys&quot;,                &quot;/proc/sysrq-trigger&quot;            ]        &#125;,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/595aafe31004009a057801602665f36723c7621a6d03c0226e24bcb32daf3f74-init/diff:/var/lib/docker/overlay2/dbe0863967eda16db79356c5aa892895ef73d0afee2ecec4b52c209393f16103/diff&quot;,                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/595aafe31004009a057801602665f36723c7621a6d03c0226e24bcb32daf3f74/merged&quot;,                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/595aafe31004009a057801602665f36723c7621a6d03c0226e24bcb32daf3f74/diff&quot;,                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/595aafe31004009a057801602665f36723c7621a6d03c0226e24bcb32daf3f74/work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        &quot;Mounts&quot;: [],        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;a01aa4045648&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;            ],            &quot;Cmd&quot;: [                &quot;/bin/sh&quot;,                &quot;-c&quot;,                &quot;while true;do echo sun1;sleep 1;done&quot;            ],            &quot;Image&quot;: &quot;centos&quot;,            &quot;Volumes&quot;: null,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: null,            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;            &#125;        &#125;,        &quot;NetworkSettings&quot;: &#123;            &quot;Bridge&quot;: &quot;&quot;,            &quot;SandboxID&quot;: &quot;0ac4d097a0a96512343c9f0ab1d35891554162b4f52c3aa738b331bdad059560&quot;,            &quot;HairpinMode&quot;: false,            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,            &quot;LinkLocalIPv6PrefixLen&quot;: 0,            &quot;Ports&quot;: &#123;&#125;,            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/0ac4d097a0a9&quot;,            &quot;SecondaryIPAddresses&quot;: null,            &quot;SecondaryIPv6Addresses&quot;: null,            &quot;EndpointID&quot;: &quot;6381bb14df541826bde3d8464cb5c3ee733788a41e1e03cca6625435ab3aa2d3&quot;,            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,            &quot;GlobalIPv6Address&quot;: &quot;&quot;,            &quot;GlobalIPv6PrefixLen&quot;: 0,            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,            &quot;IPPrefixLen&quot;: 16,            &quot;IPv6Gateway&quot;: &quot;&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,            &quot;Networks&quot;: &#123;                &quot;bridge&quot;: &#123;                    &quot;IPAMConfig&quot;: null,                    &quot;Links&quot;: null,                    &quot;Aliases&quot;: null,                    &quot;NetworkID&quot;: &quot;eea50bf7ae4003415c3271a588d18d786750f08cefd87476f11d22e06d38c433&quot;,                    &quot;EndpointID&quot;: &quot;6381bb14df541826bde3d8464cb5c3ee733788a41e1e03cca6625435ab3aa2d3&quot;,                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,                    &quot;DriverOpts&quot;: null                &#125;            &#125;        &#125;    &#125;][root@cetnos7 ~]#\n\n进入当前正在运行的容器# 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置# 方式一 以交互方式进入后台docker exec -it 容器ID /bin/bash# 测试[root@cetnos7 ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMESa01aa4045648   centos    &quot;/bin/sh -c &#x27;while t…&quot;   22 hours ago   Up 22 hours             festive_montalcini[root@cetnos7 ~]# docker exec -it a01aa4045648 /bin/bash[root@a01aa4045648 /]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@a01aa4045648 /]## 方式二docker attach 容器ID[root@cetnos7 ~]# docker attach --helpUsage:  docker attach [OPTIONS] CONTAINERAttach local standard input, output, and error streams to a running containerOptions:      --detach-keys string   Override the key sequence for detaching a container      --no-stdin             Do not attach STDIN      --sig-proxy            Proxy all received signals to the process (default true)# 测试[root@cetnos7 ~]# docker attach a01aa4045648sun1sun1# 进入正在执行的当前代码# docker exec\t\t# 进入容器后打开一个新的终端，可以在里面操作# docker attach \t# 进入容器正在执行的终端，不会启动新的进程\n\n从容器内拷贝文件到主机上docker cp 容器ID:容器内路径 目的地路径# 查看主机现有文件[root@centos7 home]# ll总用量 4drwx------. 17 name name 4096 6月  18 09:30 name-rw-r--r--.  1 root    root       0 6月  18 10:51 sun.java# 进入容器[root@centos7 home]# docker attach 6d8882478a04[root@6d8882478a04 /]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@6d8882478a04 /]# cd home[root@6d8882478a04 home]# ls# 容器内创建文件[root@6d8882478a04 home]# touch test.java[root@6d8882478a04 home]# lstest.java[root@6d8882478a04 home]# exitexit[root@centos7 home]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES[root@centos7 home]# docker ps -aCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS                       PORTS     NAMES6d8882478a04   centos    &quot;/bin/bash&quot;              4 minutes ago   Exited (0) 6 seconds ago               inspiring_taussiga01aa4045648   centos    &quot;/bin/sh -c &#x27;while t…&quot;   25 hours ago    Exited (255) 4 minutes ago             festive_montalcini1c58ce5ef8c3   centos    &quot;/bin/bash&quot;              25 hours ago    Exited (0) 25 hours ago                mystifying_cannon# 从容器内复制文件到主机上[root@centos7 home]# docker cp 6d8882478a04:/home/test.java /home[root@centos7 home]# lsname  sun.java  test.java[root@centos7 home]#\n\n小结\nattach\t\t\t# 当前shell下attach连接到指定镜像环境中build\t\t\t# 通过Dockerfile定制镜像commit\t\t\t# 提交当前容器为新的镜像cp\t\t\t\t# 从容器中拷贝文件到宿主机中create\t\t\t# 创建一个新的容器，同run但不启动容器diff\t\t\t# 查看docker容器话events\t\t\t# 从docker服务获取容器实时事件export\t\t\t# 到处容器的内容作为一个tar归档文件对应importhistory\t\t\t# 站是一个镜像形成历史images\t\t\t# 列出系统当前镜像info\t\t\t# 显示系统相关信息inspect\t\t\t# 查看容器详细信息kill\t\t\t# kill指定docker容器load\t\t\t# 从一个tar包中加载一个镜像对应savelogin\t\t\t# 注册或登录一个dockers源服务器logout\t\t\t# 从当前Dockers registry退出logs\t\t\t# 输出当前容器日志信息port\t\t\t# 查看映射端口对应容器内部源端口pause\t\t\t# 暂停容器ps\t\t\t\t# 列出容器列表pull\t\t\t# 从docker镜像服务器拉取指定镜像push\t\t\t# 推送指定镜像或者库镜像至docker源服务器restart\t\t\t# 重启运行的容器rm\t\t\t\t# 移除一个或多个容器rmi\t\t\t\t# 移除一个或多个镜像[无容器使用该镜像才可以删除，否则需删除相关内容]run\t\t\t\t# 创建一个新的荣光其并运行一个命令save\t\t\t# 保存一个镜像为一个tar包[对应load]search\t\t\t# 在docker hub中搜索镜像start\t\t\t# 启动容器stop\t\t\t# 停止容器tag\t\t\t\t# 给源中镜像打标签top\t\t\t\t# 查看容器中运行的进程信息unpause\t\t\t# 取消暂停容器version\t\t\t# 查看docker版本号wait\t\t\t# 截取容器停止时的退出状态值\n\n练习Nginx# 1、搜索镜像[root@centos7 ~]# docker search nginxNAME                               DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDnginx                              Official build of Nginx.                        15026     [OK]jwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   2038                 [OK]richarvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   814                  [OK]jc21/nginx-proxy-manager           Docker container for managing Nginx proxy ho…   200linuxserver/nginx                  An Nginx container, brought to you by LinuxS…   147tiangolo/nginx-rtmp                Docker image with Nginx using the nginx-rtmp…   130                  [OK]jlesage/nginx-proxy-manager        Docker container for Nginx Proxy Manager        119                  [OK]alfg/nginx-rtmp                    NGINX, nginx-rtmp-module and FFmpeg from sou…   99                   [OK]bitnami/nginx                      Bitnami nginx Docker Image                      98                   [OK]jasonrivers/nginx-rtmp             Docker images to host RTMP streams using NGI…   90                   [OK]nginxdemos/hello                   NGINX webserver that serves a simple page co…   70                   [OK]privatebin/nginx-fpm-alpine        PrivateBin running on an Nginx, php-fpm &amp; Al…   55                   [OK]nginx/nginx-ingress                NGINX and  NGINX Plus Ingress Controllers fo…   55nginxinc/nginx-unprivileged        Unprivileged NGINX Dockerfiles                  38staticfloat/nginx-certbot          Opinionated setup for automatic TLS certs lo…   23                   [OK]schmunk42/nginx-redirect           A very simple container to redirect HTTP tra…   19                   [OK]nginx/nginx-prometheus-exporter    NGINX Prometheus Exporter for NGINX and NGIN…   18centos/nginx-112-centos7           Platform for running nginx 1.12 or building …   15centos/nginx-18-centos7            Platform for running nginx 1.8 or building n…   13raulr/nginx-wordpress              Nginx front-end for the official wordpress:f…   13                   [OK]bitwarden/nginx                    The Bitwarden nginx web server acting as a r…   11bitnami/nginx-ingress-controller   Bitnami Docker Image for NGINX Ingress Contr…   9                    [OK]mailu/nginx                        Mailu nginx frontend                            8                    [OK]ansibleplaybookbundle/nginx-apb    An APB to deploy NGINX                          2                    [OK]wodby/nginx                        Generic nginx                                   1                    [OK]# 2、拉取镜像[root@centos7 ~]# docker pull nginxUsing default tag: latestlatest: Pulling from library/nginx69692152171a: Pull complete30afc0b18f67: Pull complete596b1d696923: Pull completefebe5bd23e98: Pull complete8283eee92e2f: Pull complete351ad75a6cfa: Pull completeDigest: sha256:6d75c99af15565a301e48297fa2d121e15d80ad526f8369c526324f0f7ccb750Status: Downloaded newer image for nginx:latestdocker.io/library/nginx:latest# 3、查看镜像[root@centos7 ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED        SIZEnginx        latest    d1a364dc548d   3 weeks ago    133MBcentos       latest    300e315adb2f   6 months ago   209MB# 4、启动镜像# -d 后台运行# --name 运行镜像别名# -p 宿主机端口：容器端口 联通宿主机还有容器对应的端口[root@centos7 ~]# docker run -d --name nginx01 -p 8080:80 nginxbc781c453438558d384b5b8977862dc75c53889addbe69f0080345cf7220e3b4[root@centos7 ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMESbc781c453438   nginx     &quot;/docker-entrypoint.…&quot;   6 seconds ago   Up 4 seconds   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   nginx01# 5、测试[root@centos7 ~]# curl localhost:8080&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt;    body &#123;        width: 35em;        margin: 0 auto;        font-family: Tahoma, Verdana, Arial, sans-serif;    &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;# 6、进入容器[root@centos7 ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMESbc781c453438   nginx     &quot;/docker-entrypoint.…&quot;   11 minutes ago   Up 11 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   nginx01[root@centos7 ~]# docker exec -it nginx01 /bin/bashroot@bc781c453438:/# whereis nginxnginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginxroot@bc781c453438:/# cd /etc/nginxroot@bc781c453438:/etc/nginx# lsconf.d  fastcgi_params  mime.types  modules  nginx.conf  scgi_params  uwsgi_paramsroot@bc781c453438:/etc/nginx## 7、从容器中退出root@bc781c453438:/etc/nginx# exitexit[root@centos7 ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMESbc781c453438   nginx     &quot;/docker-entrypoint.…&quot;   15 minutes ago   Up 15 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   nginx01# 8、停止容器[root@centos7 ~]# docker stop bc781c453438bc781c453438[root@centos7 ~]#\n\n\n端口暴露的概念\n\nTomcat# 官方使用# --rm 用完即删除 适合测试环境[root@centos7 ~]# docker run -it --rm tomcat:9.0Unable to find image &#x27;tomcat:9.0&#x27; locally9.0: Pulling from library/tomcatd960726af2be: Pull completee8d62473a22d: Pull complete8962bc0fad55: Pull complete65d943ee54c1: Pull completeda20b77f10ac: Pull complete8669a096f083: Pull completee0c0a5e9ce88: Pull completef7f46169d747: Pull complete215575e3a745: Pull complete6b282851d654: Pull completeDigest: sha256:9f502a5c7bafd4e1953dba4e77f9347c9211f987902ab8668a34997178f9bcd0Status: Downloaded newer image for tomcat:9.0Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/local/openjdk-11Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarUsing CATALINA_OPTS:NOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED19-Jun-2021 02:06:50.472 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version name:   Apache Tomcat/9.0.4819-Jun-2021 02:06:50.483 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Jun 10 2021 09:22:01 UTC19-Jun-2021 02:06:50.483 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version number: 9.0.48.019-Jun-2021 02:06:50.483 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux19-Jun-2021 02:06:50.484 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-1160.31.1.el7.x86_6419-Jun-2021 02:06:50.484 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd6419-Jun-2021 02:06:50.484 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-1119-Jun-2021 02:06:50.484 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           11.0.11+919-Jun-2021 02:06:50.484 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation19-Jun-2021 02:06:50.484 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat19-Jun-2021 02:06:50.484 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat19-Jun-2021 02:06:50.494 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.base/java.lang=ALL-UNNAMED19-Jun-2021 02:06:50.494 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.base/java.io=ALL-UNNAMED19-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.base/java.util=ALL-UNNAMED19-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.base/java.util.concurrent=ALL-UNNAMED19-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED19-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties19-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager19-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=204819-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources19-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=002719-Jun-2021 02:06:50.495 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=19-Jun-2021 02:06:50.496 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat19-Jun-2021 02:06:50.496 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat19-Jun-2021 02:06:50.498 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp19-Jun-2021 02:06:50.508 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded Apache Tomcat Native library [1.2.30] using APR version [1.6.5].19-Jun-2021 02:06:50.508 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].19-Jun-2021 02:06:50.508 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]19-Jun-2021 02:06:50.521 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.1d  10 Sep 2019]19-Jun-2021 02:06:51.333 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;http-nio-8080&quot;]19-Jun-2021 02:06:51.400 INFO [main] org.apache.catalina.startup.Catalina.load Server initialization in [1396] milliseconds19-Jun-2021 02:06:51.534 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]19-Jun-2021 02:06:51.534 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet engine: [Apache Tomcat/9.0.48]19-Jun-2021 02:06:51.560 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-nio-8080&quot;]19-Jun-2021 02:06:51.606 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in [206] milliseconds^C19-Jun-2021 02:07:34.809 INFO [Thread-2] org.apache.coyote.AbstractProtocol.pause Pausing ProtocolHandler [&quot;http-nio-8080&quot;]19-Jun-2021 02:07:34.828 INFO [Thread-2] org.apache.catalina.core.StandardService.stopInternal Stopping service [Catalina]19-Jun-2021 02:07:34.838 INFO [Thread-2] org.apache.coyote.AbstractProtocol.stop Stopping ProtocolHandler [&quot;http-nio-8080&quot;]19-Jun-2021 02:07:34.877 INFO [Thread-2] org.apache.coyote.AbstractProtocol.destroy Destroying ProtocolHandler [&quot;http-nio-8080&quot;][root@centos7 ~]# ^C# 查找运行中容器[root@centos7 ~]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES[root@centos7 ~]# docker ps -aCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                        PORTS     NAMESbc781c453438   nginx     &quot;/docker-entrypoint.…&quot;   29 minutes ago   Exited (137) 13 minutes ago             nginx016d8882478a04   centos    &quot;/bin/bash&quot;              23 hours ago     Exited (0) 23 hours ago                 inspiring_taussiga01aa4045648   centos    &quot;/bin/sh -c &#x27;while t…&quot;   2 days ago       Exited (255) 23 hours ago               festive_montalcini1c58ce5ef8c3   centos    &quot;/bin/bash&quot;              2 days ago       Exited (0) 2 days ago                   mystifying_cannon[root@centos7 ~]## 1、下载镜像[root@centos7 ~]# docker pull tomcatUsing default tag: latestlatest: Pulling from library/tomcatDigest: sha256:9f502a5c7bafd4e1953dba4e77f9347c9211f987902ab8668a34997178f9bcd0Status: Downloaded newer image for tomcat:latestdocker.io/library/tomcat:latest[root@centos7 ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED        SIZEtomcat       9.0       5505f7218e4d   2 days ago     667MBtomcat       latest    5505f7218e4d   2 days ago     667MBnginx        latest    d1a364dc548d   3 weeks ago    133MBcentos       latest    300e315adb2f   6 months ago   209MB# 2、启动容器[root@centos7 ~]# docker run -d -p 3355:8080 --name tomcat01 tomcatbb20b849a7ce6719ae9f6e6278d97fc2eeb43c3fceb1a22f8fabe649f3b20efa[root@centos7 ~]## 3、测试访问没有问题# 4、进入容器[root@centos7 ~]# docker exec -it tomcat01 /bin/basroot@bb20b849a7ce:/usr/local/tomcat# llbash: ll: command not foundroot@bb20b849a7ce:/usr/local/tomcat# lsBUILDING.txt  CONTRIBUTING.md  LICENSE  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  workroot@bb20b849a7ce:/usr/local/tomcat## 5、发现问题，Tomcat被阉割，没有linux命令，webapps# 原因是阿里云镜像最小安装删除不必要东西root@bb20b849a7ce:/usr/local/tomcat# lsBUILDING.txt  CONTRIBUTING.md  LICENSE  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  workroot@bb20b849a7ce:/usr/local/tomcat# cd webappsroot@bb20b849a7ce:/usr/local/tomcat/webapps# lsroot@bb20b849a7ce:/usr/local/tomcat/webapps# cd ..root@bb20b849a7ce:/usr/local/tomcat# cp -r webapps.dist/* webappsroot@bb20b849a7ce:/usr/local/tomcat# cd webappsroot@bb20b849a7ce:/usr/local/tomcat/webapps# lsROOT  docs  examples  host-manager  managerroot@bb20b849a7ce:/usr/local/tomcat/webapps#\n\n\nEs+Kibana# ElasticSearch 暴露端口太多# ElasticSearch 十分耗内存# ElasticSearch 的数据一般需要放置到安全目录？挂载# --net somenetwork 网络配置docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2# 启动了，Linux变卡，docker stats 查看内存CPU状态[root@centos7 ~]#docker statsCONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT    MEM %     NET I/O     BLOCK I/O        PIDS575e2e354c4a   elasticsearch   0.34%     1005MiB / 1.777GiB   55.23%    656B / 0B   1.53GB / 131MB   41# 测试是否成功[root@centos7 ~]# curl localhost:9200&#123;  &quot;name&quot; : &quot;575e2e354c4a&quot;,  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,  &quot;cluster_uuid&quot; : &quot;rsauTenDTca7UhjJZPABig&quot;,  &quot;version&quot; : &#123;    &quot;number&quot; : &quot;7.6.2&quot;,    &quot;build_flavor&quot; : &quot;default&quot;,    &quot;build_type&quot; : &quot;docker&quot;,    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,    &quot;build_snapshot&quot; : false,    &quot;lucene_version&quot; : &quot;8.4.0&quot;,    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;  &#125;,  &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;[root@centos7 ~]## 关闭、增加内存限制，修改配置文件 -edocker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2# 测试[root@centos7 ~]# docker run -d --name elasticsearch03 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.215b88d7c7446553c132efda007c36ef94da06e6f4b5ed2ba0a17f9af30d5f4c6[root@centos7 ~]# docker psCONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                                                                  NAMES15b88d7c7446   elasticsearch:7.6.2   &quot;/usr/local/bin/dock…&quot;   4 seconds ago   Up 4 seconds   0.0.0.0:9200-&gt;9200/tcp, :::9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp, :::9300-&gt;9300/tcp   elasticsearch03[root@centos7 ~]# docker statsCONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O    PIDS15b88d7c7446   elasticsearch03   0.05%     251.3MiB / 1.777GiB   13.82%    656B / 0B   136MB / 0B   19CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O    PIDS15b88d7c7446   elasticsearch03   0.05%     251.3MiB / 1.777GiB   13.82%    656B / 0B   136MB / 0B   19CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O    PIDS15b88d7c7446   elasticsearch03   99.81%    272.8MiB / 1.777GiB   14.99%    656B / 0B   140MB / 0B   19^C[root@centos7 ~]#\n\nES 和 Kibana怎么互联\n\n可视化&#x3D;&#x3D;Portainer&#x3D;&#x3D;\nDocker图形化界面管理工具\n[root@centos7 ~]# docker run -d -p 19000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer-ce:latestUnable to find image &#x27;portainer/portainer:latest&#x27; locallylatest: Pulling from portainer/portainer94cfa856b2b1: Pull complete49d59ee0881a: Pull completea2300fd28637: Pull completeDigest: sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3fStatus: Downloaded newer image for portainer/portainer:latest17ed1c084c4aa422c97d307f9489bc45d64ade996dceaf307a43f21e41f10a09[root@centos7 ~]# docker psCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES17ed1c084c4a   portainer/portainer   &quot;/portainer&quot;             2 minutes ago    Up 2 minutes    0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp                                              naughty_lehmann15b88d7c7446   elasticsearch:7.6.2   &quot;/usr/local/bin/dock…&quot;   56 minutes ago   Up 56 minutes   0.0.0.0:9200-&gt;9200/tcp, :::9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp, :::9300-&gt;9300/tcp   elasticsearch03\n\n访问，密码：portainer\nhttp://192.168.52.180:8088/#/init/adminS05141123l@211\n\n\n\n\n&#x3D;&#x3D;Rancher&#x3D;&#x3D;\nportainer忘记密码如何重置\nhttps://www.cnblogs.com/A1999/p/15993682.html\n\n\n查看所有容器,包括未运行的\n\ndocker ps -a\n\n\n找到Portainer对应信息\n停止Portainer容器\n\ndocker stop portainerid\n\n我这里就应该是\ndocker stop 507566f7086e\n\n\n找到Portainer容器挂载信息\n\ndocker inspect  portainerid\n\n我这里就应该是\ndocker inspect 507566f7086e\n\n找到这个信息”Source”:”xxx”\n\n执行命令重置密码\n\ndocker run --rm -v /dockerpath:/data portainer/helper-reset-password我这里应该是docker run --rm -v /mnt/docker/portainer:/data portainer/helper-reset-password\n\n现在admin登录的密码就为：4~!15SlshwmY#89FpcRE06u{HL2(_Z:\n6.启动容器,输入用户名密码就可以登录\ndocker start  portainerid我这里就应该是docker start 507566f7086e\n\n7.修改Portainer登录密码\nGitlabdocker部署部署\ndocker run -itd \\-p 19980:80 \\-p 19922:22 \\-u root \\-v /data/docker/gitlab/data/log:/var/log/gitlab \\-v /data/docker/gitlab/data/opt:/var/opt/gitlab \\-v /data/docker/gitlab/data/etc:/etc/gitlab \\--restart=unless-stopped \\--name=gitlab \\gitlab/gitlab-ce\n\n创建网络\ndocker network create custom_network --subnet=172.20.0.0/16\n\n指定网络部署\ndocker run -itd \\-p 19980:80 \\-p 19922:22 \\--network custom_network --ip 172.20.0.100 \\  # 请确保这个 IP 地址在你的网络中没有冲突-u root \\-v /data/docker/gitlab/data/log:/var/log/gitlab \\-v /data/docker/gitlab/data/opt:/var/opt/gitlab \\-v /data/docker/gitlab/data/etc:/etc/gitlab \\--restart=unless-stopped \\  # 推荐使用 unless-stopped 替代 always--name=gitlab \\gitlab/gitlab-ce\n\n查看root初始密码\ndocker exec -it gitlab grep &quot;Password&quot;: /etc/gitlab/initial_root_password\n\nDocker镜像镜像是什么加载原理UnionFS(联合文件系统)\n分层下载\n分层理解commit 镜像## 提交镜像为一个新的副本docker commit## 命令docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 目标镜像名:[TAG]\n\n实战测试\n## 启动默认tomcatdocker run -it -p 8080:8080 tocatctrl + p + qdocker exec -it 容器ID# 发现webapps下没有文件# 拷贝文件到webappscp -r webapps.dist/* webapps# 提交[root@centos7 ~]# docker psCONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                                       NAMES6868cb5454ee   tomcat    &quot;catalina.sh run&quot;   12 minutes ago   Up 12 minutes   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   hardcore_ardinghelli# 打包提交镜像[root@centos7 ~]# docker commit -a=&quot;sun&quot; -m=&quot;add webapps app&quot; 6868cb5454ee tomcat02:1.0sha256:61485aa8d509c59e71125e3d29fb65f11e20cb661edfd0939470eadffd288cde[root@centos7 ~]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED         SIZEtomcat02              1.0       61485aa8d509   5 seconds ago   672MBtomcat                9.0       5505f7218e4d   3 days ago      667MBtomcat                latest    5505f7218e4d   3 days ago      667MBredis                 latest    fad0ee7e917a   2 weeks ago     105MBnginx                 latest    d1a364dc548d   3 weeks ago     133MBportainer/portainer   latest    580c0e4e98b0   3 months ago    79.1MBcentos                latest    300e315adb2f   6 months ago    209MBelasticsearch         7.6.2     f29a1ee41030   15 months ago   791MB[root@centos7 ~]#\n\n容器数据卷什么是容器数据卷总结：容器的持久化和同步！容器间也是可以数据共享的\n使用数据卷方法一：直接使用命令来挂载 -vdocker run -it -v 主机目录:容器内目录[root@centos7 ~]# cd /home[root@centos7 home]# lsname  sun.java  test.java# 使用命令挂载[root@centos7 home]# docker run -it -v /home/ceshi:/home centos /bin/bash[root@d7bd1e6e693f /]# cd /home[root@d7bd1e6e693f home]# ls[root@d7bd1e6e693f home]# [root@centos7 home]#[root@centos7 home]# lsceshi  name  sun.java  test.java[root@centos7 home]# docker psCONTAINER ID   IMAGE     COMMAND             CREATED         STATUS         PORTS                                       NAMESd7bd1e6e693f   centos    &quot;/bin/bash&quot;         3 minutes ago   Up 3 minutes                                               flamboyant_gates6868cb5454ee   tomcat    &quot;catalina.sh run&quot;   17 hours ago    Up 17 hours    0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   hardcore_ardinghelli# 查看相关信息[root@centos7 home]# docker inspect d7bd1e6e693f[    &#123;        &quot;Id&quot;: &quot;d7bd1e6e693fc22f3db7734798b63c2eade1a7154a84b354661d3c546bc7718a&quot;,        &quot;Created&quot;: &quot;2021-06-21T01:08:46.218734547Z&quot;,        &quot;Path&quot;: &quot;/bin/bash&quot;,        &quot;Args&quot;: [],        &quot;State&quot;: &#123;            &quot;Status&quot;: &quot;running&quot;,            &quot;Running&quot;: true,            &quot;Paused&quot;: false,            &quot;Restarting&quot;: false,            &quot;OOMKilled&quot;: false,            &quot;Dead&quot;: false,            &quot;Pid&quot;: 4149,            &quot;ExitCode&quot;: 0,            &quot;Error&quot;: &quot;&quot;,            &quot;StartedAt&quot;: &quot;2021-06-21T01:08:48.057350529Z&quot;,            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;,        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/d7bd1e6e693fc22f3db7734798b63c2eade1a7154a84b354661d3c546bc7718a/resolv.conf&quot;,        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/d7bd1e6e693fc22f3db7734798b63c2eade1a7154a84b354661d3c546bc7718a/hostname&quot;,        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/d7bd1e6e693fc22f3db7734798b63c2eade1a7154a84b354661d3c546bc7718a/hosts&quot;,        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/d7bd1e6e693fc22f3db7734798b63c2eade1a7154a84b354661d3c546bc7718a/d7bd1e6e693fc22f3db7734798b63c2eade1a7154a84b354661d3c546bc7718a-json.log&quot;,        &quot;Name&quot;: &quot;/flamboyant_gates&quot;,        &quot;RestartCount&quot;: 0,        &quot;Driver&quot;: &quot;overlay2&quot;,        &quot;Platform&quot;: &quot;linux&quot;,        &quot;MountLabel&quot;: &quot;&quot;,        &quot;ProcessLabel&quot;: &quot;&quot;,        &quot;AppArmorProfile&quot;: &quot;&quot;,        &quot;ExecIDs&quot;: null,        &quot;HostConfig&quot;: &#123;            &quot;Binds&quot;: [                &quot;/home/ceshi:/home&quot;            ],            &quot;ContainerIDFile&quot;: &quot;&quot;,            &quot;LogConfig&quot;: &#123;                &quot;Type&quot;: &quot;json-file&quot;,                &quot;Config&quot;: &#123;&#125;            &#125;,            &quot;NetworkMode&quot;: &quot;default&quot;,            &quot;PortBindings&quot;: &#123;&#125;,            &quot;RestartPolicy&quot;: &#123;                &quot;Name&quot;: &quot;no&quot;,                &quot;MaximumRetryCount&quot;: 0            &#125;,            &quot;AutoRemove&quot;: false,            &quot;VolumeDriver&quot;: &quot;&quot;,            &quot;VolumesFrom&quot;: null,            &quot;CapAdd&quot;: null,            &quot;CapDrop&quot;: null,            &quot;CgroupnsMode&quot;: &quot;host&quot;,            &quot;Dns&quot;: [],            &quot;DnsOptions&quot;: [],            &quot;DnsSearch&quot;: [],            &quot;ExtraHosts&quot;: null,            &quot;GroupAdd&quot;: null,            &quot;IpcMode&quot;: &quot;private&quot;,            &quot;Cgroup&quot;: &quot;&quot;,            &quot;Links&quot;: null,            &quot;OomScoreAdj&quot;: 0,            &quot;PidMode&quot;: &quot;&quot;,            &quot;Privileged&quot;: false,            &quot;PublishAllPorts&quot;: false,            &quot;ReadonlyRootfs&quot;: false,            &quot;SecurityOpt&quot;: null,            &quot;UTSMode&quot;: &quot;&quot;,            &quot;UsernsMode&quot;: &quot;&quot;,            &quot;ShmSize&quot;: 67108864,            &quot;Runtime&quot;: &quot;runc&quot;,            &quot;ConsoleSize&quot;: [                0,                0            ],            &quot;Isolation&quot;: &quot;&quot;,            &quot;CpuShares&quot;: 0,            &quot;Memory&quot;: 0,            &quot;NanoCpus&quot;: 0,            &quot;CgroupParent&quot;: &quot;&quot;,            &quot;BlkioWeight&quot;: 0,            &quot;BlkioWeightDevice&quot;: [],            &quot;BlkioDeviceReadBps&quot;: null,            &quot;BlkioDeviceWriteBps&quot;: null,            &quot;BlkioDeviceReadIOps&quot;: null,            &quot;BlkioDeviceWriteIOps&quot;: null,            &quot;CpuPeriod&quot;: 0,            &quot;CpuQuota&quot;: 0,            &quot;CpuRealtimePeriod&quot;: 0,            &quot;CpuRealtimeRuntime&quot;: 0,            &quot;CpusetCpus&quot;: &quot;&quot;,            &quot;CpusetMems&quot;: &quot;&quot;,            &quot;Devices&quot;: [],            &quot;DeviceCgroupRules&quot;: null,            &quot;DeviceRequests&quot;: null,            &quot;KernelMemory&quot;: 0,            &quot;KernelMemoryTCP&quot;: 0,            &quot;MemoryReservation&quot;: 0,            &quot;MemorySwap&quot;: 0,            &quot;MemorySwappiness&quot;: null,            &quot;OomKillDisable&quot;: false,            &quot;PidsLimit&quot;: null,            &quot;Ulimits&quot;: null,            &quot;CpuCount&quot;: 0,            &quot;CpuPercent&quot;: 0,            &quot;IOMaximumIOps&quot;: 0,            &quot;IOMaximumBandwidth&quot;: 0,            &quot;MaskedPaths&quot;: [                &quot;/proc/asound&quot;,                &quot;/proc/acpi&quot;,                &quot;/proc/kcore&quot;,                &quot;/proc/keys&quot;,                &quot;/proc/latency_stats&quot;,                &quot;/proc/timer_list&quot;,                &quot;/proc/timer_stats&quot;,                &quot;/proc/sched_debug&quot;,                &quot;/proc/scsi&quot;,                &quot;/sys/firmware&quot;            ],            &quot;ReadonlyPaths&quot;: [                &quot;/proc/bus&quot;,                &quot;/proc/fs&quot;,                &quot;/proc/irq&quot;,                &quot;/proc/sys&quot;,                &quot;/proc/sysrq-trigger&quot;            ]        &#125;,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/711e9edb5aeec3c26ec8889f1c0879e6454012a527c73ec12d3a27a6f28298e0-init/diff:/var/lib/docker/overlay2/dbe0863967eda16db79356c5aa892895ef73d0afee2ecec4b52c209393f16103/diff&quot;,                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/711e9edb5aeec3c26ec8889f1c0879e6454012a527c73ec12d3a27a6f28298e0/merged&quot;,                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/711e9edb5aeec3c26ec8889f1c0879e6454012a527c73ec12d3a27a6f28298e0/diff&quot;,                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/711e9edb5aeec3c26ec8889f1c0879e6454012a527c73ec12d3a27a6f28298e0/work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        # 挂载        &quot;Mounts&quot;: [            &#123;                &quot;Type&quot;: &quot;bind&quot;,                &quot;Source&quot;: &quot;/home/ceshi&quot;,                &quot;Destination&quot;: &quot;/home&quot;,                &quot;Mode&quot;: &quot;&quot;,                &quot;RW&quot;: true,                &quot;Propagation&quot;: &quot;rprivate&quot;            &#125;        ],        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;d7bd1e6e693f&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: true,            &quot;AttachStdout&quot;: true,            &quot;AttachStderr&quot;: true,            &quot;Tty&quot;: true,            &quot;OpenStdin&quot;: true,            &quot;StdinOnce&quot;: true,            &quot;Env&quot;: [                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;            ],            &quot;Cmd&quot;: [                &quot;/bin/bash&quot;            ],            &quot;Image&quot;: &quot;centos&quot;,            &quot;Volumes&quot;: null,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: null,            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;            &#125;        &#125;,        &quot;NetworkSettings&quot;: &#123;            &quot;Bridge&quot;: &quot;&quot;,            &quot;SandboxID&quot;: &quot;5dde2a555d6ebe590a4cab2cc07ccac80e49289b0565d8c15a04b99ef5853765&quot;,            &quot;HairpinMode&quot;: false,            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,            &quot;LinkLocalIPv6PrefixLen&quot;: 0,            &quot;Ports&quot;: &#123;&#125;,            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/5dde2a555d6e&quot;,            &quot;SecondaryIPAddresses&quot;: null,            &quot;SecondaryIPv6Addresses&quot;: null,            &quot;EndpointID&quot;: &quot;608816e6eca9c267896e7254e97246a02ecbcb955148eddfe96e2dc6fb53856f&quot;,            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,            &quot;GlobalIPv6Address&quot;: &quot;&quot;,            &quot;GlobalIPv6PrefixLen&quot;: 0,            &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,            &quot;IPPrefixLen&quot;: 16,            &quot;IPv6Gateway&quot;: &quot;&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,            &quot;Networks&quot;: &#123;                &quot;bridge&quot;: &#123;                    &quot;IPAMConfig&quot;: null,                    &quot;Links&quot;: null,                    &quot;Aliases&quot;: null,                    &quot;NetworkID&quot;: &quot;2dc7231034028aab340034b6ff968fc0b71a79f04e5db48c916ac2b79d48476e&quot;,                    &quot;EndpointID&quot;: &quot;608816e6eca9c267896e7254e97246a02ecbcb955148eddfe96e2dc6fb53856f&quot;,                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,                    &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,                    &quot;DriverOpts&quot;: null                &#125;            &#125;        &#125;    &#125;][root@centos7 home]#\n\n\n\n实战：安装MySQL# 获取镜像[root@centos7 ~]# docker pull mysql:5.75.7: Pulling from library/mysql69692152171a: Already exists 1651b0be3df3: Pull complete 951da7386bc8: Pull complete 0f86c95aa242: Pull complete 37ba2d8bd4fe: Pull complete 6d278bb05e94: Pull complete 497efbd93a3e: Pull complete a023ae82eef5: Pull complete e76c35f20ee7: Pull complete e887524d2ef9: Pull complete ccb65627e1c3: Pull complete Digest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21faStatus: Downloaded newer image for mysql:5.7docker.io/library/mysql:5.7[root@centos7 ~]# # 官方测试docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag# 运行容器需要做数据挂载， 安装MySQL配置密码为：123456# -d 后台运行# -p 开放端口# -v 数据挂载# -e 环境配置，配置密码# --name 重命名[root@centos7 ~]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7db66837b45da8131de849b47d9bd0e90c52f4e1a8b11494ad0e31bb1e408516b[root@centos7 ~]# \n\n连接测试\n\n本地创建数据库测试\n\n具名挂载匿名挂载# 匿名挂载# -v 容器内路径[root@centos7 mysql]# docker run -d -P --name nginx01 -v /etc/nginx nginxf04206577f07e886fbffaaa65add7af434fecfacd82c56b9d22b1e252983f59b[root@centos7 mysql]# docker volumeUsage:  docker volume COMMANDManage volumesCommands:  create      Create a volume  inspect     Display detailed information on one or more volumes  ls          List volumes  prune       Remove all unused local volumes  rm          Remove one or more volumesRun &#x27;docker volume COMMAND --help&#x27; for more information on a command.# 查看所有volume 情况，匿名挂载（只写了容器内部路径，没有外部路径）[root@centos7 mysql]# docker volume lsDRIVER    VOLUME NAMElocal     aa55538068166b2b900c9447c7a26d8f89866213e35b0b65eced751bab761cb5local     c49dfa6ae87d3401c54e7f7b3d9aee03ada33dac5bf28fe19847defb2a2b2e19[root@centos7 mysql]# # 具名挂载 # -v 卷名:容器内路径[root@centos7 home]# docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx nginx305679aa5ab8a41a506bc06d1065dd639d1687d20f292e7db786efc60c0fe257[root@centos7 home]# docker volume lsDRIVER    VOLUME NAMElocal     juming-nginx[root@centos7 home]# # 查看卷的位置[root@centos7 home]# docker volume inspect juming-nginx[    &#123;        &quot;CreatedAt&quot;: &quot;2021-06-21T16:46:08+08:00&quot;,        &quot;Driver&quot;: &quot;local&quot;,        &quot;Labels&quot;: null,        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,        &quot;Name&quot;: &quot;juming-nginx&quot;,        &quot;Options&quot;: null,        &quot;Scope&quot;: &quot;local&quot;    &#125;][root@centos7 home]# # 所有挂载的卷都存在/var/lib/docker/volumes/xxx/_data\n\n如何确定具名挂载、匿名挂载、指定路径挂载# 如何确定具名挂载、匿名挂载、指定路径挂载-v 容器内路径\t\t\t\t# 匿名挂载-v 卷名:容器内路径\t\t\t   # 具名挂载-v /宿主机路径:容器内路径\t\t # 指定路径挂载\n\n拓展\n# 通过-v 容器内路径:ro / rw 改变读写情况:ro\treadonly\t# 只读:rw\treadwrite\t# 可读可写[root@centos7 _data]# docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx:ro nginx[root@centos7 _data]# docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx:rw nginx# ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作的\n\n方法二：Dockerfiledockerfile就是\n# 编写dockerfile文件，名字随机，建议dockerfile# 文件中内容 指令（大写） 参数FROM centosVOLUME [&quot;/volume01&quot;]CMD echo &quot;----end----&quot;CMD /bin/bash# 这里的每个命令都是镜像的一层[root@centos7 docker-test-volume]# docker build -f /home/docker-test-volume/dockerfile1 -t sun-centos:1.0 .Sending build context to Docker daemon  2.048kBStep 1/4 : FROM centos ---&gt; 300e315adb2fStep 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;] ---&gt; Running in b36b79463bebRemoving intermediate container b36b79463beb ---&gt; e71eafd862d1Step 3/4 : CMD echo &quot;----end----&quot; ---&gt; Running in 02491f2242eeRemoving intermediate container 02491f2242ee ---&gt; dc91e948c128Step 4/4 : CMD /bin/bash ---&gt; Running in bc87399b42b0Removing intermediate container bc87399b42b0 ---&gt; a6f24aa84bbdSuccessfully built a6f24aa84bbdSuccessfully tagged sun-centos:1.0[root@centos7 docker-test-volume]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED         SIZEsun-centos            1.0       a6f24aa84bbd   8 seconds ago   209MBtomcat02              1.0       61485aa8d509   25 hours ago    672MBtomcat                9.0       5505f7218e4d   4 days ago      667MBtomcat                latest    5505f7218e4d   4 days ago      667MBredis                 latest    fad0ee7e917a   2 weeks ago     105MBnginx                 latest    d1a364dc548d   3 weeks ago     133MBmysql                 5.7       2c9028880e58   5 weeks ago     447MBportainer/portainer   latest    580c0e4e98b0   3 months ago    79.1MBcentos                latest    300e315adb2f   6 months ago    209MBelasticsearch         7.6.2     f29a1ee41030   15 months ago   791MB[root@centos7 docker-test-volume]# # 运行容器[root@centos7 docker-test-volume]# docker run -it 7d80e12c9a4b /bin/bash[root@010849c53365 /]# ls -ltotal 0lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bindrwxr-xr-x.   5 root root 360 Jun 22 03:39 devdrwxr-xr-x.   1 root root  66 Jun 22 03:39 etcdrwxr-xr-x.   2 root root   6 Nov  3  2020 homelrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/liblrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64drwx------.   2 root root   6 Dec  4  2020 lost+founddrwxr-xr-x.   2 root root   6 Nov  3  2020 mediadrwxr-xr-x.   2 root root   6 Nov  3  2020 mntdrwxr-xr-x.   2 root root   6 Nov  3  2020 optdr-xr-xr-x. 189 root root   0 Jun 22 03:39 procdr-xr-x---.   2 root root 162 Dec  4  2020 rootdrwxr-xr-x.  11 root root 163 Dec  4  2020 runlrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbindrwxr-xr-x.   2 root root   6 Nov  3  2020 srvdr-xr-xr-x.  13 root root   0 Jun 20 08:21 sysdrwxrwxrwt.   7 root root 145 Dec  4  2020 tmpdrwxr-xr-x.  12 root root 144 Dec  4  2020 usrdrwxr-xr-x.  20 root root 262 Dec  4  2020 vardrwxr-xr-x.   2 root root   6 Jun 22 03:39 volume1[root@010849c53365 /]# cd volume1/[root@010849c53365 volume1]# ls[root@010849c53365 volume1]# touch container.txt[root@010849c53365 volume1]# lscontainer.txt[root@010849c53365 volume1]# # 查看挂载位置[root@centos7 ~]# docker psCONTAINER ID   IMAGE          COMMAND       CREATED          STATUS              POR010849c53365   fd96f4121255   &quot;/bin/bash&quot;   2 minutes ago    Up About a minute  6f6ed0914c11   fd96f4121255   &quot;/bin/bash&quot;   49 minutes ago   Up 49 minutes  [root@centos7 ~]# docker inspect 010849c53365[    &#123;        &quot;Id&quot;: &quot;010849c533651fbcf17685e23cd9a0334cb5a3de227d73780d0e0d0cfff73586&quot;,        &quot;Created&quot;: &quot;2021-06-22T03:39:31.568552243Z&quot;,        &quot;Path&quot;: &quot;/bin/bash&quot;,        &quot;Args&quot;: [],        &quot;State&quot;: &#123;            &quot;Status&quot;: &quot;running&quot;,            &quot;Running&quot;: true,            &quot;Paused&quot;: false,            &quot;Restarting&quot;: false,            &quot;OOMKilled&quot;: false,            &quot;Dead&quot;: false,            &quot;Pid&quot;: 12832,            &quot;ExitCode&quot;: 0,            &quot;Error&quot;: &quot;&quot;,            &quot;StartedAt&quot;: &quot;2021-06-22T03:39:32.96622469Z&quot;,            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;,        &quot;Image&quot;: &quot;sha256:fd96f41212555eefb88d461ee204bb87f0549c3b3c707bb4d8fa71c2e51        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/010849c533651fbcf17685e23cd9a0        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/010849c533651fbcf17685e23cd9a033        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/010849c533651fbcf17685e23cd9a0334cb        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/010849c533651fbcf17685e23cd9a0334cb5a73586-json.log&quot;,        &quot;Name&quot;: &quot;/eager_mirzakhani&quot;,        &quot;RestartCount&quot;: 0,        &quot;Driver&quot;: &quot;overlay2&quot;,        &quot;Platform&quot;: &quot;linux&quot;,        &quot;MountLabel&quot;: &quot;&quot;,        &quot;ProcessLabel&quot;: &quot;&quot;,        &quot;AppArmorProfile&quot;: &quot;&quot;,        &quot;ExecIDs&quot;: null,        &quot;HostConfig&quot;: &#123;            &quot;Binds&quot;: null,            &quot;ContainerIDFile&quot;: &quot;&quot;,            &quot;LogConfig&quot;: &#123;                &quot;Type&quot;: &quot;json-file&quot;,                &quot;Config&quot;: &#123;&#125;            &#125;,            &quot;NetworkMode&quot;: &quot;default&quot;,            &quot;PortBindings&quot;: &#123;&#125;,            &quot;RestartPolicy&quot;: &#123;                &quot;Name&quot;: &quot;no&quot;,                &quot;MaximumRetryCount&quot;: 0            &#125;,            &quot;AutoRemove&quot;: false,            &quot;VolumeDriver&quot;: &quot;&quot;,            &quot;VolumesFrom&quot;: null,            &quot;CapAdd&quot;: null,            &quot;CapDrop&quot;: null,            &quot;CgroupnsMode&quot;: &quot;host&quot;,            &quot;Dns&quot;: [],            &quot;DnsOptions&quot;: [],            &quot;DnsSearch&quot;: [],            &quot;ExtraHosts&quot;: null,            &quot;GroupAdd&quot;: null,            &quot;IpcMode&quot;: &quot;private&quot;,            &quot;Cgroup&quot;: &quot;&quot;,            &quot;Links&quot;: null,            &quot;OomScoreAdj&quot;: 0,            &quot;PidMode&quot;: &quot;&quot;,            &quot;Privileged&quot;: false,            &quot;PublishAllPorts&quot;: false,            &quot;ReadonlyRootfs&quot;: false,            &quot;SecurityOpt&quot;: null,            &quot;UTSMode&quot;: &quot;&quot;,            &quot;UsernsMode&quot;: &quot;&quot;,            &quot;ShmSize&quot;: 67108864,            &quot;Runtime&quot;: &quot;runc&quot;,            &quot;ConsoleSize&quot;: [                0,                0            ],            &quot;Isolation&quot;: &quot;&quot;,            &quot;CpuShares&quot;: 0,            &quot;Memory&quot;: 0,            &quot;NanoCpus&quot;: 0,            &quot;CgroupParent&quot;: &quot;&quot;,            &quot;BlkioWeight&quot;: 0,            &quot;BlkioWeightDevice&quot;: [],            &quot;BlkioDeviceReadBps&quot;: null,            &quot;BlkioDeviceWriteBps&quot;: null,            &quot;BlkioDeviceReadIOps&quot;: null,            &quot;BlkioDeviceWriteIOps&quot;: null,            &quot;CpuPeriod&quot;: 0,            &quot;CpuQuota&quot;: 0,            &quot;CpuRealtimePeriod&quot;: 0,            &quot;CpuRealtimeRuntime&quot;: 0,            &quot;CpusetCpus&quot;: &quot;&quot;,            &quot;CpusetMems&quot;: &quot;&quot;,            &quot;Devices&quot;: [],            &quot;DeviceCgroupRules&quot;: null,            &quot;DeviceRequests&quot;: null,            &quot;KernelMemory&quot;: 0,            &quot;KernelMemoryTCP&quot;: 0,            &quot;MemoryReservation&quot;: 0,            &quot;MemorySwap&quot;: 0,            &quot;MemorySwappiness&quot;: null,            &quot;OomKillDisable&quot;: false,            &quot;PidsLimit&quot;: null,            &quot;Ulimits&quot;: null,            &quot;CpuCount&quot;: 0,            &quot;CpuPercent&quot;: 0,            &quot;IOMaximumIOps&quot;: 0,            &quot;IOMaximumBandwidth&quot;: 0,            &quot;MaskedPaths&quot;: [                &quot;/proc/asound&quot;,                &quot;/proc/acpi&quot;,                &quot;/proc/kcore&quot;,                &quot;/proc/keys&quot;,                &quot;/proc/latency_stats&quot;,                &quot;/proc/timer_list&quot;,                &quot;/proc/timer_stats&quot;,                &quot;/proc/sched_debug&quot;,                &quot;/proc/scsi&quot;,                &quot;/sys/firmware&quot;            ],            &quot;ReadonlyPaths&quot;: [                &quot;/proc/bus&quot;,                &quot;/proc/fs&quot;,                &quot;/proc/irq&quot;,                &quot;/proc/sys&quot;,                &quot;/proc/sysrq-trigger&quot;            ]        &#125;,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/f50fba6d9d1be7b03cd4e0f5a7f5d179356c5aa892895ef73d0afee2ecec4b52c209393f16103/diff&quot;,                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/f50fba6d9d1be7b03cd4e0f5a7f5d                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/f50fba6d9d1be7b03cd4e0f5a7f5d1                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/f50fba6d9d1be7b03cd4e0f5a7f5d1b            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        &quot;Mounts&quot;: [            &#123;                &quot;Type&quot;: &quot;volume&quot;,                &quot;Name&quot;: &quot;9e3b0fdaaa5d64a9911c2600aee6b0ecda1f26efc8598056a361ea860cf                &quot;Source&quot;: &quot;/var/lib/docker/volumes/9e3b0fdaaa5d64a9911c2600aee6b0ecd                &quot;Destination&quot;: &quot;/volume1&quot;,                &quot;Driver&quot;: &quot;local&quot;,                &quot;Mode&quot;: &quot;&quot;,                &quot;RW&quot;: true,                &quot;Propagation&quot;: &quot;&quot;            &#125;        ],        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;010849c53365&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: true,            &quot;AttachStdout&quot;: true,            &quot;AttachStderr&quot;: true,            &quot;Tty&quot;: true,            &quot;OpenStdin&quot;: true,            &quot;StdinOnce&quot;: true,            &quot;Env&quot;: [                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;            ],            &quot;Cmd&quot;: [                &quot;/bin/bash&quot;            ],            &quot;Image&quot;: &quot;fd96f4121255&quot;,            &quot;Volumes&quot;: &#123;                &quot;/volume1&quot;: &#123;&#125;            &#125;,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: null,            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;            &#125;        &#125;,        &quot;NetworkSettings&quot;: &#123;            &quot;Bridge&quot;: &quot;&quot;,            &quot;SandboxID&quot;: &quot;ba03c4ece79e4dc6486fdbefd41b1027d4ed45fbfb52f96dd625b94e7e            &quot;HairpinMode&quot;: false,            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,            &quot;LinkLocalIPv6PrefixLen&quot;: 0,            &quot;Ports&quot;: &#123;&#125;,            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/ba03c4ece79e&quot;,            &quot;SecondaryIPAddresses&quot;: null,            &quot;SecondaryIPv6Addresses&quot;: null,            &quot;EndpointID&quot;: &quot;68b6affc5b24788b8b0cd59956fcdbf74d15333153a93beb5d87758a4            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,            &quot;GlobalIPv6Address&quot;: &quot;&quot;,            &quot;GlobalIPv6PrefixLen&quot;: 0,            &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,            &quot;IPPrefixLen&quot;: 16,            &quot;IPv6Gateway&quot;: &quot;&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,            &quot;Networks&quot;: &#123;                &quot;bridge&quot;: &#123;                    &quot;IPAMConfig&quot;: null,                    &quot;Links&quot;: null,                    &quot;Aliases&quot;: null,                    &quot;NetworkID&quot;: &quot;2dc7231034028aab340034b6ff968fc0b71a79f04e5db48c91                    &quot;EndpointID&quot;: &quot;68b6affc5b24788b8b0cd59956fcdbf74d15333153a93beb5                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,                    &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,                    &quot;DriverOpts&quot;: null                &#125;            &#125;        &#125;    &#125;][root@centos7 ~]# cd /var/lib/docker/volumes/9e3b0fdaaa5d64a9911c2600aee6b0ecda1f26e[root@centos7 _data]# lscontainer.txt[root@centos7 _data]# \n\n数据卷容器多个MySQL同步数据\n\n&#x3D;&#x3D;测试&#x3D;&#x3D;，3个同步\n# 启动第一个容器[root@centos7 ~]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED         SIZEsun/centos            1.0       fd96f4121255   5 hours ago     209MBtomcat02              1.0       61485aa8d509   47 hours ago    672MBtomcat                9.0       5505f7218e4d   5 days ago      667MBtomcat                latest    5505f7218e4d   5 days ago      667MBredis                 latest    fad0ee7e917a   2 weeks ago     105MBnginx                 latest    d1a364dc548d   3 weeks ago     133MBmysql                 5.7       2c9028880e58   5 weeks ago     447MBportainer/portainer   latest    580c0e4e98b0   3 months ago    79.1MBcentos                latest    300e315adb2f   6 months ago    209MBelasticsearch         7.6.2     f29a1ee41030   15 months ago   791MB[root@centos7 ~]# docker run -it --name docker01 fd96f4121255[root@21e6fb0d15cd /]# ls -ltotal 0lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bindrwxr-xr-x.   5 root root 360 Jun 22 07:22 devdrwxr-xr-x.   1 root root  66 Jun 22 07:22 etcdrwxr-xr-x.   2 root root   6 Nov  3  2020 homelrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/liblrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64drwx------.   2 root root   6 Dec  4  2020 lost+founddrwxr-xr-x.   2 root root   6 Nov  3  2020 mediadrwxr-xr-x.   2 root root   6 Nov  3  2020 mntdrwxr-xr-x.   2 root root   6 Nov  3  2020 optdr-xr-xr-x. 185 root root   0 Jun 22 07:22 procdr-xr-x---.   2 root root 162 Dec  4  2020 rootdrwxr-xr-x.  11 root root 163 Dec  4  2020 runlrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbindrwxr-xr-x.   2 root root   6 Nov  3  2020 srvdr-xr-xr-x.  13 root root   0 Jun 20 08:21 sysdrwxrwxrwt.   7 root root 145 Dec  4  2020 tmpdrwxr-xr-x.  12 root root 144 Dec  4  2020 usrdrwxr-xr-x.  20 root root 262 Dec  4  2020 vardrwxr-xr-x.   2 root root   6 Jun 22 07:22 volume1[root@21e6fb0d15cd /]# # 启动第二个容器[root@centos7 ~]# docker run -it --name docker02 --volumes-from docker01 sun/centos:1.0[root@9c8e6cb85c3f /]# ls -ltotal 0lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bindrwxr-xr-x.   5 root root 360 Jun 22 07:25 devdrwxr-xr-x.   1 root root  66 Jun 22 07:25 etcdrwxr-xr-x.   2 root root   6 Nov  3  2020 homelrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/liblrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64drwx------.   2 root root   6 Dec  4  2020 lost+founddrwxr-xr-x.   2 root root   6 Nov  3  2020 mediadrwxr-xr-x.   2 root root   6 Nov  3  2020 mntdrwxr-xr-x.   2 root root   6 Nov  3  2020 optdr-xr-xr-x. 186 root root   0 Jun 22 07:25 procdr-xr-x---.   2 root root 162 Dec  4  2020 rootdrwxr-xr-x.  11 root root 163 Dec  4  2020 runlrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbindrwxr-xr-x.   2 root root   6 Nov  3  2020 srvdr-xr-xr-x.  13 root root   0 Jun 20 08:21 sysdrwxrwxrwt.   7 root root 145 Dec  4  2020 tmpdrwxr-xr-x.  12 root root 144 Dec  4  2020 usrdrwxr-xr-x.  20 root root 262 Dec  4  2020 vardrwxr-xr-x.   2 root root   6 Jun 22 07:22 volume1[root@9c8e6cb85c3f /]# \n\n容器同步数据，删除docker01之后，数据依然存在\n\n多个MySQL实现数据共享[root@centos7 ~]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7[root@centos7 ~]# docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7\n\nDockerFileDockerFile介绍\ndockerfile是用来构建docker镜像的主要工具\n\n编写docker file文件\ndocker build 构建镜像\ndocker run运行镜像\ndocker push发布镜像\n\n\n\nDockerFile构建过程DockerFile指令FROM\t\t\t# 基础镜像，一切从这里开始构建MAINTAINER\t\t# 镜像是谁写的，姓名+邮箱RUN \t\t\t# 镜像构建的时候运行的命令ADD\t\t\t\t# 步骤；Tomcat镜像，这个Tomcat压缩包！添加内容WORKDIR\t\t\t# 镜像的工作目录VOLUME\t\t\t# 挂载的目录EXPOST\t\t\t# 暴露端口配置CMD\t\t\t\t# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代ENTRYPOINT\t\t# 制定这个容器启动时候运行的命令，可以追加命ONBUILD\t\t\t# 当构建一个被继承dockerfile这时候运行ONBUILD的指令，触发指令COPY\t\t\t# 类似ADD，将我们文件拷贝到镜像中ENV\t\t\t\t# 构建的时候设置环境变量\n\n\n实战cebtos测试Dockerhub上多数镜像都是从这个基础镜像过来的FROM scratch\n\n&#x3D;&#x3D;创建自己的centos&#x3D;&#x3D;\n# 编写dockerfile文件[root@centos7 ~]# cd /home[root@centos7 home]# lsceshi  docker-test-volume  name  mysql  sun.java  test.java[root@centos7 home]# mkdir dockerfile[root@centos7 home]# cd dockerfile/[root@centos7 dockerfile]# ls[root@centos7 dockerfile]# vim mydockerfile[root@centos7 dockerfile]# cat mydockerfile FROM centosMAINTAINER sun&lt;EMAIL@qq.com&gt;ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum install vimRUN yum install net-toolsEXPOSE 80CMD echo $MYPATHCMD &quot;====END====&quot;CMD /bin/bash# 开始构建[root@centos7 dockerfile]# docker build -f mydockerfile -t mycentos:0.1 .Sending build context to Docker daemon  2.048kBStep 1/10 : FROM centos ---&gt; 300e315adb2fStep 2/10 : MAINTAINER sun&lt;EMAIL@qq.com&gt; ---&gt; Running in 739b57131710Removing intermediate container 739b57131710 ---&gt; 29ad5f97ca5bStep 3/10 : ENV MYPATH /usr/local ---&gt; Running in 1d7ee28b2250Removing intermediate container 1d7ee28b2250 ---&gt; ddf6af18fc09Step 4/10 : WORKDIR $MYPATH ---&gt; Running in 40a1b3882030Removing intermediate container 40a1b3882030 ---&gt; a546b4765636Step 5/10 : RUN yum -y install vim ---&gt; Running in 75a3034c74baCentOS Linux 8 - AppStream                      4.5 MB/s | 7.5 MB     00:01  CentOS Linux 8 - BaseOS                         895 kB/s | 2.6 MB     00:02  CentOS Linux 8 - Extras                          12 kB/s | 9.6 kB     00:00  Last metadata expiration check: 0:00:01 ago on Tue Jun 22 09:29:31 2021.Dependencies resolved.================================================================================ Package             Arch        Version                   Repository      Size================================================================================Installing: vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 MInstalling dependencies: gpm-libs            x86_64      1.20.7-17.el8             appstream       39 k vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k which               x86_64      2.21-12.el8               baseos          49 kTransaction Summary================================================================================Install  5 PackagesTotal download size: 7.8 MInstalled size: 30 MDownloading Packages:(1/5): gpm-libs-1.20.7-17.el8.x86_64.rpm        137 kB/s |  39 kB     00:00  (2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 486 kB/s |  48 kB     00:00  (3/5): which-2.21-12.el8.x86_64.rpm              72 kB/s |  49 kB     00:00  (4/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  1.3 MB/s | 1.4 MB     00:01  (5/5): vim-common-8.0.1763-15.el8.x86_64.rpm    5.9 MB/s | 6.3 MB     00:01  --------------------------------------------------------------------------------Total                                           3.4 MB/s | 7.8 MB     00:02   warning: /var/cache/dnf/appstream-02e86d1c976ab532/packages/gpm-libs-1.20.7-17.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEYCentOS Linux 8 - AppStream                      166 kB/s | 1.6 kB     00:00  Importing GPG key 0x8483C65D: Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot; Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficialKey imported successfullyRunning transaction checkTransaction check succeeded.Running transaction testTransaction test succeeded.Running transaction  Preparing        :                                                        1/1   Installing       : which-2.21-12.el8.x86_64                               1/5   Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5   Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5   Installing       : gpm-libs-1.20.7-17.el8.x86_64                          4/5   Running scriptlet: gpm-libs-1.20.7-17.el8.x86_64                          4/5   Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5   Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5   Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5   Verifying        : gpm-libs-1.20.7-17.el8.x86_64                          1/5   Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5   Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5   Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5   Verifying        : which-2.21-12.el8.x86_64                               5/5 Installed:  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch  which-2.21-12.el8.x86_64     Complete!Removing intermediate container 75a3034c74ba ---&gt; 1255cabbbf83Step 6/10 : RUN yum -y install net-tools ---&gt; Running in fa9d065790b6Last metadata expiration check: 0:00:28 ago on Tue Jun 22 09:29:31 2021.Dependencies resolved.================================================================================ Package         Architecture Version                        Repository    Size================================================================================Installing: net-tools       x86_64       2.0-0.52.20160912git.el8       baseos       322 kTransaction Summary================================================================================Install  1 PackageTotal download size: 322 kInstalled size: 942 kDownloading Packages:net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   395 kB/s | 322 kB     00:00  --------------------------------------------------------------------------------Total                                           258 kB/s | 322 kB     00:01   Running transaction checkTransaction check succeeded.Running transaction testTransaction test succeeded.Running transaction  Preparing        :                                                        1/1   Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1   Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1/1   Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 Installed:  net-tools-2.0-0.52.20160912git.el8.x86_64                             Complete!Removing intermediate container fa9d065790b6 ---&gt; 322759aa809cStep 7/10 : EXPOSE 80 ---&gt; Running in e970b836aa84Removing intermediate container e970b836aa84 ---&gt; 509ce133ae12Step 8/10 : CMD echo $MYPATH ---&gt; Running in 41bd2f1f7a2fRemoving intermediate container 41bd2f1f7a2f ---&gt; 3cbf69399d4bStep 9/10 : CMD echo &quot;====END====&quot; ---&gt; Running in 62af383c922eRemoving intermediate container 62af383c922e ---&gt; cef3ff258ffaStep 10/10 : CMD /bin/bash ---&gt; Running in d719cbfbb9f5Removing intermediate container d719cbfbb9f5 ---&gt; ef11becad48aSuccessfully built ef11becad48aSuccessfully tagged mycentos:0.1[root@centos7 dockerfile]# # 验证测试[root@centos7 dockerfile]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED              SIZEmycentos              0.1       ef11becad48a   About a minute ago   295MBsun/centos            1.0       fd96f4121255   7 hours ago          209MBtomcat02              1.0       61485aa8d509   2 days ago           672MBtomcat                9.0       5505f7218e4d   5 days ago           667MBtomcat                latest    5505f7218e4d   5 days ago           667MBredis                 latest    fad0ee7e917a   2 weeks ago          105MBnginx                 latest    d1a364dc548d   3 weeks ago          133MBmysql                 5.7       2c9028880e58   5 weeks ago          447MBportainer/portainer   latest    580c0e4e98b0   3 months ago         79.1MBcentos                latest    300e315adb2f   6 months ago         209MBelasticsearch         7.6.2     f29a1ee41030   15 months ago        791MB[root@centos7 dockerfile]# docker run -it mycentos:0.1# 默认工作目录[root@e09c800665d1 local]# pwd/usr/local# 测试ifconfig[root@e09c800665d1 local]# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.4  netmask 255.255.0.0  broadcast 172.17.255.255        ether 02:42:ac:11:00:04  txqueuelen 0  (Ethernet)        RX packets 8  bytes 656 (656.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        loop  txqueuelen 1000  (Local Loopback)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0# 测试vim[root@e09c800665d1 local]# vim test# 查看构建过程[root@centos7 ~]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED          SIZEmycentos              0.1       ef11becad48a   18 minutes ago   295MBsun/centos            1.0       fd96f4121255   7 hours ago      209MBtomcat02              1.0       61485aa8d509   2 days ago       672MBtomcat                9.0       5505f7218e4d   5 days ago       667MBtomcat                latest    5505f7218e4d   5 days ago       667MBredis                 latest    fad0ee7e917a   2 weeks ago      105MBnginx                 latest    d1a364dc548d   3 weeks ago      133MBmysql                 5.7       2c9028880e58   5 weeks ago      447MBportainer/portainer   latest    580c0e4e98b0   3 months ago     79.1MBcentos                latest    300e315adb2f   6 months ago     209MBelasticsearch         7.6.2     f29a1ee41030   15 months ago    791MB[root@centos7 ~]# docker history ef11becad48aIMAGE          CREATED          CREATED BY                                      SIZE      COMMENTef11becad48a   19 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B  cef3ff258ffa   19 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B  3cbf69399d4b   19 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B  509ce133ae12   19 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B  322759aa809c   19 minutes ago   /bin/sh -c yum -y install net-tools             24.9MB  1255cabbbf83   19 minutes ago   /bin/sh -c yum -y install vim                   60.7MB  a546b4765636   19 minutes ago   /bin/sh -c #(nop) WORKDIR /usr/local            0B  ddf6af18fc09   19 minutes ago   /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B  29ad5f97ca5b   19 minutes ago   /bin/sh -c #(nop)  MAINTAINER sun&lt;EMAIL…   0B  300e315adb2f   6 months ago     /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B  &lt;missing&gt;      6 months ago     /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B  &lt;missing&gt;      6 months ago     /bin/sh -c #(nop) ADD file:bd7a2aed6ede423b7…   209MB   [root@centos7 ~]# \n\n&#x3D;&#x3D;CMD和ENTRYPOINT的区别&#x3D;&#x3D;\nCMD\t\t\t\t# 指定这个容器启动的时候运行的命令，只有最后一个会生效，可被替代ENTRYPOINT\t\t# 指定这个容器启动的时候要运行的命令，可以追加命令\n\n测试CMD\n[root@centos7 dockerfile]# touch cmdfile[root@centos7 dockerfile]# vim cmdfile [root@centos7 dockerfile]# lscmdfile  mydockerfile[root@centos7 dockerfile]# cat cmdfile FROM centosCMD [&quot;ls&quot;,&quot;-a&quot;][root@centos7 dockerfile]# docker build -f cmdfile -t cmdtest .Sending build context to Docker daemon  3.072kBStep 1/2 : FROM centos ---&gt; 300e315adb2fStep 2/2 : CMD [&quot;ls&quot;,&quot;-a&quot;] ---&gt; Running in c26847036d1dRemoving intermediate container c26847036d1d ---&gt; da2d7b4985a1Successfully built da2d7b4985a1Successfully tagged cmdtest:latest[root@centos7 dockerfile]# docker run -it da2d7b4985a1.   .dockerenv\tdev  home  lib64       media  opt   root  sbin\tsys  usr..  bin\t\tetc  lib   lost+found  mnt    proc  run   srv\ttmp  var# 想追加一个命令-l ls -al[root@centos7 dockerfile]# docker run da2d7b4985a1 -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.# CMD的清理下，-l替换了CMD[&quot;ls&quot;,&quot;-a&quot;]命令，-l不是命令所以报错[root@centos7 dockerfile]# docker run da2d7b4985a1 ls -altotal 0drwxr-xr-x.   1 root root   6 Jun 23 02:52 .drwxr-xr-x.   1 root root   6 Jun 23 02:52 ..-rwxr-xr-x.   1 root root   0 Jun 23 02:52 .dockerenvlrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bindrwxr-xr-x.   5 root root 340 Jun 23 02:52 devdrwxr-xr-x.   1 root root  66 Jun 23 02:52 etcdrwxr-xr-x.   2 root root   6 Nov  3  2020 homelrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/liblrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64drwx------.   2 root root   6 Dec  4  2020 lost+founddrwxr-xr-x.   2 root root   6 Nov  3  2020 mediadrwxr-xr-x.   2 root root   6 Nov  3  2020 mntdrwxr-xr-x.   2 root root   6 Nov  3  2020 optdr-xr-xr-x. 188 root root   0 Jun 23 02:52 procdr-xr-x---.   2 root root 162 Dec  4  2020 rootdrwxr-xr-x.  11 root root 163 Dec  4  2020 runlrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbindrwxr-xr-x.   2 root root   6 Nov  3  2020 srvdr-xr-xr-x.  13 root root   0 Jun 20 08:21 sysdrwxrwxrwt.   7 root root 145 Dec  4  2020 tmpdrwxr-xr-x.  12 root root 144 Dec  4  2020 usrdrwxr-xr-x.  20 root root 262 Dec  4  2020 var[root@centos7 dockerfile]# # 测试 ENTRYPOINT[root@centos7 dockerfile]# vim dockerfile-entrypoint[root@centos7 dockerfile]# cat dockerfile-entrypoint FROM centosENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;][root@centos7 dockerfile]# docker build -f dockerfile-entrypoint -t docker-entrypoint-test .Sending build context to Docker daemon  4.096kBStep 1/2 : FROM centos ---&gt; 300e315adb2fStep 2/2 : ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;] ---&gt; Running in 8dcb269c923bRemoving intermediate container 8dcb269c923b ---&gt; 8524617105fdSuccessfully built 8524617105fdSuccessfully tagged docker-entrypoint-test:latest[root@centos7 dockerfile]# docker run 8524617105fd....dockerenvbindevetchomeliblib64lost+foundmediamntoptprocrootrunsbinsrvsystmpusrvar[root@centos7 dockerfile]# docker run 8524617105fd -ltotal 0drwxr-xr-x.   1 root root   6 Jun 23 02:59 .drwxr-xr-x.   1 root root   6 Jun 23 02:59 ..-rwxr-xr-x.   1 root root   0 Jun 23 02:59 .dockerenvlrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bindrwxr-xr-x.   5 root root 340 Jun 23 02:59 devdrwxr-xr-x.   1 root root  66 Jun 23 02:59 etcdrwxr-xr-x.   2 root root   6 Nov  3  2020 homelrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/liblrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64drwx------.   2 root root   6 Dec  4  2020 lost+founddrwxr-xr-x.   2 root root   6 Nov  3  2020 mediadrwxr-xr-x.   2 root root   6 Nov  3  2020 mntdrwxr-xr-x.   2 root root   6 Nov  3  2020 optdr-xr-xr-x. 188 root root   0 Jun 23 02:59 procdr-xr-x---.   2 root root 162 Dec  4  2020 rootdrwxr-xr-x.  11 root root 163 Dec  4  2020 runlrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbindrwxr-xr-x.   2 root root   6 Nov  3  2020 srvdr-xr-xr-x.  13 root root   0 Jun 20 08:21 sysdrwxrwxrwt.   7 root root 145 Dec  4  2020 tmpdrwxr-xr-x.  12 root root 144 Dec  4  2020 usrdrwxr-xr-x.  20 root root 262 Dec  4  2020 var[root@centos7 dockerfile]# \n\n实战Tomcat测试\n准备tomcat，jdk压缩包\n\n\n\n编写dockerfile文件，Dockerfile官方命名，\n\n[root@centos7 tomcat]# touch readme.txt[root@centos7 tomcat]# vim Dockerfile[root@centos7 tomcat]# cat Dockerfile FROM centosMAINTAINER sun&lt;EMAIL@qq.com&gt;COPY readme.txt /usr/local/readme.txtADD jdk-8u291-linux-x64.tar.gz /usr/local/ADD apache-tomcat-9.0.48.tar.gz /usr/local/RUN yum -y install vimENV MYPATH /usr/localWORKDIR $MYPATHENV JAVA_HOME /usr/local/jdk1.8.0_291ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.48ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.48ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/binEXPOSE 8080CMD /usr/local/apache-tomcat-9.0.48/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.48/bin/logs/catalina.out[root@centos7 tomcat]# \n\n\n构建镜像\n\n[root@centos7 tomcat]# docker build -t diytomcat .Sending build context to Docker daemon  156.4MBStep 1/15 : FROM centos ---&gt; 300e315adb2fStep 2/15 : MAINTAINER sun&lt;EMAIL@qq.com&gt; ---&gt; Using cache ---&gt; 29ad5f97ca5bStep 3/15 : COPY readme.txt /usr/local/readme.txt ---&gt; 35c9e0c265bdStep 4/15 : ADD jdk-8u291-linux-x64.tar.gz /usr/local/ ---&gt; 7f5622c3b39fStep 5/15 : ADD apache-tomcat-9.0.48.tar.gz /usr/local/ ---&gt; ccb0ac77da86Step 6/15 : RUN yum -y install vim ---&gt; Running in 421a061a716dCentOS Linux 8 - AppStream                      2.1 MB/s | 7.5 MB     00:03  CentOS Linux 8 - BaseOS                         1.7 MB/s | 2.6 MB     00:01  CentOS Linux 8 - Extras                          11 kB/s | 9.6 kB     00:00  Dependencies resolved.================================================================================ Package             Arch        Version                   Repository      Size================================================================================Installing: vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 MInstalling dependencies: gpm-libs            x86_64      1.20.7-17.el8             appstream       39 k vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k which               x86_64      2.21-12.el8               baseos          49 kTransaction Summary================================================================================Install  5 PackagesTotal download size: 7.8 MInstalled size: 30 MDownloading Packages:(1/5): gpm-libs-1.20.7-17.el8.x86_64.rpm        217 kB/s |  39 kB     00:00  (2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 771 kB/s |  48 kB     00:00  (3/5): which-2.21-12.el8.x86_64.rpm             197 kB/s |  49 kB     00:00  (4/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  1.6 MB/s | 1.4 MB     00:00  (5/5): vim-common-8.0.1763-15.el8.x86_64.rpm    2.1 MB/s | 6.3 MB     00:03  --------------------------------------------------------------------------------Total                                           1.8 MB/s | 7.8 MB     00:04   warning: /var/cache/dnf/appstream-02e86d1c976ab532/packages/gpm-libs-1.20.7-17.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEYCentOS Linux 8 - AppStream                      1.6 MB/s | 1.6 kB     00:00  Importing GPG key 0x8483C65D: Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot; Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficialKey imported successfullyRunning transaction checkTransaction check succeeded.Running transaction testTransaction test succeeded.Running transaction  Preparing        :                                                        1/1   Installing       : which-2.21-12.el8.x86_64                               1/5   Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5   Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5   Installing       : gpm-libs-1.20.7-17.el8.x86_64                          4/5   Running scriptlet: gpm-libs-1.20.7-17.el8.x86_64                          4/5   Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5   Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5   Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5   Verifying        : gpm-libs-1.20.7-17.el8.x86_64                          1/5   Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5   Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5   Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5   Verifying        : which-2.21-12.el8.x86_64                               5/5 Installed:  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch  which-2.21-12.el8.x86_64     Complete!Removing intermediate container 421a061a716d ---&gt; f88663230bd4Step 7/15 : ENV MYPATH /usr/local ---&gt; Running in b29e7feb8197Removing intermediate container b29e7feb8197 ---&gt; f88b3b6b9fc4Step 8/15 : WORKDIR $MYPATH ---&gt; Running in e322ebc34b34Removing intermediate container e322ebc34b34 ---&gt; d4ccfa95cba3Step 9/15 : ENV JAVA_HOME /usr/local/jdk1.8.0_291 ---&gt; Running in 7f7849cc8d4fRemoving intermediate container 7f7849cc8d4f ---&gt; ddd14b26fae7Step 10/15 : ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar ---&gt; Running in 87d807a16caeRemoving intermediate container 87d807a16cae ---&gt; 15f6402f5a54Step 11/15 : ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.48 ---&gt; Running in cee8a00cd2dbRemoving intermediate container cee8a00cd2db ---&gt; 1c582cbd31c7Step 12/15 : ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.48 ---&gt; Running in 290c5f06ce92Removing intermediate container 290c5f06ce92 ---&gt; 3caea79d33e8Step 13/15 : ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin ---&gt; Running in 79f38c96cd90Removing intermediate container 79f38c96cd90 ---&gt; caf7b868665fStep 14/15 : EXPOSE 8080 ---&gt; Running in 499d5b411319Removing intermediate container 499d5b411319 ---&gt; 1ed395c4db26Step 15/15 : CMD /usr/local/apache-tomcat-9.0.48/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.48/bin/logs/catalina.out ---&gt; Running in 08a268721b7cRemoving intermediate container 08a268721b7c ---&gt; 82452044925fSuccessfully built 82452044925fSuccessfully tagged diytomcat:latest[root@centos7 tomcat]# docker imagesREPOSITORY               TAG       IMAGE ID       CREATED              SIZEdiytomcat                latest    82452044925f   About a minute ago   646MBdocker-entrypoint-test   latest    8524617105fd   7 hours ago          209MBcmdtest                  latest    da2d7b4985a1   7 hours ago          209MBmycentos                 0.1       ef11becad48a   25 hours ago         295MBsun/centos               1.0       fd96f4121255   31 hours ago         209MBtomcat02                 1.0       61485aa8d509   3 days ago           672MBtomcat                   9.0       5505f7218e4d   6 days ago           667MBtomcat                   latest    5505f7218e4d   6 days ago           667MBredis                    latest    fad0ee7e917a   3 weeks ago          105MBnginx                    latest    d1a364dc548d   4 weeks ago          133MBmysql                    5.7       2c9028880e58   6 weeks ago          447MBportainer/portainer      latest    580c0e4e98b0   3 months ago         79.1MBcentos                   latest    300e315adb2f   6 months ago         209MBelasticsearch            7.6.2     f29a1ee41030   15 months ago        791MB[root@centos7 tomcat]# \n\n\n启动镜像\n\n[root@centos7 tomcat]# docker run -d -p 9090:8080 --name suntomcat1 -v /home/name/build/tomcat/testwebapps:/usr/local/apache-tomcat-9.0.48/webapps/test -v /home/name/build/tomcat/tomcatlogs:/usr/local/apache-tomcat-9.0.48/logs diytomcat1172d133897813cbf1731037a3b0b52353e7f83b0d6a2adac7ad265c0b1d87fa[root@centos7 tomcat]# docker exec -it 1172d133897813cbf17 /bin/bash[root@1172d1338978 local]# llbash: ll: command not found[root@1172d1338978 local]# lsapache-tomcat-9.0.48  bin  etc\tgames  include\tjdk1.8.0_291  lib  lib64  libexec  readme.txt  sbin  share  src[root@1172d1338978 local]# \n\n\n访问测试\n\n\n\n发布项目\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;&lt;/web-app&gt;\n\n&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;br/&gt;&lt;%System.out.println(&quot;----my test web log----&quot;);%&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n\n项目测试\n\n\n\n发布自己的镜像[root@centos7 /]# docker login --helpUsage:  docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username # 登录账号 密码 S05141123l [root@centos7 home]# docker login -u namePassword: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded[root@centos7 home]# # 错误The push refers to repository [docker.io/sun/diytomcat]An image does not exist locally with the tag: sun/diytomcat# 解决[root@centos7 home]# docker tag 82452044925f sun/tomcat:1.0[root@centos7 home]# docker imagesREPOSITORY               TAG       IMAGE ID       CREATED         SIZEdiytomcat                latest    82452044925f   16 hours ago    646MBsun/tomcat               1.0       82452044925f   16 hours ago    646MBdocker-entrypoint-test   latest    8524617105fd   23 hours ago    209MBcmdtest                  latest    da2d7b4985a1   23 hours ago    209MBmycentos                 0.1       ef11becad48a   40 hours ago    295MBsun/centos               1.0       fd96f4121255   47 hours ago    209MBtomcat02                 1.0       61485aa8d509   3 days ago      672MBtomcat                   9.0       5505f7218e4d   7 days ago      667MBtomcat                   latest    5505f7218e4d   7 days ago      667MBredis                    latest    fad0ee7e917a   3 weeks ago     105MBnginx                    latest    d1a364dc548d   4 weeks ago     133MBmysql                    5.7       2c9028880e58   6 weeks ago     447MBportainer/portainer      latest    580c0e4e98b0   3 months ago    79.1MBcentos                   latest    300e315adb2f   6 months ago    209MBelasticsearch            7.6.2     f29a1ee41030   15 months ago   791MB[root@centos7 home]# # push到dockerhub[root@centos7 home]# docker tag diytomcat name/tomcat-diy[root@centos7 home]# docker push name/tomcat-diy:latestThe push refers to repository [docker.io/name/tomcat-diy]f3da40fad94f: Pushed 002600359583: Pushed 792c4cae176c: Pushed 9b177b322da8: Pushed 2653d992f4ef: Pushed latest: digest: sha256:f0c2dd722b385a82e211e519b4ec328d8b862fa85bd5ff5419c1aceecb44700b size: 1373\n\n小结\nDocker网络\n三个网络\n\n运行容器\n\n[root@centos7 ~]# docker run -d -P --name tomcat01 tomcat27479ed0d31c714c0a76bf554b4c0b1c8d9f54778833b7ed951828c2c95869e4\n\n\n查看ip\n\n[root@centos7 ~]# docker exec -it tomcat01 ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever88: eth0@if89: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever\n\n\n查看是否ping通\n\n[root@centos7 ~]# ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.197 ms64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.132 ms64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.079 ms64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.067 ms64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.056 ms^C--- 172.17.0.2 ping statistics ---5 packets transmitted, 5 received, 0% packet loss, time 4021msrtt min/avg/max/mdev = 0.056/0.106/0.197/0.052 ms[root@centos7 ~]# # linux可以ping通容器内部\n\n\n启动容器2测试\n\n[root@centos7 ~]# docker run -d -P --name tomcat02 tomcat9d9c3ec767ddc56f30daa0d00eb525661baee2cb3c79426d233d0bfcb7f919eb[root@centos7 ~]# docker exec -it tomcat02 ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever90: eth0@if91: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever[root@centos7 ~]# \n\n\n分析\n\n\n# 我们发现容器带来网卡都是一对的veth-pair 就是一对虚拟设备接口，成对出现，一段连着协议，一段彼此相连正因为这个技术，veth-pair充当一个桥梁，连接各种虚拟网络设备\n\n&#x3D;&#x3D;测试tomcat01和tomcat02是否可以ping通&#x3D;&#x3D;\n[root@centos7 ~]# docker exec -it tomcat02 ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.239 ms64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.078 ms64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.161 ms^C--- 172.17.0.2 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2msrtt min/avg/max/mdev = 0.078/0.159/0.239/0.066 ms[root@centos7 ~]# \n\n\n网络模型\n\n\n小结\ndocker中网络都是虚拟的，虚拟转发效率高（内网传递文件）只要删除容器，对应网桥一对就没了\n","categories":["容器化技术"],"tags":["Docker"]},{"title":"Docker问题记录","url":"/cmchtge9g003knegba1y3dck7/","content":"docker 运行直接报错\nWARNING: IPv4 forwarding is disabled. Networking will not work.\n\n第一步：在宿主机上执行[root@localhost /]# echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt;/usr/lib/sysctl.d/00-system.conf\n\n第二步：重启 network 和 docker 服务[root@localhost /]# systemctl restart network &amp;&amp; systemctl restart docker\n\n第三步：验证是否成功Docker 已存在的容器,怎么添加新端口号查看容器端口映射情况docker port 容器ID\n\n\n查询容器在本机位置docker inspect 容器ID | grep 容器ID\n\n\n\n进入容器目录需修改 2 个文件\nconfig.v2.json\nhostconfig.json\n\n\n\n备份原始配置为了保证安全,我们修改配置后容器出问题,建议把之前的配置文件备份下:\n\n备份文件\n\n如果容器运行出问题就把备份文件名称后面的.bak 去掉\n关闭 docker 进程$ service docker stop或$ systemctl stop docker\n\n运行完关闭命令后查看\n\n再次查看 docker 进程是否还在运行\nps -aux | grep docker\n\n\n注意：此时由上述命令运行结果可以看出没有在运行，就不要再运行 Docker 的命令，不然程序会自动启动\n修改配置文件修改 config.v2.json\n修改 config.v2.json 查看内部 json 数据\n\n\n\n可以把 json 复制到在线网站去格式化，看起来美观些,格式化后我们找到 Config-&gt;ExposedPorts 里面添加想要的端口号格式为\n\n$ &quot;自己需要的端口/tcp&quot;\n\n\n\n修改到配置文件中\n\n\n修改配置 hostconfig.json\n修改 vim hostconfig.json 查看内部 json 数据\n找到 PortBindings 参数内添加信息\n\n\n\n修改自己需要绑定的端口信息，格式为\n\n&quot;容器内部的端口/tcp&quot;:[    &#123;        &quot;HostIp&quot;: &quot;&quot;,        &quot;HostPort&quot;: &quot;绑定宿主机的端口&quot;    &#125;]\n\n\n\n配置信息后添加保存\n\n\n启动 Dockerservice docker start或systemctl restart docker\n\n查看容器端口映射信息docker port 容器ID\n\n\n一键安装bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)\n\n参考链接\nhttps://blog.csdn.net/qq_45502336/article/details/126135157\n\n\ndocker cli 部署的容器和 docker compose 部署的容器(自定义网络)，双方内部如何才能互相 ping 通\nDocker CLI 部署的容器和 Docker Compose 部署的容器，内部网络默认是使用 Docker 网桥，它们在同一个网络中，因此可以相互访问。假设有一个由 Docker Compose 部署的容器应用程序(自定义网络)，它的服务名为 web，暴露了一个 HTTP 服务。现在我们想从由 Docker CLI 部署的容器中访问该服务。\n\n确定 Docker Compose 容器所在的网络Docker Compose 会为应用程序创建一个默认网络。我们可以使用以下命令来查看该网络：\ndocker network ls\n\n\n找到应用程序的网络名称，例如 myapp_default。\n\nroot@VM-24-11-ubuntu:/data/docker/mysql# docker-compose up -dCreating network &quot;mysql_default&quot; with the default driverCreating mysql_phpmyadmin_1 ... doneCreating mysql_db_1         ... doneroot@VM-24-11-ubuntu:/data/docker/mysql# docker network lsNETWORK ID     NAME                DRIVER    SCOPE20f53b127fad   bridge              bridge    local667cea2f4d50   host                host      local6051526b2b77   mysql_default       bridge    localeb37be31f571   none                null      locald5453e31729c   wordpress_default   bridge    local\n\n连接到 Docker Compose 容器所在的网络使用以下命令连接到 Docker Compose 容器所在的网络：\ndocker network connect myapp_default &lt;docker_cli_container_name&gt;\n\n其中，myapp_default 是应用程序的网络名称， 是 Docker CLI 部署的容器名称。\nroot@VM-24-11-ubuntu:/data/docker/mysql# docker network connect mysql_default vscode-server(docker cli部署容器)\n\n测试容器之间的连通性现在我们可以从 Docker CLI 部署的容器中使用 ping 命令测试与 Docker Compose 容器之间的连通性：\ndocker exec &lt;docker_cli_container_name&gt; ping &lt;docker_compose_container_name&gt;\n\n其中， 是 Docker CLI 部署的容器名称，web 是应用程序中的服务名称。如果一切正常，你应该能够看到类似以下的输出：\nroot@VM-24-11-ubuntu:/data/docker/mysql# docker exec vscode-server ping mysql_db_1PING mysql_db_1 (172.25.0.2) 56(84) bytes of data.64 bytes from mysql_db_1.mysql_default (172.25.0.2): icmp_seq=1 ttl=64 time=0.098 ms64 bytes from mysql_db_1.mysql_default (172.25.0.2): icmp_seq=2 ttl=64 time=0.063 ms64 bytes from mysql_db_1.mysql_default (172.25.0.2): icmp_seq=3 ttl=64 time=0.061 ms^Croot@VM-24-11-ubuntu:/data/docker/mysql# docker exec vscode-server ping mysql_phpmyadmin_1PING mysql_phpmyadmin_1 (172.25.0.3) 56(84) bytes of data.64 bytes from mysql_phpmyadmin_1.mysql_default (172.25.0.3): icmp_seq=1 ttl=64 time=0.087 ms64 bytes from mysql_phpmyadmin_1.mysql_default (172.25.0.3): icmp_seq=2 ttl=64 time=0.067 ms64 bytes from mysql_phpmyadmin_1.mysql_default (172.25.0.3): icmp_seq=3 ttl=64 time=0.095 ms64 bytes from mysql_phpmyadmin_1.mysql_default (172.25.0.3): icmp_seq=4 ttl=64 time=0.063 ms^Croot@VM-24-11-ubuntu:/data/docker/mysql# ^C\n\n注意，如果你的应用程序使用了自定义网络，你需要使用自定义网络名称代替默认名称。同时，还需要确保 Docker Compose 和 Docker CLI 部署的容器都在同一个网络中\n普通用户如何执行 docker 命令1.创建docker用户组[admin@Centos8 local]$ sudo groupadd docker2.将admin用户填进docker组中[admin@Centos8 local]$ sudo gpasswd -a $&#123;USER&#125; admin3.重启docke服务[admin@Centos8 local]$ sudo service docker restartRedirecting to /bin/systemctl restart docker.service[admin@Centos8 local]$ docker ps4.如果普通用户执行docker命令，如果提示get …… dial unix /var/run/docker.sock权限不够，则修改/var/run/docker.sock权限使用root用户执行如下命令，即可Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json&quot;: dial unix /var/run/docker.sock: connect: permission denied[admin@Centos8 local]$ sudo chmod a+rw /var/run/docker.sock[admin@Centos8 local]$ docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES[admin@Centos8 local]$\n","categories":["容器化技术"],"tags":["Docker","问题记录"]},{"title":"Kubernetes学习笔记","url":"/cmchtge9h003mnegbeeta5r90/","content":"kubernetes简介\n基本介绍\n\nkubernetes简称k8s，开源，目标是让部署容器化的应用简单高效\nk8s是Google开源的容器编排引擎，支持自动化部署，大规模可伸缩，应用容器化管理\n可创建多个容器，每个容器里运行一个应用实例，通过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问\n\n\n功能和架构\n\n概述Kubernetes 是一个轻便的和可扩展的开源平台，用于管理容器化应用和服务。通过Kubernetes 能够进行应用的自动化部署和扩缩容。在 Kubernetes 中，会将组成应用的容器组合成一个逻辑单元以更易管理和发现。Kubernetes 积累了作为 Google 生产环境运行工作负载 15 年的经验，并吸收了来自于社区的最佳想法和实践。\n\nK8s功能\n\n自动装箱\n自我修复\n水平扩展\n服务发现\n滚动更新\n版本回退\n密钥和配置管理\n存储编排\n批处理\n\n\n应用部署结构分类\n\n无中心节点架构GluterFS\n有中心节点架构HDFSK8S\n\n\nK8S集群架构\n\nK8S集群架构节点角色功能\n\nMaster NodeK8s集群控制节点，对集群进行调度管理，接受集群外用户集群操作请求：Master Node由API Server、Scheduler、ClusterState Store(ETCD数据库)和Controller-ManagerServer组成\n\napiserver 集群统一入口，以restful方式，交给etcd存储\nscheduler 节点调度，选择节点应用部署\ncontroller-manager 处理集群中常规后台任务，一个资源对应一个控制器\netcd 存储系统，永不保存集群相关的数据\n\n\nWorker Node集群工作节点，运行用户业务应用容器；Worker Node包含kubelet、kube proxy和ContainerRuntime\n\nkubelet master派到节点的代表，管理本地容器\nkube-proxy 提供网络代理，负载均衡操作\n\n\n\n\n\nK8S特性\n\npod\n\n最小部署单元\n一组容器的集合\n共享网络\n生命周期是短暂的\n\n\ncontroller\n\n确保预期的pod副本数量\n无状态应用部署\n有状态应用部署\n确保所有的node运行同一个pod\n一次性任务和定时任务\n\n\nService\n\n定义一组pod的访问规则\n\n\n\n\n\n\n\nkubernetes集群搭建kubeadm搭建单master集群\n安装要求\n| 服务器硬件配置要求 |     |     |\n\n\n\nmaster\nnode\n\n\n\nCPU\n2核\n4核\n\n\n内存\n4G\n8G\n\n\n硬盘\n20G\n40G\n\n\n\nvmware虚拟出3台centos7配置如下\n\n\n\n\nip\n默认路由\n用户名\n密码\n用户名\n密码\n\n\n\nmaster\n\n192.168.58.135\n192.168.58.2\nroot\nroot\nadmin\nadmin\n\n\nnode1\n\n192.168.58.136\n192.168.58.2\nroot\nroot\nadmin\nadmin\n\n\nnode2\n\n192.168.58.137\n192.168.58.2\nroot\nroot\nadmin\nadmin\n\n\n\n更改ip配置\n\n# 打开配置文件vi /etc/sysconfig/network-scripts/ifcfg-ens33# 修改配置BOOTPROTO=&quot;static&quot;ONBOOT=&quot;yes&quot;IPADDR=192.168.58.135NETMASK=255.255.255.0GATEWAY=192.168.58.2DNS1=192.168.58.2# 重启服务systemctl restart network\n\n配置环境\n新增\n\nbash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/ChangeMirrors.sh)\n\n\n新增\n\n\n安装虚拟机，上述已安装，开始之前，添加如下依赖\n\n# 以上centos7选择最小安装，安装完之后，下载依赖yum install -y wget net-tools vim lsof\n\n\n在master,node1,node2中关闭防火墙\n\nsystemctl stop firewalldsystemctl disable firewalld\n\n\n在master,node1,node2中关闭selinux\n\n# 永久sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config# 临时setenforce 0\n\n\n在master,node1,node2中关闭swap\n\n# 临时swapoff -a# 永久sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab\n\n\n根据规划设置master,node1,node2主机名\n\nhostnamectl set-hostname 主机名hostname\n\n\n在所有节点中添加host\n\ncat &gt;&gt; /etc/hosts &lt;&lt; EOF192.168.10.104 server192.168.10.101 master192.168.10.105 node1192.168.10.103 node2185.199.108.133 raw.githubusercontent.com185.199.109.133 raw.githubusercontent.com185.199.110.133 raw.githubusercontent.com185.199.111.133 raw.githubusercontent.comEOF\n\n\n在master,node1,node2中设置将桥接的IPV4流量传递到iptables的链：\n\ncat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF# 生效sysctl --system\n\n\n在master,node1,node2中设置时间同步\n\nyum install ntpdate -yntpdate time.windows.com\n\n\nCentos8新增替换上述内容\n\nsudo dnf install chronysudo systemctl start chronydsudo systemctl enable chronydsudo timedatectl set-timezone Asia/Shanghaisudo chronyc -a makestepsudo systemctl status chronydtimedatectl\n\n如果在CentOS 8上执行sudo dnf install ntp命令时出现“未找到匹配的参数: ntp”错误，则可能是因为ntp包已被移除或替换为chrony服务。可以使用以下命令来安装并启用chrony服务：安装chrony服务sudo dnf install chrony启动chrony服务sudo systemctl start chronyd设置chrony服务开机自启sudo systemctl enable chronyd将时区设置为上海使用以下命令将时区设置为上海（Asia/Shanghai）：sudo timedatectl set-timezone Asia/Shanghai手动同步时间使用以下命令手动同步时间：sudo chronyc -a makestep这会从指定的NTP服务器获取当前的时间并将其应用于系统时钟。验证chrony服务是否正常运行使用以下命令检查chrony服务是否已经开始运行：sudo systemctl status chronyd如果提示“Active: active (running)”则表示chrony服务已经在后台正常运行。验证时区设置是否正确使用以下命令验证时区设置是否正确：timedatectl输出结果应该包含类似于“Time zone: Asia/Shanghai”这样的行，表示时区已经成功设置为上海。\n\n所有节点安装Docker&#x2F;kubeadm&#x2F;kubelet\n新增\n\nbash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)\n\n\n新增\n\nKubernetes默认CRI(容器运行时为docker),因此先安装docker\n\nhttps://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.57e31b112D5RuA\n\n\n安装Docker\n\n# step 1: 安装必要的一些系统工具sudo yum install -y yum-utils device-mapper-persistent-data lvm2# Step 2: 添加软件源信息sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# Step 3sudo sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo# Step 4: 更新并安装Docker-CE,注意安装版本，指定版本看下列sudo yum makecachesudo yum -y install docker-ce# Step 5: 开启Docker服务systemctl enable docker &amp;&amp; systemctl start dockerdocker --version# 注意以下可选不需要一定执行：# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。# vim /etc/yum.repos.d/docker-ce.repo#   将[docker-ce-test]下方的enabled=0修改为enabled=1## 安装指定版本的Docker-CE:# Step 1: 查找Docker-CE的版本:# yum list docker-ce.x86_64 --showduplicates | sort -r#   Loading mirror speeds from cached hostfile#   Loaded plugins: branch, fastestmirror, langpacks#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable#   Available Packages# Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)# sudo yum -y install docker-ce-20.10.21-3.el7或[root@a ~]# sudo dnf install -y docker-ce-20.10.9 docker-ce-cli-20.10.9 containerd.io --allowerasing\n\n\n添加阿里云YUM软件源\n\n设置仓库地址\ncat &gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;&quot;exec-opts&quot;: [   &quot;native.cgroupdriver=systemd&quot;],&quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]&#125;EOF# 重启dockersystemctl restart docker\n\n\n设置 kubernetes yum 源\n\ncat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg        https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF\n\ncentos8更新\n\nhttps://developer.aliyun.com/mirror/kubernetes\n\nsudo bash -c &#x27;cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF&#x27;\n\n\n所有节点安装kubeadm,kubelet和kubectl\n\nyum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6systemctl enable kubelet\n\nyum install -y kubelet-1.23.17 kubeadm-1.23.17 kubectl-1.23.17systemctl enable kubelet\n\n安装错误之后如何卸载sudo dnf remove -y kubelet kubeadm kubectlsudo systemctl stop kubeletsudo rm -rf /etc/kubernetessudo rm -rf /var/lib/kubelet\n\n在master上部署Kubernetes（初始化之后操作根据返回结果自行调整）\n在master(192.168.58.135)上执行，注意–kubernetes-version v1.23.6的版本要与kubeadm,kubelet和kubectl的版本对应\n\n\ncentos8\n\nkubeadm init --apiserver-advertise-address=192.168.58.149 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.23.17 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16\n\nkubeadm init --apiserver-advertise-address=192.168.58.138 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.23.6 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16# --kubernetes-version v1.23.6的版本如果与kubeadm,kubelet和kubectl的版本不一致会导致初始化失败，解决方案如下rm -rf /etc/kubernetes/manifests/kube-apiserver.yamlrm -rf /etc/kubernetes/manifests/kube-controller-manager.yamlrm -rf /etc/kubernetes/manifests/kube-scheduler.yamlrm -rf /etc/kubernetes/manifests/etcd.yamlkubeadm reset# 初始化成功后将会看到如下信息[addons] Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:# 初始化成功后操作1  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configAlternatively, if you are the root user, you can run:  export KUBECONFIG=/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.# 初始化成功后操作2Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:# 初始化成功后操作3kubeadm join 192.168.58.135:6443 --token lqsu8e.slm32auk92zge8uv \\\t--discovery-token-ca-cert-hash sha256:fd9eb078dbe1e64d83463c78879496e993eb1c7b4b586ee17ec9e130bd158e01 [root@k8smaster ~]#kubeadm join 192.168.58.138:6443 --token xerq7h.qy6q9l0qqup2vxpf --discovery-token-ca-cert-hash sha256:cad363c2d71e7320d1b58dce408f08cba3bec41106296fb2a87c92c22a206c14\n\n\nmaster初始化成功后操作1\n\n开始使用集群时，需要作为常规用户运行以下命令，(由上述kubeadm init成功后的结果作为输入)\nmkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config#查看是否执行成功[root@k8smaster ~]# kubectl get nodesNAME        STATUS   ROLES                  AGE   VERSIONk8smaster   Ready    control-plane,master   42m   v1.23.6k8snode1    Ready    &lt;none&gt;                 24m   v1.23.6k8snode2    Ready    &lt;none&gt;                 24m   v1.23.6[root@k8smaster ~]#\n\n\nmaster初始化成功后操作2\n\n部署CNI网络(由上述kubeadm init成功后的结果作为输入)\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n上述kubectl apply -f 命令执行时，有时会遇到如下错误\n[root@k8smaster ~]# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ymlThe connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?\n\n解决方法为更改&#x2F;etc&#x2F;hosts，增加主机映射\n去下面的网址，输入上述命令中的下载网址raw.githubusercontent.com，将查到的IP地址添加到&#x2F;etc&#x2F;hosts\n\nhttps://ip.tool.chinaz.com\n\n[root@k8smaster ~]# cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.58.135 k8smaster192.168.58.136 k8snode1192.168.58.137 k8snode2185.199.108.133 raw.githubusercontent.com185.199.109.133 raw.githubusercontent.com185.199.110.133 raw.githubusercontent.com185.199.111.133 raw.githubusercontent.com[root@k8smaster ~]# \n\n\nmaster初始化成功后操作3\n\n加入Kubernetes Node(由上述kubeadm init成功后的结果作为输入)\nkubeadm join 192.168.58.135:6443 --token lqsu8e.slm32auk92zge8uv --discovery-token-ca-cert-hash sha256:fd9eb078dbe1e64d83463c78879496e993eb1c7b4b586ee17ec9e130bd158e01#（备注） node部署完节点之后，去master再次查看节点[root@k8smaster ~]# kubectl get nodesNAME        STATUS     ROLES                  AGE   VERSIONk8smaster   NotReady   control-plane,master   18m   v1.23.6k8snode1    NotReady   &lt;none&gt;                 18s   v1.23.6k8snode2    NotReady   &lt;none&gt;                 6s    v1.23.6\n\n测试是否执行成功[root@k8smaster ~]# kubectl get pods -n kube-systemNAME                                READY   STATUS    RESTARTS   AGEcoredns-6d8c4cb4d-2vdnc             1/1     Running   0          37mcoredns-6d8c4cb4d-s2hhx             1/1     Running   0          37metcd-k8smaster                      1/1     Running   0          37mkube-apiserver-k8smaster            1/1     Running   0          37mkube-controller-manager-k8smaster   1/1     Running   0          37mkube-proxy-4wsv9                    1/1     Running   0          37mkube-proxy-56zvx                    1/1     Running   0          19mkube-proxy-89fcx                    1/1     Running   0          19mkube-scheduler-k8smaster            1/1     Running   0          37m[root@k8smaster ~]# \n\n网络部署好之后，可通过如下命令查看各个node状态，STATUS都为Ready证明已准备好\n[root@k8smaster ~]# kubectl get nodesNAME        STATUS   ROLES                  AGE   VERSIONk8smaster   Ready    control-plane,master   42m   v1.23.6k8snode1    Ready    &lt;none&gt;                 24m   v1.23.6k8snode2    Ready    &lt;none&gt;                 24m   v1.23.6[root@k8smaster ~]#\n\n测试Kubernetes集群kubectl create deployment nginx --image=nginxkubectl expose deployment nginx --port=80 --type=NodePortkubectl get pod,svc访问地址：http://NodeIP:Port# 创建一个pod[root@k8smaster ~]# kubectl create deployment nginx --image=nginxdeployment.apps/nginx created# 查看创建的pod，STATUS是否为Running[root@k8smaster ~]# kubectl get podNAME                     READY   STATUS    RESTARTS   AGEnginx-85b98978db-4b2xz   1/1     Running   0          45s# 暴露端口[root@k8smaster ~]# kubectl expose deployment nginx --port=80 --type=NodePortservice/nginx exposed# 查看当前的pod状态还有对外暴露的端口是多少[root@k8smaster ~]# kubectl get pod,svcNAME                         READY   STATUS    RESTARTS   AGEpod/nginx-85b98978db-4b2xz   1/1     Running   0          119sNAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGEservice/kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        48mservice/nginx        NodePort    10.99.127.192   &lt;none&gt;        80:32502/TCP   16s\n\n访问地址：http://NodeIP:Port\n\n\n\n运行后一段时间的k8s如何再重新加入节点注意：新加入的节点必须完成上述2.1.1.2中的所有配置要求，保证和其他节点默认配置一致\n\n查看当前节点\n\n[root@SqaMaster1 kubernetes]# kubectl get nodeNAME         STATUS     ROLES                  AGE     VERSIONsqamaster1   Ready      control-plane,master   2d20h   v1.23.6sqanode1     Ready      &lt;none&gt;                 2d20h   v1.23.6sqanode2     Ready      &lt;none&gt;                 2d20h   v1.23.6[root@SqaMaster1 kubernetes]# \n\n\n查看token，一般有效期24小时，超过之后没有\n\n[root@SqaMaster1 kubernetes]# kubeadm token list\n\n\n在k8s-master上使用以下命令重新生成令牌\n\n[root@SqaMaster1 kubernetes]# kubeadm token create --print-join-commandkubeadm join 192.168.171.128:6443 --token x9bmkk.ktxnyt9flaws4970 --discovery-token-ca-cert-hash sha256:8f48b86ee5669521b2648931fd70f25484f04210afd378e3d5b15e8b3c1c878b\n\n\n新节点加入集群\n\n将第三步生成的结果在要加入的节点中输入\n[root@SqaNode3 ~]# kubeadm join 192.168.171.128:6443 --token x9bmkk.ktxnyt9flaws4970 --discovery-token-ca-cert-hash sha256:8f48b86ee5669521b2648931fd70f25484f04210afd378e3d5b15e8b3c1c878b\n\n\n查看当前节点\n\n[root@SqaMaster1 kubernetes]# kubectl get nodeNAME         STATUS     ROLES                  AGE     VERSIONsqamaster1   Ready      control-plane,master   2d20h   v1.23.6sqanode1     Ready      &lt;none&gt;                 2d20h   v1.23.6sqanode2     Ready      &lt;none&gt;                 2d20h   v1.23.6sqanode3     NotReady   &lt;none&gt;                 26s     v1.23.6[root@SqaMaster1 kubernetes]# \n\n\n新节点加入集群时可能出现错误，可使用以下命令尝试之后再次加入\n\n[root@SqaMaster1 kubernetes]# kubeadm reset\n\nKubernetes DashBoardkind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  type: NodePort # new  ports:    - port: 443      targetPort: 8443      nodePort: 30009 # new  selector:    k8s-app: kubernetes-dashboard---\n\n下载yaml文件并运行,以上为具体修改内容，完整文件在下方[root@k8smaster dashboard]# kubectl create -f dashboard-recommended.yaml namespace/kubernetes-dashboard createdserviceaccount/kubernetes-dashboard createdservice/kubernetes-dashboard createdsecret/kubernetes-dashboard-certs createdsecret/kubernetes-dashboard-csrf createdsecret/kubernetes-dashboard-key-holder createdconfigmap/kubernetes-dashboard-settings createdrole.rbac.authorization.k8s.io/kubernetes-dashboard createdclusterrole.rbac.authorization.k8s.io/kubernetes-dashboard createdrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard createdclusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard createddeployment.apps/kubernetes-dashboard createdservice/dashboard-metrics-scraper createddeployment.apps/dashboard-metrics-scraper created[root@k8smaster dashboard]# \n\n查看namespace为kubernetes-dashboard下的资源[root@k8smaster dashboard]# kubectl get pod,svc -n kubernetes-dashboard -o wideNAME                                             READY   STATUS              RESTARTS   AGE   IP       NODE       NOMINATED NODE   READINESS GATESpod/dashboard-metrics-scraper-6f669b9c9b-l8tkp   0/1     ContainerCreating   0          20s   &lt;none&gt;   k8snode1   &lt;none&gt;           &lt;none&gt;pod/kubernetes-dashboard-758765f476-94cz2        0/1     ContainerCreating   0          21s   &lt;none&gt;   k8snode1   &lt;none&gt;           &lt;none&gt;NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE   SELECTORservice/dashboard-metrics-scraper   ClusterIP   10.110.173.13   &lt;none&gt;        8000/TCP        21s   k8s-app=dashboard-metrics-scraperservice/kubernetes-dashboard        NodePort    10.104.63.91    &lt;none&gt;        443:30009/TCP   21s   k8s-app=kubernetes-dashboard[root@k8smaster dashboard]# [root@k8smaster dashboard]# kubectl get pod,svc -n kubernetes-dashboard -o wideNAME                                             READY   STATUS    RESTARTS   AGE    IP            NODE       NOMINATED NODE   READINESS GATESpod/dashboard-metrics-scraper-6f669b9c9b-l8tkp   1/1     Running   0          99s    10.244.1.12   k8snode1   &lt;none&gt;           &lt;none&gt;pod/kubernetes-dashboard-758765f476-94cz2        1/1     Running   0          100s   10.244.1.11   k8snode1   &lt;none&gt;           &lt;none&gt;NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE    SELECTORservice/dashboard-metrics-scraper   ClusterIP   10.110.173.13   &lt;none&gt;        8000/TCP        100s   k8s-app=dashboard-metrics-scraperservice/kubernetes-dashboard        NodePort    10.104.63.91    &lt;none&gt;        443:30009/TCP   100s   k8s-app=kubernetes-dashboard\n\n创建账户[root@k8smaster dashboard]# kubectl create serviceaccount dashboard-admin -n kubernetes-dashboardserviceaccount/dashboard-admin created[root@k8smaster dashboard]# \n\n授权[root@k8smaster dashboard]# kubectl create clusterrolebinding dashboard-admin-rb --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-adminclusterrolebinding.rbac.authorization.k8s.io/dashboard-admin-rb created[root@k8smaster dashboard]# \n\n获取账号token[root@k8smaster dashboard]# kubectl get secrets -n kubernetes-dashboard | grep dashboard-admindashboard-admin-token-6gxrq        kubernetes.io/service-account-token   3      30s# dashboard-admin-token-6gxrq 为下方命令中用到的token[root@k8smaster dashboard]# [root@k8smaster dashboard]# kubectl describe secrets dashboard-admin-token-6gxrq  -n kubernetes-dashboardName:         dashboard-admin-token-6gxrqNamespace:    kubernetes-dashboardLabels:       &lt;none&gt;Annotations:  kubernetes.io/service-account.name: dashboard-admin              kubernetes.io/service-account.uid: 9f1f6487-20c0-4dc5-94b5-5bf688095f79Type:  kubernetes.io/service-account-tokenData====namespace:  20 bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6Il91blJ1cUpPcm03N2UtZFBETjdlMFktWXdienBSQ0VHX0dwemlXYzdtVU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tNmd4cnEiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOWYxZjY0ODctMjBjMC00ZGM1LTk0YjUtNWJmNjg4MDk1Zjc5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.EbNnsYdao-qYPxnuNJ4aqBwVHSN1-pUgV-0N2C5_Qz6YuCufA_21MzJPJBlcXwMiZuTb4x7nI_IOtFRiXUHYDlEWgVCrjjuEfIZM6yEMQzz0tKmS7wqpX_NDkIRhZ7WtTWb3cxu_6sje5GOc6ZxwuONPSqwbndMEzMVXhUyoXRHIgeESYWcaz-o4EuS6vUAYSvqHpcYZsG1f-qqdxl7xzkjO-JbTeQVOQ4cmqEZri3QuRkzZr4illTjSw0c0T33WxyVDLOOGpsd_o4Tb5REaXM1nvintKoiX3WleSjKzje-toLVEOeRxvN9m04xetKJPn8xAM3pZFk5NHGUHBXM5cAca.crt:     1099 bytes[root@k8smaster dashboard]# [root@k8smaster dashboard]# \n\n访问地址：https://192.168.171.128:30999/#/login\n\n打开浏览器会提示是否选择token验证登录，将上方的token输入即可\n\n命令行工具 kubectlkubectl --helpkubectl get node\n\nNFS搭建\nhttps://kuboard.cn/learning/k8s-intermediate/persistent/nfs.html#%E9%85%8D%E7%BD%AEnfs%E6%9C%8D%E5%8A%A1%E5%99%A8\n\n配置NFS服务器\n本章节中所有命令都以 root 身份执行\n\n\n执行以下命令安装 nfs 服务器所需的软件包\n\nyum install -y rpcbind nfs-utils\n\n\n执行命令 vim &#x2F;etc&#x2F;exports，创建 exports 文件，文件内容如下：\n\n/root/nfs_root/ *(insecure,rw,sync,no_root_squash)\n\n\n执行以下命令，启动 nfs 服务\n\n# 创建共享目录，如果要使用自己的目录，请替换本文档中所有的 /root/nfs_root/mkdir /root/nfs_rootsystemctl enable rpcbindsystemctl enable nfs-serversystemctl start rpcbindsystemctl start nfs-serverexportfs -r\n\n\n检查配置是否生效\n\nexportfs# 输出结果如下所示/root/nfs_root /root/nfs_root\n\n已复制到剪贴板！\n\n在客户端测试nfs\n本章节中所有命令都以 root 身份执行\n服务器端防火墙开放111、662、875、892、2049的 tcp &#x2F; udp 允许，否则远端客户无法连接。\n\n\n执行以下命令安装 nfs 客户端所需的软件包\n\nyum install -y nfs-utils\n\n\n执行以下命令检查 nfs 服务器端是否有设置共享目录\n\n# showmount -e $(nfs服务器的IP)showmount -e 172.17.216.82# 输出结果如下所示Export list for 172.17.216.82:/root/nfs_root *\n\n\n执行以下命令挂载 nfs 服务器上的共享目录到本机路径 &#x2F;root&#x2F;nfsmount\n\nmkdir /root/nfsmount# mount -t nfs $(nfs服务器的IP):/root/nfs_root /root/nfsmountmount -t nfs 172.17.216.82:/root/nfs_root /root/nfsmount# 写入一个测试文件echo &quot;hello nfs server&quot; &gt; /root/nfsmount/test.txt\n\n\n在 nfs 服务器上执行以下命令，验证文件写入成功\n\ncat /root/nfs_root/test.txt\n\n参考链接\nhttps://blog.csdn.net/u010349629/article/details/123796789?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168243184516782427417377%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168243184516782427417377&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-123796789-null-null.142^v86^insert_down28v1,239^v2^insert_chatgpt&amp;utm_term=centos8%E4%B8%8B%E6%90%AD%E5%BB%BAk8s&amp;spm=1018.2226.3001.4187\n\n\nhttps://blog.csdn.net/realize_dream/article/details/127284864\n\ndashboard-recommended.yaml# Copyright 2017 The Kubernetes Authors.## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at##     http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.apiVersion: v1kind: Namespacemetadata:  name: kubernetes-dashboard---apiVersion: v1kind: ServiceAccountmetadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboard---kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  type: NodePort # new  ports:    - port: 443      targetPort: 8443      nodePort: 30009 # new  selector:    k8s-app: kubernetes-dashboard---apiVersion: v1kind: Secretmetadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard-certs  namespace: kubernetes-dashboardtype: Opaque---apiVersion: v1kind: Secretmetadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard-csrf  namespace: kubernetes-dashboardtype: Opaquedata:  csrf: &quot;&quot;---apiVersion: v1kind: Secretmetadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard-key-holder  namespace: kubernetes-dashboardtype: Opaque---kind: ConfigMapapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard-settings  namespace: kubernetes-dashboard---kind: RoleapiVersion: rbac.authorization.k8s.io/v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardrules:  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.  - apiGroups: [&quot;&quot;]    resources: [&quot;secrets&quot;]    resourceNames: [&quot;kubernetes-dashboard-key-holder&quot;, &quot;kubernetes-dashboard-certs&quot;, &quot;kubernetes-dashboard-csrf&quot;]    verbs: [&quot;get&quot;, &quot;update&quot;, &quot;delete&quot;]    # Allow Dashboard to get and update &#x27;kubernetes-dashboard-settings&#x27; config map.  - apiGroups: [&quot;&quot;]    resources: [&quot;configmaps&quot;]    resourceNames: [&quot;kubernetes-dashboard-settings&quot;]    verbs: [&quot;get&quot;, &quot;update&quot;]    # Allow Dashboard to get metrics.  - apiGroups: [&quot;&quot;]    resources: [&quot;services&quot;]    resourceNames: [&quot;heapster&quot;, &quot;dashboard-metrics-scraper&quot;]    verbs: [&quot;proxy&quot;]  - apiGroups: [&quot;&quot;]    resources: [&quot;services/proxy&quot;]    resourceNames: [&quot;heapster&quot;, &quot;http:heapster:&quot;, &quot;https:heapster:&quot;, &quot;dashboard-metrics-scraper&quot;, &quot;http:dashboard-metrics-scraper&quot;]    verbs: [&quot;get&quot;]---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboardrules:  # Allow Metrics Scraper to get metrics from the Metrics server  - apiGroups: [&quot;metrics.k8s.io&quot;]    resources: [&quot;pods&quot;, &quot;nodes&quot;]    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]---apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardroleRef:  apiGroup: rbac.authorization.k8s.io  kind: Role  name: kubernetes-dashboardsubjects:  - kind: ServiceAccount    name: kubernetes-dashboard    namespace: kubernetes-dashboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: kubernetes-dashboardroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: kubernetes-dashboardsubjects:  - kind: ServiceAccount    name: kubernetes-dashboard    namespace: kubernetes-dashboard---kind: DeploymentapiVersion: apps/v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  replicas: 1  revisionHistoryLimit: 10  selector:    matchLabels:      k8s-app: kubernetes-dashboard  template:    metadata:      labels:        k8s-app: kubernetes-dashboard    spec:      securityContext:        seccompProfile:          type: RuntimeDefault      containers:        - name: kubernetes-dashboard          image: kubernetesui/dashboard:v2.7.0          imagePullPolicy: Always          ports:            - containerPort: 8443              protocol: TCP          args:            - --auto-generate-certificates            - --namespace=kubernetes-dashboard            # Uncomment the following line to manually specify Kubernetes API server Host            # If not specified, Dashboard will attempt to auto discover the API server and connect            # to it. Uncomment only if the default does not work.            # - --apiserver-host=http://my-address:port          volumeMounts:            - name: kubernetes-dashboard-certs              mountPath: /certs              # Create on-disk volume to store exec logs            - mountPath: /tmp              name: tmp-volume          livenessProbe:            httpGet:              scheme: HTTPS              path: /              port: 8443            initialDelaySeconds: 30            timeoutSeconds: 30          securityContext:            allowPrivilegeEscalation: false            readOnlyRootFilesystem: true            runAsUser: 1001            runAsGroup: 2001      volumes:        - name: kubernetes-dashboard-certs          secret:            secretName: kubernetes-dashboard-certs        - name: tmp-volume          emptyDir: &#123;&#125;      serviceAccountName: kubernetes-dashboard      nodeSelector:        &quot;kubernetes.io/os&quot;: linux      # Comment the following tolerations if Dashboard must not be deployed on master      tolerations:        - key: node-role.kubernetes.io/master          effect: NoSchedule---kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: dashboard-metrics-scraper  name: dashboard-metrics-scraper  namespace: kubernetes-dashboardspec:  ports:    - port: 8000      targetPort: 8000  selector:    k8s-app: dashboard-metrics-scraper---kind: DeploymentapiVersion: apps/v1metadata:  labels:    k8s-app: dashboard-metrics-scraper  name: dashboard-metrics-scraper  namespace: kubernetes-dashboardspec:  replicas: 1  revisionHistoryLimit: 10  selector:    matchLabels:      k8s-app: dashboard-metrics-scraper  template:    metadata:      labels:        k8s-app: dashboard-metrics-scraper    spec:      securityContext:        seccompProfile:          type: RuntimeDefault      containers:        - name: dashboard-metrics-scraper          image: kubernetesui/metrics-scraper:v1.0.8          ports:            - containerPort: 8000              protocol: TCP          livenessProbe:            httpGet:              scheme: HTTP              path: /              port: 8000            initialDelaySeconds: 30            timeoutSeconds: 30          volumeMounts:          - mountPath: /tmp            name: tmp-volume          securityContext:            allowPrivilegeEscalation: false            readOnlyRootFilesystem: true            runAsUser: 1001            runAsGroup: 2001      serviceAccountName: kubernetes-dashboard      nodeSelector:        &quot;kubernetes.io/os&quot;: linux      # Comment the following tolerations if Dashboard must not be deployed on master      tolerations:        - key: node-role.kubernetes.io/master          effect: NoSchedule      volumes:        - name: tmp-volume          emptyDir: &#123;&#125;\n","categories":["容器化技术"],"tags":["Kubernetes"]},{"title":"K3s学习笔记","url":"/cmchtge9h003pnegb7r2chmtt/","content":"K3s安装Server节点安装# 方法1curl -sfL https://get.k3s.io | sh -# 方法2root@google:/home/ldspdvs# curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=&quot;744&quot; sh -s - server --flannel-backend=vxlan --token 12345# 中国curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -\n\n查看Server kubeconfig 文件root@google:/home/ldspdvs# cat /etc/rancher/k3s/k3s.yamlapiVersion: v1clusters:- cluster:    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkakNDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUHYQmhyTTNNdGMyVnkKZG1WeUxXTmhRREUyT1RVeE16QTBNekF3SGhjTk1qTXdPVEU1TVRNek16VXdXaGNOTXpNd09URTJNVE16TXpVdwpXakFqTVNFd0h3WURWUVFEREJock0zTXRjMlZ5ZG1WeUxDFEThRREUyT1RVeE16QTBNekF3V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFSWDRBbXd0SjNzYjd4L3VDSTFoamVxSkJEelpEZEdnWmtLejkxQ1NhSUMKRFM2bGtZKzR6VUswWHpEWjRSWG4wOEQ1TWJIbGlSTHA0akZ2UkRnQ2pod0tvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVUl4VTBoelRSRFM0YjFzRDMzN000CndHY1J4cW93Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnV2wrTlpxYTFrV3hKSmFFdHBReVQrQnJsbUVVN1RVemoKTzEwZUlER2t4RnNDSUdsZW9VUlIrDFEh1L3FZa2xUcTVRQitvT2dVKzQ5bGNTMklUSGFxV01QL1MKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=    server: https://127.0.0.1:6443  name: defaultcontexts:- context:    cluster: default    user: default  name: defaultcurrent-context: defaultkind: Configpreferences: &#123;&#125;users:- name: default  user:    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJrVENDQVRlZ0F3SUJBZ0lJRTcyQVBBMStHVjR3Q2dZSUtvWkl6ajBFQXdJd0l6RWhNQjhHQTFVRUF3d1kKYXpOERTxXTnNhV1Z1ZEMxallVQXhOamsxTVRNd05ETXdNQjRYRFRJek1Ea3hPVEV6TXpNMU1Gb1hEVEkwTURreApPREV6TXpNMU1Gb3dNREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhGVEFUQmdOVkJBTVRESE41CmMzUmxiVHBoWkcxcGJqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJOMDBMUXlDZ0pQbGsvSzDFDEJEdk5sMXF2N2xNcFFSZVE1TUU3V25BZFJIWm15dmtpMWxGVFF1U1pFYWJ3T0o5ZXRVUGVFLy9DVFdHNUlxZQorZGRNemM2alNEQkdNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFmCkJnTlZIU01FR0RBV2dCUkY5cjZKRW4wcnJnY2NHWGlLL1R2YTRjMlJyREFLQmdncWhrak9QUVFEQWdOSUFEQkYKQWlBWk4wMTBTUFVNQTJBMUIrbEJxY1FHemN2R3JWSHhmdnpEbEZDeDE0c1RTUUloQUpMbTNzNXhmS1NOVVFPYwo4ODNtOTN3am5oSW55ZkJPY2pUOElkdEF6SjdmCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkakNDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdFkyeHAKWlc1MExXTmhRREUyT1RVeE16QTBNekF3SGhjTk1qTXdPVEU1TVRNek16VXdXaGNOTXpNd09URTJNVE16TXpVdwpXakFqTVNFd0h3WURWUVFEREJock0zTXRZMnhwWlc1MExXTmhRREUyT1RVeE16QTBNekF3V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqTDFERTUJCd05DQUFSQjRyY3ZpNUUyUzAvUC83WGc4djhnWjBZUlRicFBUdGhiaG9MT3VwU0oKYVQ0dm5VZlp1ODdxT1hWc3hGd0FsQTFkVlp6akl0T25WQ2l3S1BIeWtnUUdvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVJmYStpUko5SzY0SEhCbDRpdjA3CjJ1SE5rYXd3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnTGJQaE43dlUxVjBTKzhlZWhnemlPUWF0Q2dDcWp1c1UKbGtZdldqeHhuTGdDSUZ0KzVQYVVub0t6aTJBZzNab3h0L1RTN2VnU2ZSTlJhZXBCOElTSUsyL2kKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=    client-key-data: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUxYWVVNUXlqMDRobUJTRzlNSll1MHlqUVBtbXNXSTVIdVUrRlFFUkhvdVZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFM1RRdERJS0FrK1dUOHJUEGETPODJYV3EvdVV5bEJGNURrd1R0YWNCMUVkbWJLK1NMV1VWTgpDGETprUnB2QTRuMTYxUTk0VC84Sk5ZYmtpcDc1MTB6TnpnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=root@google:/home/ldspdvs#\n\nAgent节点安装Server 查看Tokenroot@google:/home/ldspdvs# cat /var/lib/rancher/k3s/server/node-tokenK100f8b7f090838618d5458e454db076f13dac95d6999594ddbceb723ec7a005e4d::server:471fa1591fbac45218573dab2fabe3cbroot@google:/home/ldspdvs# \n\nAgent 加入# Agent 节点在加入server节点的时候，会因网络问题导致加入失败，可通过以下方法解决，具体见参考root@aws:/home/ubuntu# iptables -t nat -A OUTPUT -d Server内网IP -j DNAT --to-destination Server外网IP# 方法1root@aws:/home/ubuntu# curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -# 方法2root@aws:/home/ubuntu# curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=12345 sh -# 中国root@aws:/home/ubuntu# curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n卸载Server 卸载root@google:/home/ldspdvs# /usr/local/bin/k3s-uninstall.sh\n\nAgent 卸载root@google:/home/ldspdvs# /usr/local/bin/k3s-agent-uninstall.sh\n\nKuboard部署sudo docker run -d \\  --restart=unless-stopped \\  --name=kuboard \\  -p 80:80/tcp \\  -p 10081:10081/tcp \\  -e KUBOARD_ENDPOINT=&quot;http://YOUR_IP:80&quot; \\  -e KUBOARD_AGENT_SERVER_TCP_PORT=&quot;10081&quot; \\  -v /root/kuboard-data:/data \\  eipwork/kuboard:v3\n\n参考链接https://docs.k3s.io/zh/\nhttps://www.maosi.vip/2022/01/08/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%EF%BC%9A%E6%AD%BB%E7%A3%95k3s%E5%92%8Crancher/\n","categories":["容器化技术"],"tags":["K3s"]},{"title":"Make_CMake学习笔记","url":"/cmchtge9i003tnegbdr3s6xhq/","content":"Makefile简介\nGNU Make 官方网站：https://www.gnu.org/software/make/\nGNU Make 官方文档下载地址：https://www.gnu.org/software/make/manual/\nMakefile Tutorial：https://makefiletutorial.com/\n\n基本格式targets:prerequisties[tab]键command\n\n\ntarget: 目标文件，可以是执行文件，也可以是一个标签\nprerequisite: 要生成那个target所需要的文件或目标\ncommand: make需要执行的命令，如果命令以@开始，将不会输出命令\n\nclean:\t@rm -rf ./*.oroot@3570ce881c55# make cleanroot@3570ce881c55#clean:\trm -rf ./*.oroot@3570ce881c55# make cleanrm -rf ./*.oroot@3570ce881c55#\n\nMakefile规则\nmake会在当前目录下找到一个名字叫Makefile或makefile的文件，如果找到，它会找文件中第一个目标文件（target），并把这个文件作为最终的目标文件\n如果 target 文件不存在，或是 target 文件依赖的 .o 文件(prerequities)的文件修改时间要比 target 这个文件新，就会执行后面所定义的命令 command 来生成 target 这个文件\n如果 target 依赖的 .o 文件（prerequisties）也存在，make 会在当前文件中找到 target 为 .o 文件的依赖性，如果找到，再根据那个规则生成 .o 文件\n\n伪目标为了避免target和Makefile同级目录下 文件/文件夹重名的情况，可以使用一个特殊的标记 .PHONY来显示地指明一个目标是 伪目标，向make说明，不管是否有这个文件&#x2F;文件夹，这个目标就是“伪目标”。\n.PHONY : clean\n\nMakefile的变量变量在声明式需要给予初始值，当使用时，需要给变量名前加上“$”符号，并用小括号()把变量给包裹起来\n变量的定义cpp := src/main.cobj := objs/main.o\n\n变量的引用\n可以使用 ()或 &#123;&#125;\n\ncpp := src/main.cobj := objs/main.o$(obj) : $(cpp)\t@gcc -c $(cpp) -o $(obj)compile: $(obj)\n\n预定义变量\n$@: 目标 (target)的完整名称\n$&lt;: 第一个依赖文件（prerequisties）的名称\n$^: 所有的依赖文件（prerequisties），以空格分开，不包含重复的依赖文件\n\ncpp := src/main.cpp obj := objs/main.o$(obj) : $&#123;cpp&#125;\t@g++ -c $&lt; -o $@\t@echo $^compile : $(obj).PHONY : compile\n\nMakefile常用符号&#x3D;\n简单的赋值运算符，用于将右边的值分配给左边的变量\n重新定义将使用新的值\n\n\n示例\n\nHOST_ARCH = amd64HOST_ARCH = amd32TARGET_ARCH = $(HOST_ARCH)output:\techo TARGET_ARCH\n\n:&#x3D;\n立即赋值运算符，用于在定义变量是立即求值\n该值在定义后将不再修改\n\n\n示例\n\nHOST_ARCH = amd64HOST_ARCH = amd32TARGET_ARCH = $(HOST_ARCH)\n\n?&#x3D;\n默认赋值运算符，如果该变量已经定义不进行任何操作，如果该变量尚未定义则求值并分配\n\n\n示例\n\nHOST_ARCH  = aarch64HOST_ARCH ?= amd64debug:    @echo $(HOST_ARCH)\n\n+&#x3D;\n累加\n\nCXXFLAGS := -m64 -fPIC -g -O0 -std=c++11 -w -fopenmpCXXFLAGS += $(include_paths)\n\n\\\n续行符\n\nLDLIBS := cudart opencv_core \\          gomp nvinfer protobuf cudnn pthread \\          cublas nvcaffe_parser nvinfer_plugin \n\n* 与 %\n*: 通配符表示匹配任意字符串，可以用在目录名或文件名中\n%: 通配符表示匹配任意字符串，并将匹配到的字符串作为变量使用\n\nMakefile常用函数函数调用，很想变量的使用，也是以“$”来标识\n$(fn,arguments) or $&#123;fn,arguments&#125;\n\n\nfn: 函数名\narguments: 函数参数，参数间以逗号 ,分隔，而函数名和参数夹以“空格”分隔\n\nshell$(shell &lt;comand&gt; &lt;arguments&gt;)\n\n\n名称：shell命令函数——shell\n功能：调用shell命令command\n返回值：函数返回shell命令command的执行结果\n\n\n示例\n\n# shell 指令，找到src下所有的.c文件c_srcs := $(shell find src -name &quot;*.c&quot;)# shell 指令，获取计算机架构HOST_ARCH := $(shell uname -m)output_c_srcs:\t@echo $(c_srcs)\t@echo $(HOST_ARCH)\n\nroot@3570ce881c55:~/code/vscode-server/Personal/CMake# make output_c_srcssrc/main.c src/framework.c src/pthread/pthread_demo_01.c src/proc/mem_segments.c src/temp/temp.c src/file/S0100201GN_02.cx86_64root@3570ce881c55:~/code/vscode-server/Personal/CMake# \n\nsubst$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)\n\n\n名称：字符串替换函数\n功能：把字符串 &lt;text&gt;中的 &lt;from&gt;字符串替换成 &lt;to&gt;\n返回：函数返回被替换后的字符串\n\n\n示例\n\nc_srcs := $(shell find src -name &quot;*.c&quot;)c_objs_1 := $(subst src/,objs/,$(c_srcs))c_objs_2 := $(subst .c,.o,$(c_objs_1))out_substs:\t@echo $&#123;c_srcs&#125;\t@echo ==========================\t@echo $&#123;c_objs_1&#125;\t@echo ==========================\t@echo $&#123;c_objs_2&#125;\n\nroot@3570ce881c55:~/code/vscode-server/Personal/CMake# make out_substssrc/main.c src/framework.c src/pthread/pthread_demo_01.c src/proc/mem_segments.c src/temp/temp.c src/file/S0100201GN_02.c==========================objs/main.c objs/framework.c objs/pthread/pthread_demo_01.c objs/proc/mem_segments.c objs/temp/temp.c objs/file/S0100201GN_02.c==========================objs/main.o objs/framework.o objs/pthread/pthread_demo_01.o objs/proc/mem_segments.o objs/temp/temp.o objs/file/S0100201GN_02.oroot@3570ce881c55:~/code/vscode-server/Personal/CMake# \n\npatsubst$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text)\n\n\n名称：模式字符串替换函数\n功能：通配符 %，表示任意长度的字符串，从 &lt;text&gt;中取出 &lt;pattern&gt;，替换成 &lt;replacepattern&gt;\n返回：函数返回被替换过后的字符串\n\n\n示例\n\nc_srcs := $(shell find src -name &quot;*.c&quot;)c_patsubst:=$&#123;patsubst src/%.c,objs/%.o,$(c_srcs)&#125;out_patsubst:\t@echo $&#123;c_srcs&#125;\t@echo ==========================\t@echo $(c_patsubst)\n\nroot@3570ce881c55:~/code/vscode-server/Personal/CMake# make out_patsubstsrc/main.c src/framework.c src/pthread/pthread_demo_01.c src/proc/mem_segments.c src/temp/temp.c src/file/S0100201GN_02.c==========================objs/main.o objs/framework.o objs/pthread/pthread_demo_01.o objs/proc/mem_segments.o objs/temp/temp.o objs/file/S0100201GN_02.oroot@3570ce881c55:~/code/vscode-server/Personal/CMake# \n\nforeach$(foreach &lt;var&gt;,&lt;list&gt;,&lt;test&gt;)\n\n\n名称：循环函数\n功能：把字符串 &lt;list&gt;中的元素逐一取出来，执行 &lt;text&gt;包含的表达式\n返回：&lt;test&gt;返回每个字符串组成的整个字符串\n\n\n示例\n\ninclude_paths := /usr/include \\\t\t\t\t/root/code/vscode-server/Personal/CMake/includeinclude_paths_foreach:=$(foreach item,$(include_paths),-I $(item))out_include:\t@echo $(include_paths)\t@echo ----------------------\t@echo $(include_paths_foreach)\n\nforeach类比python\nfor item in includes:    item = &quot;-I &quot; + item\n\n同等效果\ninclude_paths := /usr/include \\\t\t\t\t/root/code/vscode-server/Personal/CMake/includeI_flag := $(include_paths:%=-I %)out_include:\t@echo $(include_paths)\t@echo ----------------------\t@echo $(I_flag)\n\ndir$(dir &lt;name...&gt;)\n\n\n功能：取目录函数\n功能：从文件名序列中取出目录部分，目录部分是指最后一个反斜杠（‘&#x2F;’）之前的那部分，如果没有反斜杠，那么返回“.&#x2F;”.\n返回：返回文件名序列的目录部分\n\n\n示例\n\n$(dir src/foo.c hacks)# 返回值是“src/ ./”\n\n.PHONY: out_dir compile include_paths := /root/code/vscode-server/Projects/Make_CMake/include \\\t\t\t\t/usr/includeinclude_path := $(foreach item,$(include_paths),-I $(item))c_srcs := $(shell find src -name &quot;*.c&quot;)c_objs:= $(patsubst src/%.c,objs/%.o,$(c_srcs))out_dirs:= $(dir $(c_srcs))objs/%.o : src/%.c\t@mkdir -p $(dir $@)\t@gcc -c $^ -o $@ $(include_path)compile: $(c_objs)out_dir:\t@echo ===============\t@echo $(include_path) \t@echo ===============\t@echo $(c_srcs) \t@echo ===============\t@echo $(c_objs) \t@echo ===============\t@echo $(out_dirs) \n\nroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# make out_dir===============-I /root/code/vscode-server/Projects/Make_CMake/include -I /usr/include===============src/main.c src/pthread/pthread_demo_01.c src/proc/mem_segments.c src/temp/temp.c src/file/S0100201GN_02.c===============objs/main.o objs/pthread/pthread_demo_01.o objs/proc/mem_segments.o objs/temp/temp.o objs/file/S0100201GN_02.o===============src/ src/pthread/ src/proc/ src/temp/ src/file/root@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# \n\nnotdir$(notdir &lt;name...&gt;)\n\n\n示例\n\nlibs:= $(shell find /usr/lib -name lib*)libs_notdir:= $(notdir $(shell find /usr/lib -name lib*))out_notdir:\t@echo ============= libs =============\t@echo $(libs) \t@echo ============= libs_notdir =============\t@echo $(libs_notdir) \n\nroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# make out_notdir============= libs =============/usr/lib /usr/lib/usrmerge/lib /usr/lib/x86_64-linux-gnu/libgcc_s.so.1 /usr/lib/x86_64-linux-gnu/libe2p.so.2 /usr/lib/x86_64-linux-gnu/libBrokenLocale.so.1 /usr/lib/x86_64-linux-gnu/libcap-ng.so.0.0.0 /usr/lib/x86_64-linux-gnu/libformw.so.6 /usr/lib/x86_64-linux-gnu/libapt-private.so.0.0 /usr/lib/x86_64-linux-gnu/libtasn1.so.6 /usr/lib/x86_64-linux-gnu/libunistring.so.2 /usr/lib/x86_64-linux-gnu/libcom_err.so.2.1 /usr/lib/x86_64-linux-gnu/libpamc.so.0.82.1 /usr/lib/x86_64-linux-gnu/libgnutls.so.30 /usr/lib/x86_64-linux-gnu/libtinfo.so.6.4 /usr/lib/x86_64-linux-gnu/libss.so.2.0 /usr/lib/x86_64-linux-gnu/libxxhash.so.0.8.1 /usr/lib/x86_64-linux-gnu/libmount.so.1 /usr/lib/x86_64-linux-gnu/libunistring.so.2.2.0 /usr/lib/x86_64-linux-gnu/libdrop_ambient.so.0.0.0 /usr/lib/x86_64-linux-gnu/libffi.so.8.1.2 /usr/lib/x86_64-linux-gnu/libncursesw.so.6.4 /usr/lib/x86_64-linux-gnu/libtasn1.so.6.6.3 /usr/lib/x86_64-linux-gnu/libpsx.so.2.66 /usr/lib/x86_64-linux-gnu/libsystemd.so.0.35.0 /usr/lib/x86_64-linux-gnu/libaudit.so.1 /usr/lib/x86_64-linux-gnu/libpam_misc.so.0 /usr/lib/x86_64-linux-gnu/libapt-private.so.0.0.0 /usr/lib/x86_64-linux-gnu/libgcrypt.so.20 /usr/lib/x86_64-linux-gnu/libp11-kit.so.0.3.0 /usr/lib/x86_64-linux-gnu/libe2p.so.2.3 /usr/lib/x86_64-linux-gnu/libext2fs.so.2.4 /usr/lib/x86_64-linux-gnu/libformw.so.6.4 /usr/lib/x86_64-linux-gnu/libsmartcols.so.1.1.0 /usr/lib/x86_64-linux-gnu/libmd.so.0 /usr/lib/x86_64-linux-gnu/librt.so.1 /usr/lib/x86_64-linux-gnu/libsmartcols.so.1 /usr/lib/x86_64-linux-gnu/libuuid.so.1 /usr/lib/x86_64-linux-gnu/libpcre2-8.so.0 /usr/lib/x86_64-linux-gnu/libdb-5.3.so /usr/lib/x86_64-linux-gnu/gconv/libJIS.so /usr/lib/x86_64-linux-gnu/gconv/libJISX0213.so /usr/lib/x86_64-linux-gnu/gconv/libCNS.so /usr/lib/x86_64-linux-gnu/gconv/libISOIR165.so /usr/lib/x86_64-linux-gnu/gconv/libKSC.so /usr/lib/x86_64-linux-gnu/gconv/libGB.so /usr/lib/x86_64-linux-gnu/libattr.so.1 /usr/lib/x86_64-linux-gnu/libmemusage.so /usr/lib/x86_64-linux-gnu/libmenuw.so.6.4 /usr/lib/x86_64-linux-gnu/libaudit.so.1.0.0 /usr/lib/x86_64-linux-gnu/libgpg-error.so.0.33.1 /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/lib/x86_64-linux-gnu/libz.so.1 /usr/lib/x86_64-linux-gnu/libpcprofile.so /usr/lib/x86_64-linux-gnu/libseccomp.so.2 /usr/lib/x86_64-linux-gnu/libidn2.so.0.3.8 /usr/lib/x86_64-linux-gnu/libgcrypt.so.20.4.1 /usr/lib/x86_64-linux-gnu/libz.so.1.2.13 /usr/lib/x86_64-linux-gnu/libcap.so.2 /usr/lib/x86_64-linux-gnu/libgnutls.so.30.34.2 /usr/lib/x86_64-linux-gnu/libdebconfclient.so.0 /usr/lib/x86_64-linux-gnu/libuuid.so.1.3.0 /usr/lib/x86_64-linux-gnu/libmvec.so.1 /usr/lib/x86_64-linux-gnu/libdrop_ambient.so.0 /usr/lib/x86_64-linux-gnu/libthread_db.so.1 /usr/lib/x86_64-linux-gnu/libffi.so.8 /usr/lib/x86_64-linux-gnu/libudev.so.1.7.5 /usr/lib/x86_64-linux-gnu/libsystemd.so.0 /usr/lib/x86_64-linux-gnu/libpanelw.so.6.4 /usr/lib/x86_64-linux-gnu/libnss_hesiod.so.2 /usr/lib/x86_64-linux-gnu/libc_malloc_debug.so.0 /usr/lib/x86_64-linux-gnu/libproc2.so.0 /usr/lib/x86_64-linux-gnu/libnsl.so.1 /usr/lib/x86_64-linux-gnu/liblzma.so.5.4.1 /usr/lib/x86_64-linux-gnu/libhogweed.so.6.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libutil.so.1 /usr/lib/x86_64-linux-gnu/libcrypt.so.1.1.0 /usr/lib/x86_64-linux-gnu/libsepol.so.2 /usr/lib/x86_64-linux-gnu/libapt-pkg.so.6.0.0 /usr/lib/x86_64-linux-gnu/libgmp.so.10.4.1 /usr/lib/x86_64-linux-gnu/liblz4.so.1.9.4 /usr/lib/x86_64-linux-gnu/libgmp.so.10 /usr/lib/x86_64-linux-gnu/libproc2.so.0.0.1 /usr/lib/x86_64-linux-gnu/libdebconfclient.so.0.0.0 /usr/lib/x86_64-linux-gnu/libncursesw.so.6 /usr/lib/x86_64-linux-gnu/libcap-ng.so.0 /usr/lib/x86_64-linux-gnu/libpam.so.0 /usr/lib/x86_64-linux-gnu/libm.so.6 /usr/lib/x86_64-linux-gnu/libudev.so.1 /usr/lib/x86_64-linux-gnu/libtic.so.6 /usr/lib/x86_64-linux-gnu/libnss_files.so.2 /usr/lib/x86_64-linux-gnu/libcrypt.so.1 /usr/lib/x86_64-linux-gnu/libselinux.so.1 /usr/lib/x86_64-linux-gnu/libnettle.so.8 /usr/lib/x86_64-linux-gnu/libhogweed.so.6 /usr/lib/x86_64-linux-gnu/libresolv.so.2 /usr/lib/x86_64-linux-gnu/libbz2.so.1 /usr/lib/x86_64-linux-gnu/libext2fs.so.2 /usr/lib/x86_64-linux-gnu/libpam_misc.so.0.82.1 /usr/lib/x86_64-linux-gnu/libacl.so.1.1.2301 /usr/lib/x86_64-linux-gnu/libpsx.so.2 /usr/lib/x86_64-linux-gnu/libtic.so.6.4 /usr/lib/x86_64-linux-gnu/libxxhash.so.0 /usr/lib/x86_64-linux-gnu/libsemanage.so.2 /usr/lib/x86_64-linux-gnu/libmount.so.1.1.0 /usr/lib/x86_64-linux-gnu/libblkid.so.1.1.0 /usr/lib/x86_64-linux-gnu/libblkid.so.1 /usr/lib/x86_64-linux-gnu/libss.so.2 /usr/lib/x86_64-linux-gnu/libzstd.so.1 /usr/lib/x86_64-linux-gnu/libpcre2-8.so.0.11.2 /usr/lib/x86_64-linux-gnu/libnss_compat.so.2 /usr/lib/x86_64-linux-gnu/libidn2.so.0 /usr/lib/x86_64-linux-gnu/libmd.so.0.0.5 /usr/lib/x86_64-linux-gnu/liblzma.so.5 /usr/lib/x86_64-linux-gnu/libmenuw.so.6 /usr/lib/x86_64-linux-gnu/libbz2.so.1.0 /usr/lib/x86_64-linux-gnu/liblz4.so.1 /usr/lib/x86_64-linux-gnu/libzstd.so.1.5.4 /usr/lib/x86_64-linux-gnu/libp11-kit.so.0 /usr/lib/x86_64-linux-gnu/libdl.so.2 /usr/lib/x86_64-linux-gnu/libpamc.so.0 /usr/lib/x86_64-linux-gnu/libc.so.6 /usr/lib/x86_64-linux-gnu/libbz2.so.1.0.4 /usr/lib/x86_64-linux-gnu/libpanelw.so.6 /usr/lib/x86_64-linux-gnu/libgpg-error.so.0 /usr/lib/x86_64-linux-gnu/libcap.so.2.66 /usr/lib/x86_64-linux-gnu/libnettle.so.8.6 /usr/lib/x86_64-linux-gnu/libnss_dns.so.2 /usr/lib/x86_64-linux-gnu/perl-base/unicore/lib /usr/lib/x86_64-linux-gnu/perl-base/lib.pm /usr/lib/x86_64-linux-gnu/libapt-pkg.so.6.0 /usr/lib/x86_64-linux-gnu/libacl.so.1 /usr/lib/x86_64-linux-gnu/libpam.so.0.85.1 /usr/lib/x86_64-linux-gnu/libattr.so.1.1.2501 /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.4 /usr/lib/x86_64-linux-gnu/libcom_err.so.2 /usr/lib/x86_64-linux-gnu/libanl.so.1 /usr/lib/x86_64-linux-gnu/libpthread.so.0 /usr/lib/x86_64-linux-gnu/libxcb-sync.so.1.0.0 /usr/lib/x86_64-linux-gnu/libsqlite3.so.0 /usr/lib/x86_64-linux-gnu/libFLAC.so.12 /usr/lib/x86_64-linux-gnu/libdecor-0.so.0.100.1 /usr/lib/x86_64-linux-gnu/libipt.so.2.0.5 /usr/lib/x86_64-linux-gnu/liblsan.so.0 /usr/lib/x86_64-linux-gnu/libdecor /usr/lib/x86_64-linux-gnu/libdecor/plugins-1/libdecor-cairo.so /usr/lib/x86_64-linux-gnu/libcups.so.2 /usr/lib/x86_64-linux-gnu/libubsan.so.1.0.0 /usr/lib/x86_64-linux-gnu/libxcb-glx.so.0 /usr/lib/x86_64-linux-gnu/libvorbisenc.so.2 /usr/lib/x86_64-linux-gnu/libresolv.a /usr/lib/x86_64-linux-gnu/libbabeltrace-ctf-metadata.so.1.0.0 /usr/lib/x86_64-linux-gnu/libcbor.so.0.8.0 /usr/lib/x86_64-linux-gnu/libcrypto.so.3 /usr/lib/x86_64-linux-gnu/libgbm.so.1 /usr/lib/x86_64-linux-gnu/libuv.so.1.0.0 /usr/lib/x86_64-linux-gnu/libGLU.so.1 /usr/lib/x86_64-linux-gnu/libanl.so /usr/lib/x86_64-linux-gnu/libavahi-client.so.3.2.9 /usr/lib/x86_64-linux-gnu/libfido2.so.1.12.0 /usr/lib/x86_64-linux-gnu/libcurl-gnutls.so.3 /usr/lib/x86_64-linux-gnu/libdrm_intel.so.1.0.0 /usr/lib/x86_64-linux-gnu/libmpg123.so.0 /usr/lib/x86_64-linux-gnu/libcurl.so.4 /usr/lib/x86_64-linux-gnu/libbabeltrace-ctf-text.so.1 /usr/lib/x86_64-linux-gnu/libglapi.so.0.0.0 /usr/lib/x86_64-linux-gnu/libjsoncpp.so.25 /usr/lib/x86_64-linux-gnu/libm.so /usr/lib/x86_64-linux-gnu/libpython3.11.so.1.0 /usr/lib/x86_64-linux-gnu/libtcl8.6.so /usr/lib/x86_64-linux-gnu/libapparmor.so.1 /usr/lib/x86_64-linux-gnu/libxshmfence.so.1.0.0 /usr/lib/x86_64-linux-gnu/libanl.a /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.32 /usr/lib/x86_64-linux-gnu/libboost_regex.so.1.74.0 /usr/lib/x86_64-linux-gnu/libLLVM-15.so.1 /usr/lib/x86_64-linux-gnu/libelf-0.188.so /usr/lib/x86_64-linux-gnu/libsource-highlight.so.4 /usr/lib/x86_64-linux-gnu/libbabeltrace-ctf-text.so.1.0.0 /usr/lib/x86_64-linux-gnu/libhistory.so.8.2 /usr/lib/x86_64-linux-gnu/libXss.so.1 /usr/lib/x86_64-linux-gnu/libxcb-xfixes.so.0 /usr/lib/x86_64-linux-gnu/libtsan.so.2 /usr/lib/x86_64-linux-gnu/libasyncns.so.0 /usr/lib/x86_64-linux-gnu/libksba.so.8 /usr/lib/x86_64-linux-gnu/libdrm_nouveau.so.2 /usr/lib/x86_64-linux-gnu/libvorbis.so.0 /usr/lib/x86_64-linux-gnu/libbabeltrace-ctf.so.1.0.0 /usr/lib/x86_64-linux-gnu/libasyncns.so.0.3.1 /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/x86_64-linux-gnu/libbabeltrace-lttng-live.so.1 /usr/lib/x86_64-linux-gnu/libhistory.so.8 /usr/lib/x86_64-linux-gnu/libreadline.so.8 /usr/lib/x86_64-linux-gnu/libjsoncpp.so.1.9.5 /usr/lib/x86_64-linux-gnu/libz.a /usr/lib/x86_64-linux-gnu/libcc1.so.0 /usr/lib/x86_64-linux-gnu/libg.a /usr/lib/x86_64-linux-gnu/libGLdispatch.so.0 /usr/lib/x86_64-linux-gnu/libopus.so.0.8.0 /usr/lib/x86_64-linux-gnu/libdw-0.188.so /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 /usr/lib/x86_64-linux-gnu/libXft.so.2.3.6 /usr/lib/x86_64-linux-gnu/libdw.so.1 /usr/lib/x86_64-linux-gnu/libSDL2_image-2.0.so.0.600.3 /usr/lib/x86_64-linux-gnu/libdrm.so.2.4.0 /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib/x86_64-linux-gnu/libGLX_mesa.so.0.0.0 /usr/lib/x86_64-linux-gnu/libfido2.so.1 /usr/lib/x86_64-linux-gnu/libxcb-glx.so.0.0.0 /usr/lib/x86_64-linux-gnu/libxshmfence.so.1 /usr/lib/x86_64-linux-gnu/libxcb-dri2.so.0.0.0 /usr/lib/x86_64-linux-gnu/libGLX.so.0.0.0 /usr/lib/x86_64-linux-gnu/libgomp.so.1 /usr/lib/x86_64-linux-gnu/libnss_compat.so /usr/lib/x86_64-linux-gnu/libarchive.so.13 /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libavahi-client.so.3 /usr/lib/x86_64-linux-gnu/libkrb5.so.3.3 /usr/lib/x86_64-linux-gnu/libkrb5.so.3 /usr/lib/x86_64-linux-gnu/libnghttp2.so.14.24.1 /usr/lib/x86_64-linux-gnu/libGLX_mesa.so.0 /usr/lib/x86_64-linux-gnu/libpython3.11.so /usr/lib/x86_64-linux-gnu/libsamplerate.so.0.2.2 /usr/lib/x86_64-linux-gnu/libxcb-dri3.so.0.1.0 /usr/lib/x86_64-linux-gnu/libpython3.11.a /usr/lib/x86_64-linux-gnu/libxcb-randr.so.0 /usr/lib/x86_64-linux-gnu/libdrm_radeon.so.1.0.1 /usr/lib/x86_64-linux-gnu/libGLC.so.0 /usr/lib/x86_64-linux-gnu/libalut.so.0.1.0 /usr/lib/x86_64-linux-gnu/libBrokenLocale.so /usr/lib/x86_64-linux-gnu/perl/5.36.0/lib.pm /usr/lib/x86_64-linux-gnu/libbabeltrace.so.1 /usr/lib/x86_64-linux-gnu/libbabeltrace-ctf-metadata.so.1 /usr/lib/x86_64-linux-gnu/libresolv.so /usr/lib/x86_64-linux-gnu/libopenal.so.1.19.1 /usr/lib/x86_64-linux-gnu/libpulse.so.0.24.2 /usr/lib/x86_64-linux-gnu/libsndio.so.7.2 /usr/lib/x86_64-linux-gnu/libwayland-server.so.0.21.0 /usr/lib/x86_64-linux-gnu/libitm.so.1 /usr/lib/x86_64-linux-gnu/libbabeltrace-dummy.so.1.0.0 /usr/lib/x86_64-linux-gnu/libxcb-dri3.so.0 /usr/lib/x86_64-linux-gnu/libsndfile.so.1.0.35 /usr/lib/x86_64-linux-gnu/libatomic.so.1.2.0 /usr/lib/x86_64-linux-gnu/libGLX_indirect.so.0 /usr/lib/x86_64-linux-gnu/libpulse-simple.so.0 /usr/lib/x86_64-linux-gnu/libOpenGL.so.0 /usr/lib/x86_64-linux-gnu/libxcb-present.so.0 /usr/lib/x86_64-linux-gnu/libmp3lame.so.0.0.0 /usr/lib/x86_64-linux-gnu/libssl.so.3 /usr/lib/x86_64-linux-gnu/libapparmor.so.1.8.4 /usr/lib/x86_64-linux-gnu/libtk8.6.so /usr/lib/x86_64-linux-gnu/libquadmath.so.0.0.0 /usr/lib/x86_64-linux-gnu/libGLEWmx.so.1.13.0 /usr/lib/x86_64-linux-gnu/libutil.a /usr/lib/x86_64-linux-gnu/libasound.so.2.0.0 /usr/lib/x86_64-linux-gnu/libxcb-dri2.so.0 /usr/lib/x86_64-linux-gnu/libgbm.so.1.0.0 /usr/lib/x86_64-linux-gnu/libexpat.a /usr/lib/x86_64-linux-gnu/libdecor-0.so.0 /usr/lib/x86_64-linux-gnu/libdebuginfod-0.188.so /usr/lib/x86_64-linux-gnu/libc_nonshared.a /usr/lib/x86_64-linux-gnu/libXxf86vm.so.1 /usr/lib/x86_64-linux-gnu/libpthread.a /usr/lib/x86_64-linux-gnu/liblsan.so.0.0.0 /usr/lib/x86_64-linux-gnu/libquadmath.so.0 /usr/lib/x86_64-linux-gnu/libxcb-present.so.0.0.0 /usr/lib/x86_64-linux-gnu/libperl.so.5.36 /usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0 /usr/lib/x86_64-linux-gnu/libGLC.so.0.0.7 /usr/lib/x86_64-linux-gnu/libpulse-simple.so.0.1.1 /usr/lib/x86_64-linux-gnu/libdrm_radeon.so.1 /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2.2 /usr/lib/x86_64-linux-gnu/libBrokenLocale.a /usr/lib/x86_64-linux-gnu/libsndio.so.7.0 /usr/lib/x86_64-linux-gnu/libdrm_intel.so.1 /usr/lib/x86_64-linux-gnu/libpython3.11.so.1 /usr/lib/x86_64-linux-gnu/libksba.so.8.14.3 /usr/lib/x86_64-linux-gnu/librt.a /usr/lib/x86_64-linux-gnu/libXss.so.1.0.0 /usr/lib/x86_64-linux-gnu/libasan.so.8 /usr/lib/x86_64-linux-gnu/libFLAC.so.12.0.0 /usr/lib/x86_64-linux-gnu/libasan.so.8.0.0 /usr/lib/x86_64-linux-gnu/libnpth.so.0 /usr/lib/x86_64-linux-gnu/libglapi.so.0 /usr/lib/x86_64-linux-gnu/libXxf86vm.so.1.0.0 /usr/lib/x86_64-linux-gnu/libdebuginfod.so.1 /usr/lib/x86_64-linux-gnu/libc_malloc_debug.so /usr/lib/x86_64-linux-gnu/libcbor.so.0.8 /usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0.2600.3 /usr/lib/x86_64-linux-gnu/libmvec.so /usr/lib/x86_64-linux-gnu/libtiff.so.6.0.0 /usr/lib/x86_64-linux-gnu/libpciaccess.so.0.11.1 /usr/lib/x86_64-linux-gnu/libsource-highlight.so.4.0.1 /usr/lib/x86_64-linux-gnu/libGLX.so.0 /usr/lib/x86_64-linux-gnu/libmvec.a /usr/lib/x86_64-linux-gnu/libpulse.so.0 /usr/lib/x86_64-linux-gnu/libLLVM-15.so /usr/lib/x86_64-linux-gnu/libOpenGL.so.0.0.0 /usr/lib/x86_64-linux-gnu/libsensors.so.5 /usr/lib/x86_64-linux-gnu/libsndfile.so.1 /usr/lib/x86_64-linux-gnu/librhash.so.0 /usr/lib/x86_64-linux-gnu/libwebp.so.7.1.5 /usr/lib/x86_64-linux-gnu/libsensors.so.5.0.0 /usr/lib/x86_64-linux-gnu/libc.a /usr/lib/x86_64-linux-gnu/libXmuu.so.1.0.0 /usr/lib/x86_64-linux-gnu/libedit.so.2 /usr/lib/x86_64-linux-gnu/libm-2.37.a /usr/lib/x86_64-linux-gnu/libalut.so.0 /usr/lib/x86_64-linux-gnu/libsamplerate.so.0 /usr/lib/x86_64-linux-gnu/libasound.so.2 /usr/lib/x86_64-linux-gnu/libxcb-sync.so.1 /usr/lib/x86_64-linux-gnu/libbabeltrace-dummy.so.1 /usr/lib/x86_64-linux-gnu/pkgconfig/libtirpc.pc /usr/lib/x86_64-linux-gnu/pkgconfig/libcrypt.pc /usr/lib/x86_64-linux-gnu/pkgconfig/libxcrypt.pc /usr/lib/x86_64-linux-gnu/pkgconfig/libnsl.pc /usr/lib/x86_64-linux-gnu/libexpat.so /usr/lib/x86_64-linux-gnu/libogg.so.0.8.5 /usr/lib/x86_64-linux-gnu/systemd/libsystemd-shared-252.so /usr/lib/x86_64-linux-gnu/systemd/libsystemd-core-252.so /usr/lib/x86_64-linux-gnu/libXft.so.2 /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 /usr/lib/x86_64-linux-gnu/libnpth.so.0.1.2 /usr/lib/x86_64-linux-gnu/libGL.so.1.7.0 /usr/lib/x86_64-linux-gnu/libpciaccess.so.0 /usr/lib/x86_64-linux-gnu/libbabeltrace-ctf.so.1 /usr/lib/x86_64-linux-gnu/libperl.so.5.36.0 /usr/lib/x86_64-linux-gnu/libsndio.so.7 /usr/lib/x86_64-linux-gnu/libopenal.so.1 /usr/lib/x86_64-linux-gnu/libnss_hesiod.so /usr/lib/x86_64-linux-gnu/libmcheck.a /usr/lib/x86_64-linux-gnu/libnghttp2.so.14 /usr/lib/x86_64-linux-gnu/libuv.so.1 /usr/lib/x86_64-linux-gnu/libc.so /usr/lib/x86_64-linux-gnu/libdrm_nouveau.so.2.0.0 /usr/lib/x86_64-linux-gnu/libcurl-gnutls.so.4.8.0 /usr/lib/x86_64-linux-gnu/libavahi-common.so.3 /usr/lib/x86_64-linux-gnu/cryptsetup/libcryptsetup-token-systemd-fido2.so /usr/lib/x86_64-linux-gnu/cryptsetup/libcryptsetup-token-systemd-tpm2.so /usr/lib/x86_64-linux-gnu/cryptsetup/libcryptsetup-token-systemd-pkcs11.so /usr/lib/x86_64-linux-gnu/libexpatw.so /usr/lib/x86_64-linux-gnu/libmp3lame.so.0 /usr/lib/x86_64-linux-gnu/libdrm_amdgpu.so.1.0.0 /usr/lib/x86_64-linux-gnu/libipt.so.2 /usr/lib/x86_64-linux-gnu/libX11-xcb.so.1.0.0 /usr/lib/x86_64-linux-gnu/ntp/libntpc.so.1.1.0 /usr/lib/x86_64-linux-gnu/ntp/libntpc.so.1 /usr/lib/x86_64-linux-gnu/ntp/libntpc.so /usr/lib/x86_64-linux-gnu/libbabeltrace-lttng-live.so.1.0.0 /usr/lib/x86_64-linux-gnu/libitm.so.1.0.0 /usr/lib/x86_64-linux-gnu/libthread_db.so /usr/lib/x86_64-linux-gnu/libGLEWmx.so.1.13 /usr/lib/x86_64-linux-gnu/libatomic.so.1 /usr/lib/x86_64-linux-gnu/libX11.so.6.4.0 /usr/lib/x86_64-linux-gnu/libtiff.so.6 /usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0 /usr/lib/x86_64-linux-gnu/libX11-xcb.so.1 /usr/lib/x86_64-linux-gnu/libedit.so.2.0.70 /usr/lib/x86_64-linux-gnu/libxcb-xfixes.so.0.0.0 /usr/lib/x86_64-linux-gnu/libcurl.so.4.8.0 /usr/lib/x86_64-linux-gnu/libtcl8.6.so.0 /usr/lib/x86_64-linux-gnu/libtsan.so.2.0.0 /usr/lib/x86_64-linux-gnu/libGLdispatch.so.0.0.0 /usr/lib/x86_64-linux-gnu/libbabeltrace.so.1.0.0 /usr/lib/x86_64-linux-gnu/libdl.a /usr/lib/x86_64-linux-gnu/libdrm_amdgpu.so.1 /usr/lib/x86_64-linux-gnu/libarchive.so.13.6.2 /usr/lib/x86_64-linux-gnu/libexpatw.a /usr/lib/x86_64-linux-gnu/libSDL2_image-2.0.so.0 /usr/lib/x86_64-linux-gnu/libubsan.so.1 /usr/lib/x86_64-linux-gnu/libXmuu.so.1 /usr/lib/x86_64-linux-gnu/libwebp.so.7 /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 /usr/lib/x86_64-linux-gnu/libelf.so.1 /usr/lib/x86_64-linux-gnu/krb5/plugins/libkrb5 /usr/lib/x86_64-linux-gnu/libk5crypto.so.3.1 /usr/lib/x86_64-linux-gnu/pulseaudio/libpulsecommon-16.1.so /usr/lib/x86_64-linux-gnu/libvorbis.so.0.4.9 /usr/lib/x86_64-linux-gnu/libcurl-gnutls.so.4 /usr/lib/x86_64-linux-gnu/libvorbisenc.so.2.0.12 /usr/lib/x86_64-linux-gnu/libogg.so.0 /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6 /usr/lib/x86_64-linux-gnu/libtk8.6.so.0 /usr/lib/x86_64-linux-gnu/libwayland-server.so.0 /usr/lib/x86_64-linux-gnu/libreadline.so.8.2 /usr/lib/x86_64-linux-gnu/libmpg123.so.0.47.0 /usr/lib/x86_64-linux-gnu/libavahi-common.so.3.5.4 /usr/lib/x86_64-linux-gnu/libkrb5support.so.0.1 /usr/lib/x86_64-linux-gnu/libdrm.so.2 /usr/lib/x86_64-linux-gnu/libopus.so.0 /usr/lib/x86_64-linux-gnu/libxcb-randr.so.0.1.0 /usr/lib/x86_64-linux-gnu/libcc1.so.0.0.0 /usr/lib/x86_64-linux-gnu/libm.a /usr/lib/x86_64-linux-gnu/libGLU.so.1.3.1 /usr/lib/x86_64-linux-gnu/libip4tc.so.2 /usr/lib/x86_64-linux-gnu/libatk-1.0.so.0 /usr/lib/x86_64-linux-gnu/libldap.so.2.0.200 /usr/lib/x86_64-linux-gnu/libsecret-1.so.0 /usr/lib/x86_64-linux-gnu/libnsl.so /usr/lib/x86_64-linux-gnu/libcolord.so.2.0.5 /usr/lib/x86_64-linux-gnu/libgdk-3.so.0 /usr/lib/x86_64-linux-gnu/libpsl.so.5 /usr/lib/x86_64-linux-gnu/libepoxy.so.0.0.0 /usr/lib/x86_64-linux-gnu/libcolordprivate.so.2 /usr/lib/x86_64-linux-gnu/libpangoft2-1.0.so.0.5000.12 /usr/lib/x86_64-linux-gnu/libkmod.so.2.4.0 /usr/lib/x86_64-linux-gnu/libbrotlidec.so.1.0.9 /usr/lib/x86_64-linux-gnu/libpangoft2-1.0.so.0 /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0 /usr/lib/x86_64-linux-gnu/libicuuc.so.72 /usr/lib/x86_64-linux-gnu/libatspi.so.0 /usr/lib/x86_64-linux-gnu/libXfixes.so.3 /usr/lib/x86_64-linux-gnu/libbfd-2.40-system.so /usr/lib/x86_64-linux-gnu/libpng16.so.16 /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0 /usr/lib/x86_64-linux-gnu/libXi.so.6 /usr/lib/x86_64-linux-gnu/libisl.so.23 /usr/lib/x86_64-linux-gnu/libatk-bridge-2.0.so.0 /usr/lib/x86_64-linux-gnu/libxcb.so.1 /usr/lib/x86_64-linux-gnu/libatspi.so.0.0.1 /usr/lib/x86_64-linux-gnu/libfreetype.so.6.18.3 /usr/lib/x86_64-linux-gnu/libctf.so.0 /usr/lib/x86_64-linux-gnu/libjson-c.so.5 /usr/lib/x86_64-linux-gnu/libicui18n.so.72 /usr/lib/x86_64-linux-gnu/libexpat.so.1.8.10 /usr/lib/x86_64-linux-gnu/libpng16.so.16.39.0 /usr/lib/x86_64-linux-gnu/libjansson.so.4 /usr/lib/x86_64-linux-gnu/libXau.so.6 /usr/lib/x86_64-linux-gnu/libtirpc.a /usr/lib/x86_64-linux-gnu/libXrender.so.1 /usr/lib/x86_64-linux-gnu/libicutest.so.72.1 /usr/lib/x86_64-linux-gnu/libgcr-ui-3.so.1 /usr/lib/x86_64-linux-gnu/libfontconfig.so.1.12.0 /usr/lib/x86_64-linux-gnu/libwayland-egl.so.1.21.0 /usr/lib/x86_64-linux-gnu/libnsl.so.2 /usr/lib/x86_64-linux-gnu/libcrypt.a /usr/lib/x86_64-linux-gnu/libicuuc.so.72.1 /usr/lib/x86_64-linux-gnu/libthai.so.0 /usr/lib/x86_64-linux-gnu/libxkbcommon.so.0 /usr/lib/x86_64-linux-gnu/libgraphite2.so.3.2.1 /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0.7600.1 /usr/lib/x86_64-linux-gnu/libcairo-gobject.so.2.11600.0 /usr/lib/x86_64-linux-gnu/libXcursor.so.1.0.2 /usr/lib/x86_64-linux-gnu/libLerc.so.4 /usr/lib/x86_64-linux-gnu/libgcr-ui-3.so.1.0.0 /usr/lib/x86_64-linux-gnu/libgtk-3.so.0 /usr/lib/x86_64-linux-gnu/libgprofng.so.0 /usr/lib/x86_64-linux-gnu/libXrender.so.1.3.0 /usr/lib/x86_64-linux-gnu/libdbus-1.so.3.32.1 /usr/lib/x86_64-linux-gnu/libsasl2.so.2 /usr/lib/x86_64-linux-gnu/libbsd.so.0.11.7 /usr/lib/x86_64-linux-gnu/liblcms2.so.2.0.14 /usr/lib/x86_64-linux-gnu/libmpfr.so.6 /usr/lib/x86_64-linux-gnu/libkeyutils.so.1.10 /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0.7600.1 /usr/lib/x86_64-linux-gnu/libicudata.so.72 /usr/lib/x86_64-linux-gnu/libfribidi.so.0 /usr/lib/x86_64-linux-gnu/libfribidi.so.0.4.0 /usr/lib/x86_64-linux-gnu/libcairo-gobject.so.2 /usr/lib/x86_64-linux-gnu/libbsd.so.0 /usr/lib/x86_64-linux-gnu/libkmod.so.2 /usr/lib/x86_64-linux-gnu/gio/modules/libdconfsettings.so /usr/lib/x86_64-linux-gnu/libexpat.so.1 /usr/lib/x86_64-linux-gnu/libmpfr.so.6.2.0 /usr/lib/x86_64-linux-gnu/libgcr-base-3.so.1.0.0 /usr/lib/x86_64-linux-gnu/gprofng/libgp-collectorAPI.la /usr/lib/x86_64-linux-gnu/gprofng/libgp-collectorAPI.so /usr/lib/x86_64-linux-gnu/gprofng/libgp-sync.so /usr/lib/x86_64-linux-gnu/gprofng/libgp-iotrace.so /usr/lib/x86_64-linux-gnu/gprofng/libgp-collector.so /usr/lib/x86_64-linux-gnu/gprofng/libgp-heap.so /usr/lib/x86_64-linux-gnu/gprofng/libgp-collectorAPI.a /usr/lib/x86_64-linux-gnu/libjpeg.so.8.2.2 /usr/lib/x86_64-linux-gnu/libatk-bridge-2.0.so.0.0.0 /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-xbm.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-xpm.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-qtif.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-ani.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-pnm.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-tga.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-icns.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-bmp.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-ico.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-tiff.so /usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-gif.so /usr/lib/x86_64-linux-gnu/libXrandr.so.2.2.0 /usr/lib/x86_64-linux-gnu/libicudata.so.72.1 /usr/lib/x86_64-linux-gnu/libicutu.so.72 /usr/lib/x86_64-linux-gnu/libXcursor.so.1 /usr/lib/x86_64-linux-gnu/libldap.so.2 /usr/lib/x86_64-linux-gnu/libgck-1.so.0.0.0 /usr/lib/x86_64-linux-gnu/libxcb-render.so.0 /usr/lib/x86_64-linux-gnu/libicutu.so.72.1 /usr/lib/x86_64-linux-gnu/libgraphite2.so.3 /usr/lib/x86_64-linux-gnu/libdevmapper.so.1.02.1 /usr/lib/x86_64-linux-gnu/gtk-3.0/3.0.0/printbackends/libprintbackend-file.so /usr/lib/x86_64-linux-gnu/gtk-3.0/3.0.0/printbackends/libprintbackend-cups.so /usr/lib/x86_64-linux-gnu/libcrypt.so /usr/lib/x86_64-linux-gnu/libXinerama.so.1.0.0 /usr/lib/x86_64-linux-gnu/libgdbm.so.6 /usr/lib/x86_64-linux-gnu/libbrotlicommon.so.1.0.9 /usr/lib/x86_64-linux-gnu/libXrandr.so.2 /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0.7600.1 /usr/lib/x86_64-linux-gnu/librtmp.so.1 /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib/x86_64-linux-gnu/libsecret-1.so.0.0.0 /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0 /usr/lib/x86_64-linux-gnu/libpangocairo-1.0.so.0 /usr/lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so.0.4200.10 /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.14 /usr/lib/x86_64-linux-gnu/libctf-nobfd.so.0 /usr/lib/x86_64-linux-gnu/libexpatw.so.1.8.10 /usr/lib/x86_64-linux-gnu/libgprofng.so.0.0.0 /usr/lib/x86_64-linux-gnu/libargon2.so.1 /usr/lib/x86_64-linux-gnu/libthai.so.0.3.1 /usr/lib/x86_64-linux-gnu/libicutest.so.72 /usr/lib/x86_64-linux-gnu/libsframe.so.0 /usr/lib/x86_64-linux-gnu/libharfbuzz.so.0.60000.0 /usr/lib/x86_64-linux-gnu/libjpeg.so.8 /usr/lib/x86_64-linux-gnu/libip4tc.so.2.0.0 /usr/lib/x86_64-linux-gnu/libctf-nobfd.so.0.0.0 /usr/lib/x86_64-linux-gnu/libgck-1.so.0 /usr/lib/x86_64-linux-gnu/libgdbm.so.6.0.0 /usr/lib/x86_64-linux-gnu/sasl2/libsasldb.so /usr/lib/x86_64-linux-gnu/sasl2/libsasldb.so.2 /usr/lib/x86_64-linux-gnu/sasl2/libsasldb.so.2.0.25 /usr/lib/x86_64-linux-gnu/libharfbuzz.so.0 /usr/lib/x86_64-linux-gnu/libwayland-client.so.0 /usr/lib/x86_64-linux-gnu/libfdisk.so.1 /usr/lib/x86_64-linux-gnu/libassuan.so.0 /usr/lib/x86_64-linux-gnu/libsasl2.so.2.0.25 /usr/lib/x86_64-linux-gnu/libxml2.so.2 /usr/lib/x86_64-linux-gnu/libwayland-client.so.0.21.0 /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0 /usr/lib/x86_64-linux-gnu/libgcr-base-3.so.1 /usr/lib/x86_64-linux-gnu/libmpc.so.3.3.1 /usr/lib/x86_64-linux-gnu/libopcodes-2.40-system.so /usr/lib/x86_64-linux-gnu/libXext.so.6.4.0 /usr/lib/x86_64-linux-gnu/liblcms2.so.2 /usr/lib/x86_64-linux-gnu/libgdbm_compat.so.4 /usr/lib/x86_64-linux-gnu/liblber.so.2 /usr/lib/x86_64-linux-gnu/libXinerama.so.1 /usr/lib/x86_64-linux-gnu/libsframe.so.0.0.0 /usr/lib/x86_64-linux-gnu/libdatrie.so.1.4.0 /usr/lib/x86_64-linux-gnu/libpangocairo-1.0.so.0.5000.12 /usr/lib/x86_64-linux-gnu/libcolordprivate.so.2.0.5 /usr/lib/x86_64-linux-gnu/libcryptsetup.so.12 /usr/lib/x86_64-linux-gnu/libtirpc.so /usr/lib/x86_64-linux-gnu/libdconf.so.1 /usr/lib/x86_64-linux-gnu/libicuio.so.72.1 /usr/lib/x86_64-linux-gnu/libpango-1.0.so.0.5000.12 /usr/lib/x86_64-linux-gnu/libXdamage.so.1.1.0 /usr/lib/x86_64-linux-gnu/bfd-plugins/libdep.so /usr/lib/x86_64-linux-gnu/libwayland-cursor.so.0 /usr/lib/x86_64-linux-gnu/libXcomposite.so.1.0.0 /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 /usr/lib/x86_64-linux-gnu/libbrotlienc.so.1 /usr/lib/x86_64-linux-gnu/libctf.so.0.0.0 /usr/lib/x86_64-linux-gnu/libdbus-1.so.3 /usr/lib/x86_64-linux-gnu/libxcb-shm.so.0 /usr/lib/x86_64-linux-gnu/libatk-1.0.so.0.24809.1 /usr/lib/x86_64-linux-gnu/libssh.so.4.9.4 /usr/lib/x86_64-linux-gnu/libgtk-3-0 /usr/lib/x86_64-linux-gnu/libgtk-3.so.0.2405.32 /usr/lib/x86_64-linux-gnu/liblber.so.2.0.200 /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0 /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0.7600.1 /usr/lib/x86_64-linux-gnu/libpango-1.0.so.0 /usr/lib/x86_64-linux-gnu/libassuan.so.0.8.5 /usr/lib/x86_64-linux-gnu/libpixman-1.so.0.42.2 /usr/lib/x86_64-linux-gnu/libxkbcommon.so.0.0.0 /usr/lib/x86_64-linux-gnu/libbrotlidec.so.1 /usr/lib/x86_64-linux-gnu/libmpc.so.3 /usr/lib/x86_64-linux-gnu/libpixman-1.so.0 /usr/lib/x86_64-linux-gnu/libgdk-3.so.0.2405.32 /usr/lib/x86_64-linux-gnu/libxcb-render.so.0.0.0 /usr/lib/x86_64-linux-gnu/libcairo.so.2.11600.0 /usr/lib/x86_64-linux-gnu/libxcb-shm.so.0.0.0 /usr/lib/x86_64-linux-gnu/libtirpc.so.3.0.0 /usr/lib/x86_64-linux-gnu/libexpatw.so.1 /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0.7600.1 /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 /usr/lib/x86_64-linux-gnu/libnsl.so.2.0.1 /usr/lib/x86_64-linux-gnu/libgraphite2.so.2.0.0 /usr/lib/x86_64-linux-gnu/libjansson.so.4.14.0 /usr/lib/x86_64-linux-gnu/libicui18n.so.72.1 /usr/lib/x86_64-linux-gnu/libtirpc.so.3 /usr/lib/x86_64-linux-gnu/libisl.so.23.2.0 /usr/lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so.0 /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 /usr/lib/x86_64-linux-gnu/libdatrie.so.1 /usr/lib/x86_64-linux-gnu/libkeyutils.so.1 /usr/lib/x86_64-linux-gnu/libicuio.so.72 /usr/lib/x86_64-linux-gnu/libjbig.so.0 /usr/lib/x86_64-linux-gnu/libbrotlienc.so.1.0.9 /usr/lib/x86_64-linux-gnu/libssh.so.4 /usr/lib/x86_64-linux-gnu/libcryptsetup.so.12.9.0 /usr/lib/x86_64-linux-gnu/libfdisk.so.1.1.0 /usr/lib/x86_64-linux-gnu/libbrotlicommon.so.1 /usr/lib/x86_64-linux-gnu/libgdbm_compat.so.4.0.0 /usr/lib/x86_64-linux-gnu/libjson-c.so.5.2.0 /usr/lib/x86_64-linux-gnu/libcolord.so.2 /usr/lib/x86_64-linux-gnu/libdconf.so.1.0.0 /usr/lib/x86_64-linux-gnu/libepoxy.so.0 /usr/lib/x86_64-linux-gnu/libXdamage.so.1 /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 /usr/lib/x86_64-linux-gnu/libXcomposite.so.1 /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0 /usr/lib/x86_64-linux-gnu/libfreetype.so.6 /usr/lib/x86_64-linux-gnu/libwayland-cursor.so.0.21.0 /usr/lib/x86_64-linux-gnu/libXi.so.6.1.0 /usr/lib/x86_64-linux-gnu/libwayland-egl.so.1 /usr/lib/x86_64-linux-gnu/libcairo.so.2 /usr/lib/x86_64-linux-gnu/libdeflate.so.0 /usr/lib/x86_64-linux-gnu/libnsl.a /usr/lib/x86_64-linux-gnu/libXfixes.so.3.1.0 /usr/lib/x86_64-linux-gnu/libpsl.so.5.3.4 /usr/lib/libBLTlite.2.5.so.8.6 /usr/lib/python3.11/lib-dynload /usr/lib/python3.11/test/libregrtest /usr/lib/python3.11/config-3.11-x86_64-linux-gnu/libpython3.11.so /usr/lib/python3.11/config-3.11-x86_64-linux-gnu/libpython3.11.a /usr/lib/python3.11/config-3.11-x86_64-linux-gnu/libpython3.11-pic.a /usr/lib/python3.11/lib2to3 /usr/lib/libBLT.2.5.so.8.6 /usr/lib/gcc/x86_64-linux-gnu/12/libssp_nonshared.a /usr/lib/gcc/x86_64-linux-gnu/12/libgomp.so /usr/lib/gcc/x86_64-linux-gnu/12/libasan_preinit.o /usr/lib/gcc/x86_64-linux-gnu/12/libstdc++fs.a /usr/lib/gcc/x86_64-linux-gnu/12/libgomp.spec /usr/lib/gcc/x86_64-linux-gnu/12/libgcc_eh.a /usr/lib/gcc/x86_64-linux-gnu/12/libsanitizer.spec /usr/lib/gcc/x86_64-linux-gnu/12/libitm.a /usr/lib/gcc/x86_64-linux-gnu/12/libtsan.a /usr/lib/gcc/x86_64-linux-gnu/12/libbacktrace.a /usr/lib/gcc/x86_64-linux-gnu/12/libgomp.a /usr/lib/gcc/x86_64-linux-gnu/12/libstdc++.so /usr/lib/gcc/x86_64-linux-gnu/12/libgcov.a /usr/lib/gcc/x86_64-linux-gnu/12/libasan.so /usr/lib/gcc/x86_64-linux-gnu/12/libquadmath.so /usr/lib/gcc/x86_64-linux-gnu/12/libatomic.so /usr/lib/gcc/x86_64-linux-gnu/12/libtsan.so /usr/lib/gcc/x86_64-linux-gnu/12/libitm.so /usr/lib/gcc/x86_64-linux-gnu/12/libgcc.a /usr/lib/gcc/x86_64-linux-gnu/12/libgcc_s.so /usr/lib/gcc/x86_64-linux-gnu/12/liblto_plugin.so /usr/lib/gcc/x86_64-linux-gnu/12/libstdc++.a /usr/lib/gcc/x86_64-linux-gnu/12/libubsan.a /usr/lib/gcc/x86_64-linux-gnu/12/plugin/libcp1plugin.so.0 /usr/lib/gcc/x86_64-linux-gnu/12/plugin/libcp1plugin.so /usr/lib/gcc/x86_64-linux-gnu/12/plugin/libcc1plugin.so /usr/lib/gcc/x86_64-linux-gnu/12/plugin/libcc1plugin.so.0 /usr/lib/gcc/x86_64-linux-gnu/12/plugin/libcc1plugin.so.0.0.0 /usr/lib/gcc/x86_64-linux-gnu/12/plugin/libcp1plugin.so.0.0.0 /usr/lib/gcc/x86_64-linux-gnu/12/libitm.spec /usr/lib/gcc/x86_64-linux-gnu/12/libtsan_preinit.o /usr/lib/gcc/x86_64-linux-gnu/12/libcc1.so /usr/lib/gcc/x86_64-linux-gnu/12/libquadmath.a /usr/lib/gcc/x86_64-linux-gnu/12/liblsan.so /usr/lib/gcc/x86_64-linux-gnu/12/libsupc++.a /usr/lib/gcc/x86_64-linux-gnu/12/liblsan_preinit.o /usr/lib/gcc/x86_64-linux-gnu/12/libubsan.so /usr/lib/gcc/x86_64-linux-gnu/12/liblsan.a /usr/lib/gcc/x86_64-linux-gnu/12/libasan.a /usr/lib/gcc/x86_64-linux-gnu/12/libatomic.a /usr/lib/bfd-plugins/liblto_plugin.so============= libs_notdir =============lib lib libgcc_s.so.1 libe2p.so.2 libBrokenLocale.so.1 libcap-ng.so.0.0.0 libformw.so.6 libapt-private.so.0.0 libtasn1.so.6 libunistring.so.2 libcom_err.so.2.1 libpamc.so.0.82.1 libgnutls.so.30 libtinfo.so.6.4 libss.so.2.0 libxxhash.so.0.8.1 libmount.so.1 libunistring.so.2.2.0 libdrop_ambient.so.0.0.0 libffi.so.8.1.2 libncursesw.so.6.4 libtasn1.so.6.6.3 libpsx.so.2.66 libsystemd.so.0.35.0 libaudit.so.1 libpam_misc.so.0 libapt-private.so.0.0.0 libgcrypt.so.20 libp11-kit.so.0.3.0 libe2p.so.2.3 libext2fs.so.2.4 libformw.so.6.4 libsmartcols.so.1.1.0 libmd.so.0 librt.so.1 libsmartcols.so.1 libuuid.so.1 libpcre2-8.so.0 libdb-5.3.so libJIS.so libJISX0213.so libCNS.so libISOIR165.so libKSC.so libGB.so libattr.so.1 libmemusage.so libmenuw.so.6.4 libaudit.so.1.0.0 libgpg-error.so.0.33.1 libstdc++.so.6 libz.so.1 libpcprofile.so libseccomp.so.2 libidn2.so.0.3.8 libgcrypt.so.20.4.1 libz.so.1.2.13 libcap.so.2 libgnutls.so.30.34.2 libdebconfclient.so.0 libuuid.so.1.3.0 libmvec.so.1 libdrop_ambient.so.0 libthread_db.so.1 libffi.so.8 libudev.so.1.7.5 libsystemd.so.0 libpanelw.so.6.4 libnss_hesiod.so.2 libc_malloc_debug.so.0 libproc2.so.0 libnsl.so.1 liblzma.so.5.4.1 libhogweed.so.6.6 libtinfo.so.6 libutil.so.1 libcrypt.so.1.1.0 libsepol.so.2 libapt-pkg.so.6.0.0 libgmp.so.10.4.1 liblz4.so.1.9.4 libgmp.so.10 libproc2.so.0.0.1 libdebconfclient.so.0.0.0 libncursesw.so.6 libcap-ng.so.0 libpam.so.0 libm.so.6 libudev.so.1 libtic.so.6 libnss_files.so.2 libcrypt.so.1 libselinux.so.1 libnettle.so.8 libhogweed.so.6 libresolv.so.2 libbz2.so.1 libext2fs.so.2 libpam_misc.so.0.82.1 libacl.so.1.1.2301 libpsx.so.2 libtic.so.6.4 libxxhash.so.0 libsemanage.so.2 libmount.so.1.1.0 libblkid.so.1.1.0 libblkid.so.1 libss.so.2 libzstd.so.1 libpcre2-8.so.0.11.2 libnss_compat.so.2 libidn2.so.0 libmd.so.0.0.5 liblzma.so.5 libmenuw.so.6 libbz2.so.1.0 liblz4.so.1 libzstd.so.1.5.4 libp11-kit.so.0 libdl.so.2 libpamc.so.0 libc.so.6 libbz2.so.1.0.4 libpanelw.so.6 libgpg-error.so.0 libcap.so.2.66 libnettle.so.8.6 libnss_dns.so.2 lib lib.pm libapt-pkg.so.6.0 libacl.so.1 libpam.so.0.85.1 libattr.so.1.1.2501 libseccomp.so.2.5.4 libcom_err.so.2 libanl.so.1 libpthread.so.0 libxcb-sync.so.1.0.0 libsqlite3.so.0 libFLAC.so.12 libdecor-0.so.0.100.1 libipt.so.2.0.5 liblsan.so.0 libdecor libdecor-cairo.so libcups.so.2 libubsan.so.1.0.0 libxcb-glx.so.0 libvorbisenc.so.2 libresolv.a libbabeltrace-ctf-metadata.so.1.0.0 libcbor.so.0.8.0 libcrypto.so.3 libgbm.so.1 libuv.so.1.0.0 libGLU.so.1 libanl.so libavahi-client.so.3.2.9 libfido2.so.1.12.0 libcurl-gnutls.so.3 libdrm_intel.so.1.0.0 libmpg123.so.0 libcurl.so.4 libbabeltrace-ctf-text.so.1 libglapi.so.0.0.0 libjsoncpp.so.25 libm.so libpython3.11.so.1.0 libtcl8.6.so libapparmor.so.1 libxshmfence.so.1.0.0 libanl.a libstdc++.so.6.0.32 libboost_regex.so.1.74.0 libLLVM-15.so.1 libelf-0.188.so libsource-highlight.so.4 libbabeltrace-ctf-text.so.1.0.0 libhistory.so.8.2 libXss.so.1 libxcb-xfixes.so.0 libtsan.so.2 libasyncns.so.0 libksba.so.8 libdrm_nouveau.so.2 libvorbis.so.0 libbabeltrace-ctf.so.1.0.0 libasyncns.so.0.3.1 libGL.so.1 libbabeltrace-lttng-live.so.1 libhistory.so.8 libreadline.so.8 libjsoncpp.so.1.9.5 libz.a libcc1.so.0 libg.a libGLdispatch.so.0 libopus.so.0.8.0 libdw-0.188.so libgssapi_krb5.so.2 libXft.so.2.3.6 libdw.so.1 libSDL2_image-2.0.so.0.600.3 libdrm.so.2.4.0 libX11.so.6 libGLX_mesa.so.0.0.0 libfido2.so.1 libxcb-glx.so.0.0.0 libxshmfence.so.1 libxcb-dri2.so.0.0.0 libGLX.so.0.0.0 libgomp.so.1 libnss_compat.so libarchive.so.13 libz.so libavahi-client.so.3 libkrb5.so.3.3 libkrb5.so.3 libnghttp2.so.14.24.1 libGLX_mesa.so.0 libpython3.11.so libsamplerate.so.0.2.2 libxcb-dri3.so.0.1.0 libpython3.11.a libxcb-randr.so.0 libdrm_radeon.so.1.0.1 libGLC.so.0 libalut.so.0.1.0 libBrokenLocale.so lib.pm libbabeltrace.so.1 libbabeltrace-ctf-metadata.so.1 libresolv.so libopenal.so.1.19.1 libpulse.so.0.24.2 libsndio.so.7.2 libwayland-server.so.0.21.0 libitm.so.1 libbabeltrace-dummy.so.1.0.0 libxcb-dri3.so.0 libsndfile.so.1.0.35 libatomic.so.1.2.0 libGLX_indirect.so.0 libpulse-simple.so.0 libOpenGL.so.0 libxcb-present.so.0 libmp3lame.so.0.0.0 libssl.so.3 libapparmor.so.1.8.4 libtk8.6.so libquadmath.so.0.0.0 libGLEWmx.so.1.13.0 libutil.a libasound.so.2.0.0 libxcb-dri2.so.0 libgbm.so.1.0.0 libexpat.a libdecor-0.so.0 libdebuginfod-0.188.so libc_nonshared.a libXxf86vm.so.1 libpthread.a liblsan.so.0.0.0 libquadmath.so.0 libxcb-present.so.0.0.0 libperl.so.5.36 libgomp.so.1.0.0 libGLC.so.0.0.7 libpulse-simple.so.0.1.1 libdrm_radeon.so.1 libgssapi_krb5.so.2.2 libBrokenLocale.a libsndio.so.7.0 libdrm_intel.so.1 libpython3.11.so.1 libksba.so.8.14.3 librt.a libXss.so.1.0.0 libasan.so.8 libFLAC.so.12.0.0 libasan.so.8.0.0 libnpth.so.0 libglapi.so.0 libXxf86vm.so.1.0.0 libdebuginfod.so.1 libc_malloc_debug.so libcbor.so.0.8 libSDL2-2.0.so.0.2600.3 libmvec.so libtiff.so.6.0.0 libpciaccess.so.0.11.1 libsource-highlight.so.4.0.1 libGLX.so.0 libmvec.a libpulse.so.0 libLLVM-15.so libOpenGL.so.0.0.0 libsensors.so.5 libsndfile.so.1 librhash.so.0 libwebp.so.7.1.5 libsensors.so.5.0.0 libc.a libXmuu.so.1.0.0 libedit.so.2 libm-2.37.a libalut.so.0 libsamplerate.so.0 libasound.so.2 libxcb-sync.so.1 libbabeltrace-dummy.so.1 libtirpc.pc libcrypt.pc libxcrypt.pc libnsl.pc libexpat.so libogg.so.0.8.5 libsystemd-shared-252.so libsystemd-core-252.so libXft.so.2 libkrb5support.so.0 libnpth.so.0.1.2 libGL.so.1.7.0 libpciaccess.so.0 libbabeltrace-ctf.so.1 libperl.so.5.36.0 libsndio.so.7 libopenal.so.1 libnss_hesiod.so libmcheck.a libnghttp2.so.14 libuv.so.1 libc.so libdrm_nouveau.so.2.0.0 libcurl-gnutls.so.4.8.0 libavahi-common.so.3 libcryptsetup-token-systemd-fido2.so libcryptsetup-token-systemd-tpm2.so libcryptsetup-token-systemd-pkcs11.so libexpatw.so libmp3lame.so.0 libdrm_amdgpu.so.1.0.0 libipt.so.2 libX11-xcb.so.1.0.0 libntpc.so.1.1.0 libntpc.so.1 libntpc.so libbabeltrace-lttng-live.so.1.0.0 libitm.so.1.0.0 libthread_db.so libGLEWmx.so.1.13 libatomic.so.1 libX11.so.6.4.0 libtiff.so.6 libSDL2-2.0.so.0 libX11-xcb.so.1 libedit.so.2.0.70 libxcb-xfixes.so.0.0.0 libcurl.so.4.8.0 libtcl8.6.so.0 libtsan.so.2.0.0 libGLdispatch.so.0.0.0 libbabeltrace.so.1.0.0 libdl.a libdrm_amdgpu.so.1 libarchive.so.13.6.2 libexpatw.a libSDL2_image-2.0.so.0 libubsan.so.1 libXmuu.so.1 libwebp.so.7 libk5crypto.so.3 libelf.so.1 libkrb5 libk5crypto.so.3.1 libpulsecommon-16.1.so libvorbis.so.0.4.9 libcurl-gnutls.so.4 libvorbisenc.so.2.0.12 libogg.so.0 libsqlite3.so.0.8.6 libtk8.6.so.0 libwayland-server.so.0 libreadline.so.8.2 libmpg123.so.0.47.0 libavahi-common.so.3.5.4 libkrb5support.so.0.1 libdrm.so.2 libopus.so.0 libxcb-randr.so.0.1.0 libcc1.so.0.0.0 libm.a libGLU.so.1.3.1 libip4tc.so.2 libatk-1.0.so.0 libldap.so.2.0.200 libsecret-1.so.0 libnsl.so libcolord.so.2.0.5 libgdk-3.so.0 libpsl.so.5 libepoxy.so.0.0.0 libcolordprivate.so.2 libpangoft2-1.0.so.0.5000.12 libkmod.so.2.4.0 libbrotlidec.so.1.0.9 libpangoft2-1.0.so.0 libxcb.so.1.1.0 libicuuc.so.72 libatspi.so.0 libXfixes.so.3 libbfd-2.40-system.so libpng16.so.16 libXau.so.6.0.0 libXi.so.6 libisl.so.23 libatk-bridge-2.0.so.0 libxcb.so.1 libatspi.so.0.0.1 libfreetype.so.6.18.3 libctf.so.0 libjson-c.so.5 libicui18n.so.72 libexpat.so.1.8.10 libpng16.so.16.39.0 libjansson.so.4 libXau.so.6 libtirpc.a libXrender.so.1 libicutest.so.72.1 libgcr-ui-3.so.1 libfontconfig.so.1.12.0 libwayland-egl.so.1.21.0 libnsl.so.2 libcrypt.a libicuuc.so.72.1 libthai.so.0 libxkbcommon.so.0 libgraphite2.so.3.2.1 libgmodule-2.0.so.0.7600.1 libcairo-gobject.so.2.11600.0 libXcursor.so.1.0.2 libLerc.so.4 libgcr-ui-3.so.1.0.0 libgtk-3.so.0 libgprofng.so.0 libXrender.so.1.3.0 libdbus-1.so.3.32.1 libsasl2.so.2 libbsd.so.0.11.7 liblcms2.so.2.0.14 libmpfr.so.6 libkeyutils.so.1.10 libglib-2.0.so.0.7600.1 libicudata.so.72 libfribidi.so.0 libfribidi.so.0.4.0 libcairo-gobject.so.2 libbsd.so.0 libkmod.so.2 libdconfsettings.so libexpat.so.1 libmpfr.so.6.2.0 libgcr-base-3.so.1.0.0 libgp-collectorAPI.la libgp-collectorAPI.so libgp-sync.so libgp-iotrace.so libgp-collector.so libgp-heap.so libgp-collectorAPI.a libjpeg.so.8.2.2 libatk-bridge-2.0.so.0.0.0 libpixbufloader-xbm.so libpixbufloader-xpm.so libpixbufloader-qtif.so libpixbufloader-ani.so libpixbufloader-pnm.so libpixbufloader-tga.so libpixbufloader-icns.so libpixbufloader-bmp.so libpixbufloader-ico.so libpixbufloader-tiff.so libpixbufloader-gif.so libXrandr.so.2.2.0 libicudata.so.72.1 libicutu.so.72 libXcursor.so.1 libldap.so.2 libgck-1.so.0.0.0 libxcb-render.so.0 libicutu.so.72.1 libgraphite2.so.3 libdevmapper.so.1.02.1 libprintbackend-file.so libprintbackend-cups.so libcrypt.so libXinerama.so.1.0.0 libgdbm.so.6 libbrotlicommon.so.1.0.9 libXrandr.so.2 libgobject-2.0.so.0.7600.1 librtmp.so.1 libXext.so.6 libsecret-1.so.0.0.0 libgmodule-2.0.so.0 libpangocairo-1.0.so.0 libgdk_pixbuf-2.0.so.0.4200.10 libxml2.so.2.9.14 libctf-nobfd.so.0 libexpatw.so.1.8.10 libgprofng.so.0.0.0 libargon2.so.1 libthai.so.0.3.1 libicutest.so.72 libsframe.so.0 libharfbuzz.so.0.60000.0 libjpeg.so.8 libip4tc.so.2.0.0 libctf-nobfd.so.0.0.0 libgck-1.so.0 libgdbm.so.6.0.0 libsasldb.so libsasldb.so.2 libsasldb.so.2.0.25 libharfbuzz.so.0 libwayland-client.so.0 libfdisk.so.1 libassuan.so.0 libsasl2.so.2.0.25 libxml2.so.2 libwayland-client.so.0.21.0 libgio-2.0.so.0 libgcr-base-3.so.1 libmpc.so.3.3.1 libopcodes-2.40-system.so libXext.so.6.4.0 liblcms2.so.2 libgdbm_compat.so.4 liblber.so.2 libXinerama.so.1 libsframe.so.0.0.0 libdatrie.so.1.4.0 libpangocairo-1.0.so.0.5000.12 libcolordprivate.so.2.0.5 libcryptsetup.so.12 libtirpc.so libdconf.so.1 libicuio.so.72.1 libpango-1.0.so.0.5000.12 libXdamage.so.1.1.0 libdep.so libwayland-cursor.so.0 libXcomposite.so.1.0.0 libglib-2.0.so.0 libbrotlienc.so.1 libctf.so.0.0.0 libdbus-1.so.3 libxcb-shm.so.0 libatk-1.0.so.0.24809.1 libssh.so.4.9.4 libgtk-3-0 libgtk-3.so.0.2405.32 liblber.so.2.0.200 libXdmcp.so.6.0.0 libgio-2.0.so.0.7600.1 libpango-1.0.so.0 libassuan.so.0.8.5 libpixman-1.so.0.42.2 libxkbcommon.so.0.0.0 libbrotlidec.so.1 libmpc.so.3 libpixman-1.so.0 libgdk-3.so.0.2405.32 libxcb-render.so.0.0.0 libcairo.so.2.11600.0 libxcb-shm.so.0.0.0 libtirpc.so.3.0.0 libexpatw.so.1 libgthread-2.0.so.0.7600.1 libXdmcp.so.6 libnsl.so.2.0.1 libgraphite2.so.2.0.0 libjansson.so.4.14.0 libicui18n.so.72.1 libtirpc.so.3 libisl.so.23.2.0 libgdk_pixbuf-2.0.so.0 libgobject-2.0.so.0 libdatrie.so.1 libkeyutils.so.1 libicuio.so.72 libjbig.so.0 libbrotlienc.so.1.0.9 libssh.so.4 libcryptsetup.so.12.9.0 libfdisk.so.1.1.0 libbrotlicommon.so.1 libgdbm_compat.so.4.0.0 libjson-c.so.5.2.0 libcolord.so.2 libdconf.so.1.0.0 libepoxy.so.0 libXdamage.so.1 libfontconfig.so.1 libXcomposite.so.1 libgthread-2.0.so.0 libfreetype.so.6 libwayland-cursor.so.0.21.0 libXi.so.6.1.0 libwayland-egl.so.1 libcairo.so.2 libdeflate.so.0 libnsl.a libXfixes.so.3.1.0 libpsl.so.5.3.4 libBLTlite.2.5.so.8.6 lib-dynload libregrtest libpython3.11.so libpython3.11.a libpython3.11-pic.a lib2to3 libBLT.2.5.so.8.6 libssp_nonshared.a libgomp.so libasan_preinit.o libstdc++fs.a libgomp.spec libgcc_eh.a libsanitizer.spec libitm.a libtsan.a libbacktrace.a libgomp.a libstdc++.so libgcov.a libasan.so libquadmath.so libatomic.so libtsan.so libitm.so libgcc.a libgcc_s.so liblto_plugin.so libstdc++.a libubsan.a libcp1plugin.so.0 libcp1plugin.so libcc1plugin.so libcc1plugin.so.0 libcc1plugin.so.0.0.0 libcp1plugin.so.0.0.0 libitm.spec libtsan_preinit.o libcc1.so libquadmath.a liblsan.so libsupc++.a liblsan_preinit.o libubsan.so liblsan.a libasan.a libatomic.a liblto_plugin.soroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# \n\nfilter$(filter &lt;names...&gt;)\n\n\n示例\n\nlibs:= $(shell find /usr/lib -name lib*)libs_notdir:= $(notdir $(shell find /usr/lib -name lib*))libs_a:= $(filter %.a,$(libs_notdir))libs_so:= $(filter %.so,$(libs_notdir))out_filter:\t@echo ============= libs_a =============\t@echo $(libs_a) \t@echo ============= libs_so =============\t@echo $(libs_so) \n\nroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# make out_filter============= libs_a =============libresolv.a libanl.a libz.a libg.a libpython3.11.a libutil.a libexpat.a libc_nonshared.a libpthread.a libBrokenLocale.a librt.a libmvec.a libc.a libm-2.37.a libmcheck.a libdl.a libexpatw.a libm.a libtirpc.a libcrypt.a libgp-collectorAPI.a libnsl.a libpython3.11.a libpython3.11-pic.a libssp_nonshared.a libstdc++fs.a libgcc_eh.a libitm.a libtsan.a libbacktrace.a libgomp.a libgcov.a libgcc.a libstdc++.a libubsan.a libquadmath.a libsupc++.a liblsan.a libasan.a libatomic.a============= libs_so =============libdb-5.3.so libJIS.so libJISX0213.so libCNS.so libISOIR165.so libKSC.so libGB.so libmemusage.so libpcprofile.so libdecor-cairo.so libanl.so libm.so libtcl8.6.so libelf-0.188.so libdw-0.188.so libnss_compat.so libz.so libpython3.11.so libBrokenLocale.so libresolv.so libtk8.6.so libdebuginfod-0.188.so libc_malloc_debug.so libmvec.so libLLVM-15.so libexpat.so libsystemd-shared-252.so libsystemd-core-252.so libnss_hesiod.so libc.so libcryptsetup-token-systemd-fido2.so libcryptsetup-token-systemd-tpm2.so libcryptsetup-token-systemd-pkcs11.so libexpatw.so libntpc.so libthread_db.so libpulsecommon-16.1.so libnsl.so libbfd-2.40-system.so libdconfsettings.so libgp-collectorAPI.so libgp-sync.so libgp-iotrace.so libgp-collector.so libgp-heap.so libpixbufloader-xbm.so libpixbufloader-xpm.so libpixbufloader-qtif.so libpixbufloader-ani.so libpixbufloader-pnm.so libpixbufloader-tga.so libpixbufloader-icns.so libpixbufloader-bmp.so libpixbufloader-ico.so libpixbufloader-tiff.so libpixbufloader-gif.so libprintbackend-file.so libprintbackend-cups.so libcrypt.so libsasldb.so libopcodes-2.40-system.so libtirpc.so libdep.so libpython3.11.so libgomp.so libstdc++.so libasan.so libquadmath.so libatomic.so libtsan.so libitm.so libgcc_s.so liblto_plugin.so libcp1plugin.so libcc1plugin.so libcc1.so liblsan.so libubsan.so liblto_plugin.soroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# \n\nbasename$(basename &lt;names...&gt;)\n\n\n示例1\n\nlibs:= $(shell find /usr/lib -name lib*)libs_notdir:= $(notdir $(shell find /usr/lib -name lib*))libs_a:= $(filter %.a,$(libs_notdir))libs_so:= $(filter %.so,$(libs_notdir))libs_a_basename:= $(basename $(filter %.a,$(libs_notdir)))libs_so_basename:= $(basename $(filter %.so,$(libs_notdir)))out_basename:\t@echo ============= libs_a_basename =============\t@echo $(libs_a_basename) \t@echo ============= libs_so_basename =============\t@echo $(libs_so_basename) \n\nroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# make out_basename============= libs_a_basename =============libresolv libanl libz libg libpython3.11 libutil libexpat libc_nonshared libpthread libBrokenLocale librt libmvec libc libm-2.37 libmcheck libdl libexpatw libm libtirpc libcrypt libgp-collectorAPI libnsl libpython3.11 libpython3.11-pic libssp_nonshared libstdc++fs libgcc_eh libitm libtsan libbacktrace libgomp libgcov libgcc libstdc++ libubsan libquadmath libsupc++ liblsan libasan libatomic============= libs_so_basename =============libdb-5.3 libJIS libJISX0213 libCNS libISOIR165 libKSC libGB libmemusage libpcprofile libdecor-cairo libanl libm libtcl8.6 libelf-0.188 libdw-0.188 libnss_compat libz libpython3.11 libBrokenLocale libresolv libtk8.6 libdebuginfod-0.188 libc_malloc_debug libmvec libLLVM-15 libexpat libsystemd-shared-252 libsystemd-core-252 libnss_hesiod libc libcryptsetup-token-systemd-fido2 libcryptsetup-token-systemd-tpm2 libcryptsetup-token-systemd-pkcs11 libexpatw libntpc libthread_db libpulsecommon-16.1 libnsl libbfd-2.40-system libdconfsettings libgp-collectorAPI libgp-sync libgp-iotrace libgp-collector libgp-heap libpixbufloader-xbm libpixbufloader-xpm libpixbufloader-qtif libpixbufloader-ani libpixbufloader-pnm libpixbufloader-tga libpixbufloader-icns libpixbufloader-bmp libpixbufloader-ico libpixbufloader-tiff libpixbufloader-gif libprintbackend-file libprintbackend-cups libcrypt libsasldb libopcodes-2.40-system libtirpc libdep libpython3.11 libgomp libstdc++ libasan libquadmath libatomic libtsan libitm libgcc_s liblto_plugin libcp1plugin libcc1plugin libcc1 liblsan libubsan liblto_pluginroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# \n\n\n示例2\n\nlibs:= $(shell find /usr/lib -name lib*)libs_notdir:= $(notdir $(shell find /usr/lib -name lib*))libs_a_basename_subst:= $(subst lib,,$(basename $(filter %.a,$(libs_notdir))))libs_so_basename_subst:= $(subst lib,,$(basename $(filter %.so,$(libs_notdir))))out_basename_subst:\t@echo ============= libs_a_basename_subst =============\t@echo $(libs_a_basename_subst) \t@echo ============= libs_so_basename_subst =============\t@echo $(libs_so_basename_subst) \n\nroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# make out_basename_subst============= libs_a_basename_subst =============resolv anl z g python3.11 util expat c_nonshared pthread BrokenLocale rt mvec c m-2.37 mcheck dl expatw m tirpc crypt gp-collectorAPI nsl python3.11 python3.11-pic ssp_nonshared stdc++fs gcc_eh itm tsan backtrace gomp gcov gcc stdc++ ubsan quadmath supc++ lsan asan atomic============= libs_so_basename_subst =============db-5.3 JIS JISX0213 CNS ISOIR165 KSC GB memusage pcprofile decor-cairo anl m tcl8.6 elf-0.188 dw-0.188 nss_compat z python3.11 BrokenLocale resolv tk8.6 debuginfod-0.188 c_malloc_debug mvec LLVM-15 expat systemd-shared-252 systemd-core-252 nss_hesiod c cryptsetup-token-systemd-fido2 cryptsetup-token-systemd-tpm2 cryptsetup-token-systemd-pkcs11 expatw ntpc thread_db pulsecommon-16.1 nsl bfd-2.40-system dconfsettings gp-collectorAPI gp-sync gp-iotrace gp-collector gp-heap pixbufloader-xbm pixbufloader-xpm pixbufloader-qtif pixbufloader-ani pixbufloader-pnm pixbufloader-tga pixbufloader-icns pixbufloader-bmp pixbufloader-ico pixbufloader-tiff pixbufloader-gif printbackend-file printbackend-cups crypt sasldb opcodes-2.40-system tirpc dep python3.11 gomp stdc++ asan quadmath atomic tsan itm gcc_s lto_plugin cp1plugin cc1plugin cc1 lsan ubsan lto_pluginroot@3570ce881c55:~/code/vscode-server/Projects/Make_CMake# \n","categories":["开发辅助"],"tags":["Make","CMake"]},{"title":"Nginx","url":"/cmchtge9j003wnegbefs08hmj/","content":"需求分析\n\n\n序号\n需求简述\n完成情况\n备注\n\n\n\n1\nUbuntu系统安装docker\n完成\n\n\n\n2\ndocker部署容器（ahmadnassri&#x2F;vscode-server:latest）\n完成\n\n\n\n3\n为公网IP申请ssl证书\n完成\n目前支持公网IP的ssl证书只找到zerossl\n\n\n4\n部署nginx配置ssl\n完成\nzerossl申请时，需要先通过访问公网IP验证是否加载提供的txt文件，暂时未完全掌握\n\n\n5\n为docker部署的容器成功运行后的端口开启反向代理\n完成\n\n\n\n6\n为端口加入认证服务\n完成\n\n\n\n基本需求软件及版本分析\n\n\n软件名称\n版本\n\n\n\nUbuntu\n20.04 LTS\n\n\nDocker\n20.10.5\n\n\nnginx\n1.18.0\n\n\nUbuntu版本信息root@VM-24-11-ubuntu:~# lsb_release -aNo LSB modules are available.Distributor ID:\tUbuntuDescription:\tUbuntu 20.04 LTSRelease:\t20.04Codename:\tfocalroot@VM-24-11-ubuntu:~# root@VM-24-11-ubuntu:~# uname -aLinux VM-24-11-ubuntu 5.4.0-42-generic #46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linuxroot@VM-24-11-ubuntu:~# uname -v#46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020root@VM-24-11-ubuntu:~# cat /etc/os-release NAME=&quot;Ubuntu&quot;VERSION=&quot;20.04 LTS (Focal Fossa)&quot;ID=ubuntuID_LIKE=debianPRETTY_NAME=&quot;Ubuntu 20.04 LTS&quot;VERSION_ID=&quot;20.04&quot;HOME_URL=&quot;https://www.ubuntu.com/&quot;SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;VERSION_CODENAME=focalUBUNTU_CODENAME=focalroot@VM-24-11-ubuntu:~# \n\nDocker版本信息root@VM-24-11-ubuntu:~# docker versionClient: Docker Engine - Community Version:           20.10.5 API version:       1.41 Go version:        go1.13.15 Git commit:        55c4c88 Built:             Tue Mar  2 20:18:20 2021 OS/Arch:           linux/amd64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.5  API version:      1.41 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       363e9a8  Built:            Tue Mar  2 20:16:15 2021  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          1.4.4  GitCommit:        05f951a3781f4f2c1911b05e61c143e9c30eaa8e runc:  Version:          1.0.0-rc93  GitCommit:        12644e614e25b05da6fd34a38ffa0cfe1903fdec docker-init:  Version:          0.19.0  GitCommit:        de40ad0root@VM-24-11-ubuntu:~# \n\nNginx版本信息root@VM-24-11-ubuntu:~# nginx -vnginx version: nginx/1.18.0 (Ubuntu)\n\n实现步骤docker部署\n默认已经部署完成\n\nbash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)\n\n镜像部署\n本次部署镜像为ahmadnassri&#x2F;vscode-server:latest，如需其他镜像部署，方法一样\n\ndocker run -d \\ --privileged \\ --restart=always \\ --name vscode-server \\ -p Port2:8000 \\ -e PASSWORD=code-server \\ -e SUDO_PASSWORD=root \\ -e VSCODE_KEYRING_PASS=&quot;vscode&quot; \\ -e VSCODE_SERVE_MODE=serve-local \\ -v /data/docker/vscode-server:/root/code/vscode-server \\ ahmadnassri/vscode-server:latest\n\nNginx部署\n安装Nginx\n\n# 中途如有选项，默认即可root@VM-24-11-ubuntu:~# sudo apt install nginxroot@VM-24-11-ubuntu:~# systemctl status nginx● nginx.service - A high performance web server and a reverse proxy server     Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)     Active: active (running) since Tue 2023-03-21 16:14:50 CST; 3h 47min ago       Docs: man:nginx(8)   Main PID: 189929 (nginx)      Tasks: 3 (limit: 4612)     Memory: 7.0M     CGroup: /system.slice/nginx.service             ├─189929 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;             ├─189930 nginx: worker process             └─189931 nginx: worker processMar 21 16:14:50 VM-24-11-ubuntu systemd[1]: Starting A high performance web server and a reverse proxy server...Mar 21 16:14:50 VM-24-11-ubuntu systemd[1]: Started A high performance web server and a reverse proxy server.root@VM-24-11-ubuntu:~# \n\n\n修改Nginx配置文件\n\n\n本配置文件将会监听80端口使得http的请求转发到https，另外监听443端口，并配置反向代理到自定义端口（18778）\n\n1. 配置文件位于：/etc/nginx/sites-available下的default\n\nserver &#123;    listen 80;    server_name IP;    location / &#123;        proxy_pass http://127.0.0.1:Port1;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;    &#125;&#125;server &#123;    listen 443 ssl;    server_name IP;    ssl_certificate /etc/ssl/certs/certificate_ca_bundle.crt;    ssl_certificate_key /etc/ssl/private/private.key;    location / &#123;        proxy_pass http://127.0.0.1:Port2;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\tproxy_set_header Upgrade $http_upgrade;\tproxy_set_header Connection &quot;upgrade&quot;;\tproxy_set_header Accept-Encoding gzip;\tproxy_http_version 1.1;    &#125;&#125;\n\n2. 重启nginx，并查看nginx状态\n\n# 查看语法是否有误，无误后重启root@VM-24-11-ubuntu:~# nginx -troot@VM-24-11-ubuntu:~# sudo systemctl restart nginxroot@VM-24-11-ubuntu:~# systemctl status nginx# 查看nginx状态无误后，可以设置nginx开机自启root@VM-24-11-ubuntu:~# systemctl enable nginx\n\n3. Nginx安装注意事项\n\n\n安装过程中可能出现端口占用的问题，可以通过如下命令查询到占用端口的进程，杀死进程后再重新尝试\n\nroot@VM-24-11-ubuntu:~# lsof -i:80COMMAND    PID     USER   FD   TYPE  DEVICE SIZE/OFF NODE NAMEnginx   189929     root    6u  IPv4 1457821      0t0  TCP *:http (LISTEN)nginx   189930 www-data    6u  IPv4 1457821      0t0  TCP *:http (LISTEN)nginx   189931 www-data    6u  IPv4 1457821      0t0  TCP *:http (LISTEN)root@VM-24-11-ubuntu:~# lsof -i:80 -P -t -sTCP:LISTEN189929189930189931root@VM-24-11-ubuntu:~# kill -9 18929\n\n\n卸载Nginx\n\nsudo apt-get remove nginx\n\n\n删除Nginx以及配置文件\n\nsudo apt-get purge nginxsudo apt-get purge nginx nginx-common nginx-full\n\nSSL证书验证\nZeroSSL 证书申请\n\n\nhttps://zerossl.com\n\n\n验证域名\n选择网站 Web 访问的话，直接下载验证文件，然后上传到 IP 地址默认的 Web 目录(&#x2F;var&#x2F;www&#x2F;html&#x2F;)下，要求是路径保持如下：\n\n\nubuntu@ip-172-31-38-101:~$ cd /var/www/html/ubuntu@ip-172-31-38-101:/var/www/html$ ls -a.  ..  .well-known  index.nginx-debian.htmlubuntu@ip-172-31-38-101: cd .well-known/pki-validationubuntu@ip-172-31-38-101: pwd/var/www/html/.well-known/pki-validationubuntu@ip-172-31-38-101: ls -a.  ..  2F451152F65DFD149BDF7F23F4AJOL33.txt\n\n\n用你的浏览器打开 IP，保证可以访问到验证文件。\n\n\nhttps://www.51cto.com/article/708255.html\n\n为端口加入认证服务\n服务器对外提供的端口服务中如果没有权限验证机制可通过nginx的用户名密码认证来替代\n\n\n安装工具 apache2-utils\n\nroot@VM-24-11-ubuntu:~# sudo apt updateroot@VM-24-11-ubuntu:~# sudo apt install apache2-utils\n\n\n生成配置文件\n\n# 1.交互方式输入密码root@VM-24-11-ubuntu:~# sudo htpasswd -c /etc/nginx/.htpasswd username# 输入要设置的密码# 2.直接设置密码root@VM-24-11-ubuntu:~# sudo htpasswd -c /etc/nginx/.htpasswd username password\n\n\n修改nginx配置文件\n\nserver &#123;     listen 80;     server_name IP;     location / &#123;         auth_basic &quot;Restricted Access&quot;;         auth_basic_user_file /etc/nginx/.htpasswd;         add_header Cache-Control &quot;no-cache, private&quot;;         proxy_pass http://127.0.0.1:PORT; # 转发请求到容器的端口         proxy_set_header Host $host;         proxy_set_header X-Real-IP $remote_addr;     &#125; &#125;\n\n\n重启nginx\n\nroot@VM-24-11-ubuntu:~# sudo systemctl restart nginx\n\nHTTP自动转至HTTPSserver &#123;    listen 80;    server_name 1.1.1.1;    # Redirect all HTTP requests to HTTPS    return 301 https://$host$request_uri;&#125;\n","categories":["开发辅助"],"tags":["Nginx"]},{"title":"NodeJs学习笔记","url":"/cmchtge9j003xnegbhfuzecom/","content":"fnminstalls fnm (Fast Node Manager)curl -fsSL https://fnm.vercel.app/install | bash\ndownload and install Node.jsfnm use –install-if-missing 20\nverifies the right Node.js version is in the environmentnode -v # should print v20.15.0\nverifies the right NPM version is in the environmentnpm -v # should print 10.7.0\nnvminstalls nvm (Node Version Manager)curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\ndownload and install Node.js (you may need to restart the terminal)nvm install 20\nverifies the right Node.js version is in the environmentnode -v # should print v20.15.0\nverifies the right NPM version is in the environmentnpm -v # should print 10.7.0\n链接https://nodejs.org/en/download/package-managerhttps://nodejs.org/en/download/package-manager\n","categories":["开发辅助"],"tags":["Node.js"]},{"title":"Gitlab","url":"/cmchtge9k0041negb33uc4jpz/","content":"GitlabDocker 部署部署\ndocker run -itd \\-p 19980:80 \\-p 19922:22 \\-u root \\-v /data/docker/gitlab/data/log:/var/log/gitlab \\-v /data/docker/gitlab/data/opt:/var/opt/gitlab \\-v /data/docker/gitlab/data/etc:/etc/gitlab \\--restart=unless-stopped \\--name=gitlab \\gitlab/gitlab-ce\n\n创建网络\ndocker network create custom_network --subnet=172.20.0.0/16\n\n指定网络部署\ndocker run -itd \\-p 19980:80 \\-p 19922:22 \\--network custom_network --ip 172.20.0.100 \\  # 请确保这个 IP 地址在你的网络中没有冲突-u root \\-v /data/docker/gitlab/data/log:/var/log/gitlab \\-v /data/docker/gitlab/data/opt:/var/opt/gitlab \\-v /data/docker/gitlab/data/etc:/etc/gitlab \\--restart=unless-stopped \\  # 推荐使用 unless-stopped 替代 always--name=gitlab \\gitlab/gitlab-ce\n\n查看 root 初始密码\ndocker exec -it gitlab grep &quot;Password&quot;: /etc/gitlab/initial_root_password\n\nGitlab CI&#x2F;CDGitlab Runner\ngitlab runner 将会通过执行.gitlab-ci.yml 文件进行 CI&#x2F;CD 操作\n\n\n\n\n\n安装Linux AMD64# Download the binary for your systemsudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64# Give it permission to executesudo chmod +x /usr/local/bin/gitlab-runner# Create a GitLab Runner usersudo useradd --comment &#x27;GitLab Runner&#x27; --create-home gitlab-runner --shell /bin/bash# Install and run as a servicesudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runnersudo gitlab-runner start\n\nDockersudo docker run -d --name gitlab-runner --restart always -v /data/docker/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest\n\n注册Linux AMD64\nDockerdocker run --rm -itd -v /data/docker/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register --executor &quot;docker&quot; --docker-image alpine:latest --url &quot;http://192.168.2.136:19980/&quot; --registration-token &quot;npVkW9uCZiLbjXzzNJVN&quot; --description &quot;first-register-runner&quot; --tag-list &quot;test-cicd,docker-cicd&quot; --run-untagged=&quot;true&quot; --locked=&quot;false&quot; --access-level=&quot;not_protected&quot;\n\n成功注册\n\n常用概念pipeline\n一次 pipeline 相当于一次任务构建,里面可以包含多个流程,如安装依赖、运行测试、编译代码、部署服务器等。任何提交或者 Merge Request 的合并都可以触发 pipeline\n\n\nstage\nstage 表示一个构建阶段,可以在一个 pipeline 中定义多个 stage,这些 stage 会有以下特点\n\n\n所有 stage 会按照 stages 参数里定义的顺序串行执行,及当一个 stage 完成后才会执行下一个 stage\n默认情况下当所有的 stage 成功后,最后的 pipeline 构建任务才会成功\n默认情况下任何一个 stage 失败,那么后面的 stage 不会执行,该构建任务最终会失败\n\n\njob\njob 表示构建工作,即某个 stage 里面执行的工作内容,可以在同一个 stage 里定义多个 job\n\n\n相同 stage 中的 job 会并行执行\n相同 stage 中的 job 都执行成功式,该 stage 才会成功\n如果任何一个 job 失败,那么该 stage 失败,即构建该任务失败\n\n\n\n.gitlab-ci.yml\npipeline 执行的内容使用 ymal 语言进行描述，默认文件名为 .gitlab-ci.yml，该文件存放在仓库的根目录下即可生效\n\n\n\n\ngitlab-ci.ymlstages: - linecode - install - build - deploy - clean - stage1 - stage2job1: stage: stage1 script:  - echo &quot;Running in stage1 of job1...&quot;job2: stage: stage2 script:  - echo &quot;Running in stage2 of job2...&quot;\n","categories":["开发辅助"],"tags":["Gitlab"]},{"title":"Alist学习笔记","url":"/cmchtge9k0043negbfrfp6y6x/","content":"安装\n使用alist挂载网盘，通过onlyoffice解决office文件预览的问题\n\nalistdocker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=&quot;alist&quot; xhofe/alist:main\n\n修改密码\n# 进入容器后执行以下命令83cbaa39bf72:/opt/alist# lsalist  data83cbaa39bf72:/opt/alist# ./alist adminINFO[2023-05-06 06:48:19] reading config file: data/config.json      INFO[2023-05-06 06:48:19] load config from env with prefix: ALIST_   INFO[2023-05-06 06:48:19] init logrus...                             INFO[2023-05-06 06:48:19] admin user&#x27;s info: username: adminpassword: EEL9Otl8 83cbaa39bf72:/opt/alist# \n\nonlyofficesudo docker run -i -t -d -p 80:80 --name onlyoffice \\    -v /app/onlyoffice/DocumentServer/logs:/var/log/onlyoffice  \\    -v /app/onlyoffice/DocumentServer/data:/var/www/onlyoffice/Data  \\    -v /app/onlyoffice/DocumentServer/lib:/var/lib/onlyoffice \\    -v /app/onlyoffice/DocumentServer/rabbitmq:/var/lib/rabbitmq \\    -v /app/onlyoffice/DocumentServer/redis:/var/lib/redis \\    -v /app/onlyoffice/DocumentServer/db:/var/lib/postgresql  onlyoffice/documentserver\n\n文件预览配置onlyoffice\n进入容器，修改view.html预览文件，没有则创建\n\n具体位置可以自行调整，这里以api.js同级为例，能访问即可。\ndocker exec -it e91769de8a2b /bin/bash# 进入 view文件 位置root@e91769de8a2b:/var/www/onlyoffice/documentserver/web-apps/apps/api/documents# pwd/var/www/onlyoffice/documentserver/web-apps/apps/api/documentsroot@e91769de8a2b:/var/www/onlyoffice/documentserver/web-apps/apps/api/documents# root@e91769de8a2b:/var/www/onlyoffice/documentserver/web-apps/apps/api/documents# cat view.html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;OnlyOffice Viewer&lt;/title&gt;&lt;/head&gt; &lt;body&gt;    &lt;div id=&quot;placeholder&quot;&gt;&lt;/div&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;http://IP:onlyoffice_PORT/web-apps/apps/api/documents/api.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        function getQueryParamValue(name) &#123;            const searchParams = new URLSearchParams(window.location.search);            return searchParams.get(name);        &#125;              const url = decodeURIComponent(getQueryParamValue(&quot;src&quot;));        const fileName = url.substring(url.lastIndexOf(&#x27;/&#x27;) + 1, url.lastIndexOf(&#x27;?&#x27;) != -1 ? url.lastIndexOf(&#x27;?&#x27;) : url.length);        const fileExtension = fileName.split(&#x27;.&#x27;).pop();        const docEditor = new DocsAPI.DocEditor(&quot;placeholder&quot;, &#123;            &quot;document&quot;: &#123;                &quot;fileType&quot;: fileExtension,                &quot;permissions&quot;: &#123;                    &quot;edit&quot;: true,                    &quot;comment&quot;: true,                    &quot;download&quot;: true,                    &quot;print&quot;: true,                    &quot;fillForms&quot;: true,                &#125;,                &quot;title&quot;: fileName,                &quot;url&quot;: url,            &#125;,            &quot;editorConfig&quot;: &#123;                &quot;lang&quot;: &quot;zh-CN&quot;,                &quot;mode&quot;: &quot;view&quot;,            &#125;,            &quot;height&quot;: &quot;1080px&quot;,            &quot;type&quot;: &quot;desktop&quot;,        &#125;);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;root@e91769de8a2b:/var/www/onlyoffice/documentserver/web-apps/apps/api/documents# \n\n\n测试api.js文件是否可以访问\n上述文件中的src根据需要根据情况自行替换IP和端口，访问链接后要求可以正确显示内容\n\n\n\n\n\n测试view.html文件是否可以访问\n\nhttp://IP:onlyoffice_PORT/web-apps/apps/api/documents/view.html\n\n出现如下提示弹窗后代表onlyoffice配置正确，可以进入alist管理页面配置\n\nThe “document.fileType” parameter for the config object is invalid. Please correct it.\n\n现有 onlyoffice:7.5.0.125 部署会出现下列问题\n\n\n具体解决方法如下\ndocker exec -it e91769de8a2b /bin/bashcd /etc/onlyoffice/documentserversed -i &#x27;s/true/false/g&#x27; local.json  supervisorctl restart all\n\nalist\n进入alist管理 -&gt; 设置 -&gt; 预览 -&gt; Iframe\n在需要的文件类型下添加onlyoffice链接，其中?前面的为上述onlyoffice中配置的链接，?后面的为参数。具体内容如下。\n\n\nhttp://IP:onlyoffice_PORT/web-apps/apps/api/documents/view.html?src=$e_url\n\n&#123;\t&quot;doc,docx,xls,xlsx,ppt,pptx&quot;: &#123;\t\t&quot;onlyoffice&quot;:&quot;http://IP:onlyoffice_PORT/web-apps/apps/api/documents/view.html?src=$e_url&quot;,        &quot;Google&quot;:&quot;https://docs.google.com/gview?url=$e_url&amp;embedded=true&quot;\t&#125;,\t&quot;pdf&quot;: &#123;        &quot;onlyoffice&quot;:&quot;http://IP:onlyoffice_PORT/web-apps/apps/api/documents/view.html?src=$e_url&quot;,\t\t&quot;PDF.js&quot;:&quot;https://alist-org.github.io/pdf.js/web/viewer.html?file=$e_url&quot;\t&#125;,\t&quot;epub&quot;: &#123;        &quot;onlyoffice&quot;:&quot;http://IP:onlyoffice_PORT/web-apps/apps/api/documents/view.html?src=$e_url&quot;,\t\t&quot;EPUB.js&quot;:&quot;https://alist-org.github.io/static/epub.js/viewer.html?url=$e_url&quot;\t&#125;&#125;\n\n页面预览配置\n进入alist管理 -&gt; 设置 -&gt; 全局 -&gt; 自定义头部\n\n&lt;script src=&quot;https://polyfill.io/v3/polyfill.min.js?features=String.prototype.replaceAll&quot;&gt;&lt;/script&gt;&lt;!--引入字体，全局字体使用--&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://npm.elemecdn.com/lxgw-wenkai-webfont@1.1.0/lxgwwenkai-regular.css&quot; /&gt;&lt;!--不蒜子计数器--&gt;&lt;script async src=&quot;https://busuanzi.icodeq.com/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&lt;style&gt;/*白天背景图https://i.postimg.cc/wxChqCJS/13.png*/.hope-ui-light&#123;  background-image: url(&quot;https://i.postimg.cc/3wfvPVYf/17.png&quot;) !important;  background-repeat:no-repeat;background-size:cover;background-attachment:fixed;background-position-x:center;&#125;/*夜间背景图https://i.postimg.cc/d1DrBsRW/15.png*/.hope-ui-dark &#123;    background-image: url(&quot;https://i.postimg.cc/ZYB8hb98/12.png&quot;) !important;    background-repeat:no-repeat;background-size:cover;background-attachment:fixed;background-position-x:center;&#125;/*主列表夜间模式透明，50%这数值是控制透明度大小的*/.obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-iigjoxS-css&#123;background-color:rgb(0 0 0 / 50%) !important;&#125;/*readme夜间模式透明，50%这数值是控制透明度大小的*/.hope-c-PJLV.hope-c-PJLV-iiuDLME-css&#123;background-color:rgb(0 0 0 / 50%) !important;&#125;/*主列表透明*/.obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-igScBhH-css &#123;background-color: rgba(255, 255, 255, 0.5) !important;&#125;/*readme透明*/.hope-c-PJLV.hope-c-PJLV-ikSuVsl-css&#123;background-color: rgba(255, 255, 255, 0.5) !important;&#125;/*顶部右上角切换按钮透明*/.hope-c-ivMHWx-hZistB-cv.hope-icon-button&#123;background-color: rgba(255, 255, 255, 0.3) !important;&#125;/*右下角侧边栏按钮透明*/.hope-c-PJLV-ijgzmFG-css&#123;background-color: rgba(255, 255, 255, 0.5) !important;&#125;/*白天模式代码块透明*/.hope-ui-light pre&#123;    background-color: rgba(255, 255, 255, 0.1) !important;&#125;/*夜间模式代码块透明*/.hope-ui-dark pre &#123;    background-color: rgba(255, 255, 255, 0) !important;&#125;/*全局字体*/*&#123;font-family:LXGW WenKai&#125;*&#123;font-weight:bold&#125;body &#123;font-family: LXGW WenKai;&#125;/*底部CSS，.APP .tanle这三个一起的*/dibu &#123;    border-top: 0px;    position: absolute;    bottom: 0;    width: 100%;    margin: 0px;    padding: 0px;&#125;.App &#123;    min-height: 85vh;&#125;.table &#123;    margin: auto;&#125;/*去掉底部*/.footer &#123;    display: none !important;&#125;&lt;/style&gt;\n\n\n进入alist管理 -&gt; 设置 -&gt; 全局 -&gt; 自定义内容\n\n&lt;!--延迟加载--&gt;&lt;!--如果要写自定义内容建议都加到这个延迟加载的范围内--&gt;&lt;div id=&quot;customize&quot; style=&quot;display: none;&quot;&gt;    &lt;div&gt;        &lt;br /&gt;        &lt;center class=&quot;dibu&quot;&gt;            &lt;div style=&quot; line-height: 20px;font-size: 11pt;font-weight: bold;&quot;&gt;                &lt;span&gt;                    &lt;span style=&quot;color: rgb(13, 109, 252);&quot; id=&quot;hitokoto&quot;&gt;                        &lt;a href=&quot;#&quot; id=&quot;hitokoto_text&quot;&gt;                            &quot;人生最大的遗憾,就是在最无能为力的时候遇到一个想要保护一生的人。&quot;                        &lt;/a&gt;                    &lt;/span&gt;                 &lt;/span&gt;                &lt;p style=&quot;margin-left: 10rem;font-size: 10pt;color: rgb(13, 109, 252);&quot;&gt;                    &lt;small&gt;                        —— My Sun                    &lt;/small&gt;                &lt;/p&gt;            &lt;/div&gt;\t\t\t&lt;div style=&quot;font-size: 12px;&quot;&gt;                &lt;span class=&quot;nav-item&quot; style=&quot;color: rgb(13, 109, 252);&quot;&gt;\t\t\t\t\t本&quot;&lt;span style=&quot;color: rgb(13, 109, 252); font-weight: bold;&quot;&gt;&lt;a href=&quot;#&quot;&gt;目录&lt;/a&gt;&lt;/span&gt;&quot;访问量 &lt;span id=&quot;busuanzi_value_page_pv&quot; style=&quot;color: rgb(13, 109, 252); font-weight: bold;&quot;&gt;&lt;/span&gt; 次 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; style=&quot;color: rgb(13, 109, 252); font-weight: bold;&quot;&gt;&lt;/span&gt;                次 本站总访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; style=&quot;color: rgb(13, 109, 252); font-weight: bold;&quot;&gt;&lt;/span&gt; 人\t\t\t\t&lt;/span&gt;\t\t\t\t&lt;br /&gt;\t\t\t\t&lt;!--版权，请尊重作者--&gt;                &lt;span class=&quot;nav-item&quot; style=&quot;color: rgb(13, 109, 252);&quot;&gt;                    &lt;a class=&quot;nav-link&quot; href=&quot;https://github.com/alist-org/alist&quot; target=&quot;_blank&quot;&gt;                        &lt;i class=&quot;fa-solid fa-copyright&quot; style=&quot;color:#409EFF;&quot; aria-hidden=&quot;true&quot;&gt;                        &lt;/i&gt;                        Alist |                     &lt;/a&gt;                &lt;/span&gt;                &lt;!--后台入口--&gt;                &lt;span class=&quot;nav-item&quot; style=&quot;color: rgb(13, 109, 252);&quot;&gt;                    &lt;a class=&quot;nav-link&quot; href=&quot;/@manage&quot; target=&quot;_blank&quot;&gt;                        &lt;i class=&quot;fa-solid fa-folder-gear&quot; style=&quot;color:#409EFF;&quot; aria-hidden=&quot;true&quot;&gt;                        &lt;/i&gt;                        管理                    &lt;/a&gt;                &lt;/span&gt;            &lt;/div&gt;        &lt;/center&gt;        &lt;br /&gt;        &lt;br /&gt;    &lt;/div&gt;  &lt;!--延迟加载范围到这里结束--&gt;&lt;/div&gt;&lt;!--延迟加载配套使用JS--&gt;&lt;script&gt;    let interval = setInterval(() =&gt; &#123;        if (document.querySelector(&quot;.footer&quot;)) &#123;            document.querySelector(&quot;#customize&quot;).style.display = &quot;&quot;;            clearInterval(interval);        &#125;    &#125;, 200);&lt;/script&gt;&lt;!-- 网页鼠标点击特效 - 蛛网 --&gt;&lt;script&gt;\t!function () &#123;    function n(n, e, t) &#123;        return n.getAttribute(e) || t    &#125;     function e(n) &#123;        return document.getElementsByTagName(n)    &#125;     function t() &#123;        var t = e(&quot;script&quot;), o = t.length, i = t[o - 1];        return &#123;l: o, z: n(i, &quot;zIndex&quot;, -1), o: n(i, &quot;opacity&quot;, .5), c: n(i, &quot;color&quot;, &quot;0,0,0&quot;), n: n(i, &quot;count&quot;, 99)&#125;    &#125;     function o() &#123;        a = m.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, c = m.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight    &#125;     function i() &#123;        r.clearRect(0, 0, a, c);        var n, e, t, o, m, l;        s.forEach(function (i, x) &#123;            for (i.x += i.xa, i.y += i.ya, i.xa *= i.x &gt; a || i.x &lt; 0 ? -1 : 1, i.ya *= i.y &gt; c || i.y &lt; 0 ? -1 : 1, r.fillRect(i.x - .5, i.y - .5, 1, 1), e = x + 1; e &lt; u.length; e++) n = u[e], null !== n.x &amp;&amp; null !== n.y &amp;&amp; (o = i.x - n.x, m = i.y - n.y, l = o * o + m * m, l &lt; n.max &amp;&amp; (n === y &amp;&amp; l &gt;= n.max / 2 &amp;&amp; (i.x -= .03 * o, i.y -= .03 * m), t = (n.max - l) / n.max, r.beginPath(), r.lineWidth = t / 2, r.strokeStyle = &quot;rgba(&quot; + d.c + &quot;,&quot; + (t + .2) + &quot;)&quot;, r.moveTo(i.x, i.y), r.lineTo(n.x, n.y), r.stroke()))        &#125;), x(i)    &#125;     var a, c, u, m = document.createElement(&quot;canvas&quot;), d = t(), l = &quot;c_n&quot; + d.l, r = m.getContext(&quot;2d&quot;),        x = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (n) &#123;            window.setTimeout(n, 1e3 / 45)        &#125;, w = Math.random, y = &#123;x: null, y: null, max: 2e4&#125;;    m.id = l, m.style.cssText = &quot;position:fixed;top:0;left:0;z-index:&quot; + d.z + &quot;;opacity:&quot; + d.o, e(&quot;body&quot;)[0].appendChild(m), o(), window.onresize = o, window.onmousemove = function (n) &#123;        n = n || window.event, y.x = n.clientX, y.y = n.clientY    &#125;, window.onmouseout = function () &#123;        y.x = null, y.y = null    &#125;;    for (var s = [], f = 0; d.n &gt; f; f++) &#123;        var h = w() * a, g = w() * c, v = 2 * w() - 1, p = 2 * w() - 1;        s.push(&#123;x: h, y: g, xa: v, ya: p, max: 6e3&#125;)    &#125;    u = s.concat([y]), setTimeout(function () &#123;        i()    &#125;, 100)&#125;();&lt;/script&gt;\n\nnginx反向代理配置\n配置之后，根据反向代理的规则，可分别通过http://ip 以及 https://ip 访问不同的服务\n\n➜  ~ cat /etc/nginx/sites-available/default### You should look at the following URL&#x27;s in order to grasp a solid understanding# of Nginx configuration files in order to fully unleash the power of Nginx.# https://www.nginx.com/resources/wiki/start/# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/# https://wiki.debian.org/Nginx/DirectoryStructure## In most cases, administrators will remove this file from sites-enabled/ and# leave it as reference inside of sites-available where it will continue to be# updated by the nginx packaging team.## This file will automatically load configuration files provided by other# applications, such as Drupal or Wordpress. These applications will be made# available underneath a path with that package name, such as /drupal8.## Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.### Default server configuration### server &#123;#    listen 80;#    server_name IP;    # return 301 http://$host$request_uri;    # return 301 https://$host$request_uri;#&#125;server &#123;    listen 443 ssl;    server_name IP;    ssl_certificate /etc/ssl/certs/certificate_ca_bundle.crt;    ssl_certificate_key /etc/ssl/private/private.key;    location / &#123;        proxy_pass http://127.0.0.1:18778;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\t\tproxy_set_header Upgrade $http_upgrade;\t\tproxy_set_header Connection &quot;upgrade&quot;;\t\tproxy_set_header Accept-Encoding gzip;\t\tproxy_http_version 1.1;    &#125;&#125;server &#123;    listen 80;    server_name IP;    location / &#123;        proxy_pass http://127.0.0.1:19997;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\t\tproxy_set_header Upgrade $http_upgrade;\t\tproxy_set_header Connection &quot;upgrade&quot;;\t\tproxy_set_header Accept-Encoding gzip;\t\tproxy_http_version 1.1;    &#125;&#125;➜  ~ ➜  ~ systemctl restart nginx.service➜  ~ systemctl status nginx.service\n\n参考链接\nhttps://alist.nn.ci/zh/\n\n\nhttps://hub.docker.com/r/onlyoffice/documentserver\n\n\nhttps://github.com/ONLYOFFICE/Docker-DocumentServer\n\n","categories":["开发辅助"],"tags":["Alist"]},{"title":"Anaconda学习笔记","url":"/cmchtge9l0048negbbe3t8twq/","content":"\ntitle: Anacondadate: 2023-06-30 16:56:57tags: Anacondacategories: Tools安装\n下载安装文件\n\n# anacondawget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2022.05-Linux-x86_64.sh# minicondawget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh\n\n\n执行下载命令\n\nbash Anaconda3-2022.05-Linux-x86_64.sh\n\n\n安装过程中除了安装位置要修改为&#x2F;usr&#x2F;local&#x2F;anaconda3(默认安装在root下，但是这样普通用户将无法使用anaconda，所以要修改安装位置)之外，其他的都是yes\n配置安装环境\n\nvim /etc/profileexport ANACONDA_PATH=/usr/local/anaconda3export PATH=$PATH:$ANACONDA_PATH/binsource /etc/profile\n\n\n查看是否安装成功\n\nconda -V\n\n\n配置下载镜像文件\n\n先执行以下命令，在/home/admin目录下生成.bashrc文件conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n\n\n编辑镜像文件\n\nchannels:  - defaultsdefault_channels:  - http://mirrors.aliyun.com/anaconda/pkgs/main  - http://mirrors.aliyun.com/anaconda/pkgs/r  - http://mirrors.aliyun.com/anaconda/pkgs/msys2custom_channels:  conda-forge: http://mirrors.aliyun.com/anaconda/cloud  msys2: http://mirrors.aliyun.com/anaconda/cloud  bioconda: http://mirrors.aliyun.com/anaconda/cloud  menpo: http://mirrors.aliyun.com/anaconda/cloud  pytorch: http://mirrors.aliyun.com/anaconda/cloud  simpleitk: http://mirrors.aliyun.com/anaconda/cloudshow_channel_urls: truessl_verify: false\n\n\n清理缓存\n\nconda clean -i\n\n\n更新软件\n\nconda update condaconda update anaconda\n\n创建、激活、退出环境# 创建虚拟环境conda create -n env_name（环境名称） python=3.7(对应的python版本号）# 激活虚拟环境conda activate env_name（环境名称）# 退出虚拟环境deactivate env_name（环境名称）# 删除虚拟环境conda remove -n env_name(环境名称) --all\n\n查看已创建的虚拟环境conda env list  或 conda info -e  或  conda info --env\n\n修改某个虚拟环境的名字\nanaconda中没有重命名的命令，使用克隆删除的方法\n\n# 进入旧环境conda activate old_name# 克隆旧环境conda create -n new_name --clone old_name # 退出旧环境conda deactivate# 删除旧环境conda remove -n old_name --all\n\n查看conda的信息conda info\n\n查看当前python版本python -V\n\nconda的环境管理conda info -e  　　　　　　　　　　　　查看当前已安装的环境conda create -n py27 python=2.7  　添加2.7版本的Python环境activate py27  　　　　　　　　　　切换到Python2.7环境conda deactivate  　　　　　　　　　　　 返回默认的Python环境conda remove -n py27 --all   　　　　 删除已安装的Python环境\n\nanaconda的包管理，类似Python的pipconda list　　　　　　　　　　　　　　查看当前环境下已安装的包conda list -n py27　　　　　　　　　 查看指定环境的已安装的包conda search selenium　　　　　　　 查找package信息conda install -n py27 selenium  指定环境安装package，不加-n则安装在当前活跃环境conda update -n py27 selenium   指定环境更新package，不加-n则更新在当前活跃环境conda remove -n py27 selenium   删除package，不加-n则删除在当前活跃环境conda clean --all               清理（应该是pkgs文件下的）安装包缓存\n\n\nconda将conda、python等都视为package，因此可以使用conda管理conda和python的版本\n\nconda update conda  　 更新condaconda update anaconda  更新anacondaconda update python   更新python，假设当前环境是3.6，则更新3.6.x系列版本\n\n安装包conda install package_name 比较安全也可以像python中使用的  pip  package_name\n\nconda clean的使用# 删除从不使用的包conda clean --packages# 删除tar包conda clean --tarballs# 删除索引缓存、锁定文件、未使用过的包和tar包conda clean -a\n\n安装指定版本的包# 若环境中有其他版本的，先卸载conda uninstall h5py   （以h5py为例）conda install h5py==2.10.0   再安装指定版本的# 直接安装指定版本的conda install h5py==2.10.0\n\n修改conda的环境文件位置\nhttps://blog.csdn.net/weixin_39574140/article/details/110606076\n\n# 查看存储位置conda info\n\n\n\n修改&#x2F;userdata&#x2F;archiconda3&#x2F;下面的.condarc文件,在.condarc文件后面添加两行代码。\n\nenvs_dirs:  - /userdata/peter/envs\n\n修改前内容\nchannels:  - https://conda.anaconda.org/c4aarch64  - https://conda.anaconda.org/conda-forge\n\n修改后内容\nchannels:  - https://conda.anaconda.org/c4aarch64  - https://conda.anaconda.org/conda-forgeenvs_dirs:    - /userdata/peter/envs\n\n\n表示以后创建的虚拟环境默认就存在&#x2F;userdata&#x2F;peter&#x2F;envs目录下面。不要忘了&#x2F;userdata&#x2F;peter&#x2F;envs前面的小的短横线 -\n\n","categories":["开发辅助"],"tags":["Anaconda"]},{"title":"FTP学习笔记","url":"/cmchtge9m004bnegbc4u635yz/","content":"\n安装 vsftpd首先，安装 vsftpd（非常安全的 FTP 守护进程）：\n\nsudo apt updatesudo apt install vsftpd\n\n\n配置 vsftpd\n\nsudo nano /etc/vsftpd.conf# 确保以下选项被取消注释（去掉#号）：listen=YESlisten_ipv6=NOanonymous_enable=NOlocal_enable=YESwrite_enable=YESchroot_local_user=YES# 为了解决中文乱码，添加或修改以下行：utf8_filesystem=YESuse_localtime=YESallow_writeable_chroot=YES\n\n\n设置用户和目录权限创建一个 FTP 用户并设置密码：\n\nsudo adduser ftpusersudo chown ftpuser:ftpuser /home/ftpuser\n\n\n重启 vsftpd 服务修改配置后，需要重启 vsftpd 服务：\n\nsudo systemctl restart vsftpd\n\n\n解决中文乱码问题在客户端上，如果仍然遇到中文文件名乱码的问题，可以在 FTP 客户端（如 FileZilla）中设置编码为 UTF-8。\n允许防火墙通过 FTP如果你的服务器上启用了防火墙，请确保 FTP 端口（通常是 21）被允许通过：\n\nsudo ufw allow 21/tcpsudo ufw allow 30000:31000/tcp  # 如果使用被动模式\n\n\n创建一个子目录\n\nsudo mkdir /home/ftpuser/ftpsudo chown root:root /home/ftpusersudo chmod 755 /home/ftpusersudo chown ftpuser:ftpuser /home/ftpuser/ftp\n\n8.更新 vsftpd 配置\n# 如果你在 /etc/vsftpd.conf 中没有设置 user_sub_token，可以添加以下行以便在 chroot 中使用：user_sub_token=$USER\n\n\n重新启动 vsftpd配置完成后，重新启动 vsftpd 服务：\n\nsudo systemctl restart vsftpd\n\n\n测试 FTP 连接再次尝试使用 FTP 客户端连接到服务器，并验证能否上传文件。在子目录中上传中文文件，确保它们的名称能正确显示。\n\n","categories":["开发辅助"],"tags":["FTP"]},{"title":"CodeServer","url":"/cmchtge9o004enegbbecf6x18/","content":"官方code-serverdocker run -d \\ --restart=always \\ --name codercom-code-server \\ -p 18870:8080 \\ -e PASSWORD=code-server \\ -e SUDO_PASSWORD=root \\ --restart=always \\ -v /data/docker/codercom-code-server:/home/code/code-server \\ codercom/code-server:latest\n\n第三方 vscode-serverdocker run -d \\ --privileged \\ --restart=always \\ --name vscode-server \\ -p 18778:8000 \\ -e PASSWORD=code-server \\ -e SUDO_PASSWORD=root \\ -e VSCODE_KEYRING_PASS=&quot;vscode&quot; \\ -e VSCODE_SERVE_MODE=serve-local \\ -v /data/docker/vscode-server:/root/code/vscode-server \\ ahmadnassri/vscode-server:latest\n\n第三方 linuxserver\nhttps://hub.docker.com/r/linuxserver/code-server\n\ndocker pull linuxserver/code-serverdocker run -d \\  --name=code-server \\  -e PUID=1000 \\  -e PGID=1000 \\  -e TZ=Etc/UTC \\  -e PASSWORD=password `#optional` \\  -e HASHED_PASSWORD= `#optional` \\  -e SUDO_PASSWORD=password `#optional` \\  -e SUDO_PASSWORD_HASH= `#optional` \\  -e PROXY_DOMAIN=code-server.my.domain `#optional` \\  -e DEFAULT_WORKSPACE=/config/workspace `#optional` \\  -p 8443:8443 \\  -v /path/to/appdata/config:/config \\  --restart unless-stopped \\  lscr.io/linuxserver/code-server:latestdocker run -d \\  --privileged \\  --name=code-server \\  -e PUID=1000 \\  -e PGID=1000 \\  -e TZ=Etc/UTC \\  -e PASSWORD=code-server \\  -e SUDO_PASSWORD=code-server \\  -e DEFAULT_WORKSPACE=/config/workspace \\  -p 8443:8443 \\  -v /data/docker/linuxserver/config:/config \\  --restart unless-stopped \\  lscr.io/linuxserver/code-server:latest\n\n配置\nhttps://code.visualstudio.com/docs/cpp/config-linux\n\n修改登录密码\nhttps://blog.csdn.net/jmsLU/article/details/122488839\n\n第一登录code-server编辑器时，需要输入密码，但是这个密码需要去配置文件中查看，配置文件地址如下：/root/.config/code-server/config.yaml当然，我们也可以直接修改config.yaml配置文件：修改密码# 首先需要进入code-server容器内部 $ docker container exec -it code-server /bin/bash  # 打开配置文件 $ vim /root/.config/code-server/config.yaml  # 修改密码 password 字段的值 # password 123456  设置密码为123456  # 如果 auth 字段 设置为 none  则没有密码 # auth none # 退出容器 $ exit注意： 修改完配置文件之后，需要重启docker容器重启docker\n\n官方镜像apt换源切换为rootsudo su1. 编辑源文件cp /etc/apt/sources.list /etc/apt/sources.list.baknano /etc/apt/sources.list2. 将以下内容替换原有内容deb http://mirrors.163.com/debian/ bullseye main contrib non-freedeb http://mirrors.163.com/debian-security/ bullseye-security main contrib non-free3. 保存退出ctrl+oenterctrl+x4. 更新apt-get update;apt-get upgradeapt update;apt upgrade -y;apt dist-upgrade -y\n\n必要插件安装vscode 初始化配置gcc -vsudo apt-get updatesudo apt-get install -y build-essential gdb iputils-ping net-tools\n\ngccroot@6ec9ac246424:/home/coder# apt install -y build-essentialroot@6ec9ac246424:/home/coder# gcc --versiongcc (Debian 10.2.1-6) 10.2.1 20210110Copyright (C) 2020 Free Software Foundation, Inc.This is free software; see the source for copying conditions.  There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.root@6ec9ac246424:/home/coder#\n\nPython\nhttps://blog.csdn.net/bz0446/article/details/105500585\n\n#检测可更新sudo apt update#用于添加ppa源的小工具，ubuntu server默认没装。sudo apt install -y software-properties-common#有确认提示按回车继续sudo add-apt-repository ppa:deadsnakes/ppa#搜索是否有需要的版本sudo apt search python3.9#安装sudo apt install -y python3.9python3 -V#来查看python路径$ whereis python #移除已有软连接$ rm -rf /usr/bin/python # 增加新的软连接$ ln -s /usr/bin/pip3 /usr/bin/pip$ ln -s /usr/bin/python3 /usr/bin/python\n\npipsudo apt install curl# 下载最新的官方 pipcurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py# 安装 pippython3 get-pip.py\n\n更改pip源\n创建pip.conf配置文件\n在用户根目录(，而非系统根目录 &#x2F; )下添加配置&#x2F;.pip&#x2F;pip.conf目录添加可信源，如果目录文件不存在，可直接创建。\n\nmkdir ~/.pip   #创建文件夹cd ~/.pip        #进入目录vim pip.conf        #编辑配置文件\n\n\n替换阿里镜像源(或其他镜像源)\n\n[global]trusted-host = mirrors.aliyun.comindex-url = https://mirrors.aliyun.com/pypi/simple[install]trusted-host=mirrors.aliyun.com\n\nnanoapt-get install nano -y\n\n代码提示C&#x2F;C++\nhttps://blog.csdn.net/houxian1103/article/details/122165460\n\n扩展安装\nhttps://marketplace.visualstudio.com/vscode\n\nVsCode新建自定义输入代码模板\n文件 -&gt; 首选项 -&gt; 配置用户代码片段-&gt; 全局&#x2F;C\n自定义输入\n\n&#123;\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and \t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\t// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the \t// same ids are connected.\t// Example:\t// &quot;Print to console&quot;: &#123;\t// \t&quot;prefix&quot;: &quot;log&quot;,\t// \t&quot;body&quot;: [\t// \t\t&quot;console.log(&#x27;$1&#x27;);&quot;,\t// \t\t&quot;$2&quot;\t// \t],\t// \t&quot;description&quot;: &quot;Log output to console&quot;\t// &#125;\t&quot;cmain&quot;: &#123;\t\t&quot;prefix&quot;: &quot;cmain&quot;,\t\t&quot;body&quot;: [\t\t\t&quot;/**\\n * $1\\n */\\n&quot;,\t\t\t&quot;#include &lt;stdio.h&gt;\\n#include &lt;string.h&gt;\\n\\n$2\\n&quot;,\t\t\t&quot;int main()&quot;,\t\t\t&quot;&#123;\\n\\t$0&quot;,\t\t\t&quot;\\treturn 0;&quot;,\t\t\t&quot;&#125;&quot;\t\t],\t\t&quot;description&quot;: &quot;c stand main output&quot;\t&#125;,\t&quot;pf&quot;: &#123;\t\t&quot;prefix&quot;: &quot;pf&quot;,\t\t&quot;body&quot;: [\t\t\t&quot;printf(\\&quot;$1\\\\n\\&quot;);\\n$0&quot;\t\t],\t\t&quot;description&quot;: &quot;print with \\\\n&quot;\t&#125;,\t&quot;prf&quot;: &#123;\t\t&quot;prefix&quot;: &quot;prf&quot;,\t\t&quot;body&quot;: [\t\t\t&quot;printf(\\&quot;$1 %$2\\\\n\\&quot;, $3);\\n$0&quot;\t\t],\t\t&quot;description&quot;: &quot;print with %d \\n&quot;\t&#125;,\t&quot;scf&quot;: &#123;\t\t&quot;prefix&quot;: &quot;scf&quot;,\t\t&quot;body&quot;: [\t\t\t&quot;scanf(\\&quot;%$1\\&quot;, &amp;$2);\\n$0&quot;\t\t],\t\t&quot;description&quot;: &quot;scanf with %d \\n&quot;\t&#125;&#125;\n\n参考链接\n安装步骤https://blog.csdn.net/never_late/article/details/126964024\n\n\napt换源https://blog.csdn.net/weixin_58191539/article/details/125298034\n\n\n教程https://www.cnblogs.com/anliven/p/13363811.html\n\n","categories":["云端IDE"],"tags":["CodeServer"]},{"title":"VSCode问题记录","url":"/cmchtge9p004gnegbdiyney9j/","content":"Vscode中Python代码引入其他模块下自定义包\n在 VS Code 中导入其他文件夹下的模块，需要使用 Python 的模块搜索路径，可以通过以下步骤实现：\n\n假设我们的项目结构如下：\nmy_project/├── main.py└── utils/    ├── __init__.py    └── my_module.py\n\n\n在自定义的文件夹中创建一个 init.py 文件，使该文件夹变成一个包。\n\n在需要导入模块的 Python 文件中，使用 sys.path.append() 方法将自定义文件夹所在的路径添加到模块搜索路径中。使用 import 语句导入自定义文件夹下的模块即可。\n例如，现在我们需要在 main.py 中导入 my_module.py\nmain.py\n\n\nimport syssys.path.append(&#x27;utils&#x27;)  # 将 utils 文件夹添加到模块搜索路径中import my_module  # 导入自定义模块\n\n\n如果导入其他项目文件夹中的模块，但是需要将其他项目文件夹所在的路径添加到 Python 的模块搜索路径中。\n\n假设我们有两个项目：project1 和 project2，它们的文件结构如下：\nproject1/├── main.py└── utils/    ├── __init__.py    └── my_module.pyproject2/├── main.py└── helpers/    ├── __init__.py    └── helper_module.py\n\n现在，我们需要在 project1&#x2F;main.py 中导入 project2&#x2F;helpers&#x2F;helper_module.py 中的模块，可以按照以下步骤操作：\n\n在 project1&#x2F;main.py 文件中添加以下代码，将 project2 文件夹所在的路径添加到 Python 的模块搜索路径中：\n\nimport syssys.path.append(&#x27;../project2&#x27;)  # 将 project2 文件夹添加到模块搜索路径中然后可以使用 import 语句导入 project2/helpers/helper_module.py 中的模块了：from helpers.helper_module import some_function\n\n\n这样就可以在 project1&#x2F;main.py 中使用 some_function 函数了。\n\n需要注意的是，如果多个项目之间存在相互依赖的情况，最好使用包管理工具（如 pipenv 或者 poetry）来管理项目依赖，而不是手动添加模块搜索路径。\nVsCode引入全局自定义函数\n以自定义的Python logging为例，在 site-packages 创建一个名为 site-packages.pth 的文件。在 site-packages.pth 文件中，添加一行，指向您希望在模块搜索路径中添加的目录。例如，如果您的文件根目录是 &#x2F;root&#x2F;code&#x2F;vscode-server&#x2F;Personal\n\nPython logging 文件import sysimport loggingimport osfrom logging.handlers import RotatingFileHandlersys.path.append(&quot;./&quot;)# 绑定句柄到logger对象logger = logging.getLogger(__name__)# 获取当前工具文件所在的路径root_path = os.path.dirname(os.path.abspath(__file__))# 拼接当前要输出的日志的路径log_dir_path = os.sep.join([root_path, f&quot;/logs&quot;])if not os.path.isdir(log_dir_path):    os.mkdir(log_dir_path)# 创建日志记录器，指明日志保存路径，每个日志的大小，保存的上限file_log_handler = RotatingFileHandler(    os.sep.join([log_dir_path, &quot;log.log&quot;]),    maxBytes=1024 * 1024,    backupCount=10,    encoding=&quot;utf-8&quot;,)# 设置日志的格式data_string = &quot;%Y-%m-%d %H:%M:%S&quot;formatter = logging.Formatter(    &quot;[%(asctime)s] [%(levelname)s] [%(filename)s]-[Line: %(lineno)d]-[Func: %(funcName)s] [%(message)s]&quot;,    data_string,)# 日志输出到控制台的句柄stream_handler = logging.StreamHandler()# 将日志记录器指定日志的格式file_log_handler.setFormatter(formatter)stream_handler.setFormatter(formatter)# 为全局的日志工具对象添加日志记录器# 绑定句柄到logger对象logger.addHandler(stream_handler)logger.addHandler(file_log_handler)# 设置日志输出级别logger.setLevel(level=logging.INFO)\n\n目录结构./Personal/utils/|-- __init__.py|-- log_util.py\n\n加入系统变量查找site-packages\nimport siteprint(site.getsitepackages())# [&#x27;/usr/local/lib/python3.10/dist-packages&#x27;, &#x27;/usr/lib/python3/dist-packages&#x27;, &#x27;/usr/lib/python3.10/dist-packages&#x27;]\n\n重新启动 Python 解释器import osimport syspython_executable = sys.executableos.execl(python_executable, python_executable, *sys.argv)\n\n使用from utils.log_util import loggerlogger.info(&quot;!! This is an info message.testing&quot;)logger.error(&quot;@ This is an error message.&quot;)# [2023-08-20 22:05:16] [INFO] [test_log_util.py]-[Line: 20]-[Func: &lt;module&gt;] [!! This is an info message.testing]# [2023-08-20 22:05:16] [ERROR] [test_log_util.py]-[Line: 21]-[Func: &lt;module&gt;] [@ This is an error message.]\n\n如何禁止不必要的输出您可以按照以下步骤在 VSCode 中的设置中进行配置：\n\n打开 VSCode，点击左侧的菜单栏中的“文件(File)”菜单，选择“首选项(Preferences)”下的“设置(Settings)”选项。\n在搜索框中输入“code-runner”，找到“Code-runner: Run In Terminal”这一项，将其设置为“true”。（不勾选）\n在设置中搜索“Code-runner: Clear Previous Output”，表示运行代码前清空之前的输出。（勾选）\n保存设置后，再次使用 Code-runner 运行代码，就应该只保留正常输出了。\n\n如何引入自定义的头文件在c语言编译的时候加入 -I 头文件所在目录 即可，以下是code-runner的配置\n&#123;    &quot;liveServer.settings.donotShowInfoMsg&quot;: true,    &quot;editor.guides.bracketPairs&quot;: true,    &quot;settingsSync.ignoredSettings&quot;: [],    &quot;C_Cpp.autocompleteAddParentheses&quot;: true,    &quot;explorer.confirmDragAndDrop&quot;: false,    &quot;workbench.editorAssociations&quot;: &#123;        &quot;*.drawio&quot;: &quot;default&quot;    &#125;,    &quot;hediet.vscode-drawio.codeLinkActivated&quot;: true,    &quot;C_Cpp.files.exclude&quot;: &#123;        &quot;**/.vscode&quot;: true,        &quot;**/.vs&quot;: true    &#125;,    &quot;workbench.tree.indent&quot;: 16,    &quot;debug.onTaskErrors&quot;: &quot;showErrors&quot;,    &quot;code-runner.executorMap&quot;: &#123;        &quot;javascript&quot;: &quot;node&quot;,        &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;,        &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt.out -I /root/code/vscode-server/7714/SMY/include -I /root/code/vscode-server/posixtestsuite/include &amp;&amp; $dir$fileNameWithoutExt.out&quot;,        &quot;zig&quot;: &quot;zig run&quot;,        &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;objective-c&quot;: &quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;php&quot;: &quot;php&quot;,        &quot;python&quot;: &quot;set PYTHONIOENCODING=utf-8 &amp;&amp; set PYTHONPATH=. &amp;&amp; python -u&quot;,        &quot;perl&quot;: &quot;perl&quot;,        &quot;perl6&quot;: &quot;perl6&quot;,        &quot;ruby&quot;: &quot;ruby&quot;,        &quot;go&quot;: &quot;go run&quot;,        &quot;lua&quot;: &quot;lua&quot;,        &quot;groovy&quot;: &quot;groovy&quot;,        &quot;powershell&quot;: &quot;powershell -ExecutionPolicy ByPass -File&quot;,        &quot;bat&quot;: &quot;cmd /c&quot;,        &quot;shellscript&quot;: &quot;bash&quot;,        &quot;fsharp&quot;: &quot;fsi&quot;,        &quot;csharp&quot;: &quot;scriptcs&quot;,        &quot;vbscript&quot;: &quot;cscript //Nologo&quot;,        &quot;typescript&quot;: &quot;ts-node&quot;,        &quot;coffeescript&quot;: &quot;coffee&quot;,        &quot;scala&quot;: &quot;scala&quot;,        &quot;swift&quot;: &quot;swift&quot;,        &quot;julia&quot;: &quot;julia&quot;,        &quot;crystal&quot;: &quot;crystal&quot;,        &quot;ocaml&quot;: &quot;ocaml&quot;,        &quot;r&quot;: &quot;Rscript&quot;,        &quot;applescript&quot;: &quot;osascript&quot;,        &quot;clojure&quot;: &quot;lein exec&quot;,        &quot;haxe&quot;: &quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;,        &quot;rust&quot;: &quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;racket&quot;: &quot;racket&quot;,        &quot;scheme&quot;: &quot;csi -script&quot;,        &quot;ahk&quot;: &quot;autohotkey&quot;,        &quot;autoit&quot;: &quot;autoit3&quot;,        &quot;dart&quot;: &quot;dart&quot;,        &quot;pascal&quot;: &quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;d&quot;: &quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;haskell&quot;: &quot;runghc&quot;,        &quot;nim&quot;: &quot;nim compile --verbosity:0 --hints:off --run&quot;,        &quot;lisp&quot;: &quot;sbcl --script&quot;,        &quot;kit&quot;: &quot;kitc --run&quot;,        &quot;v&quot;: &quot;v run&quot;,        &quot;sass&quot;: &quot;sass --style expanded&quot;,        &quot;scss&quot;: &quot;scss --style expanded&quot;,        &quot;less&quot;: &quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;,        &quot;FortranFreeForm&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;fortran-modern&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;fortran_fixed-form&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;fortran&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,        &quot;sml&quot;: &quot;cd $dir &amp;&amp; sml $fileName&quot;,    &#125;,    &quot;[python]&quot;: &#123;        &quot;editor.formatOnType&quot;: true,        &quot;editor.defaultFormatter&quot;: &quot;ms-python.python&quot;    &#125;,    &quot;terminal.integrated.env.osx&quot;: &#123;        &quot;PYTHONPATH&quot;: &quot;$&#123;workspaceFolder&#125;/&quot;,    &#125;,    &quot;terminal.integrated.env.linux&quot;: &#123;        &quot;PYTHONPATH&quot;: &quot;$&#123;workspaceFolder&#125;/&quot;,    &#125;,    &quot;terminal.integrated.env.windows&quot;: &#123;        &quot;PYTHONPATH&quot;: &quot;$&#123;workspaceFolder&#125;/&quot;,    &#125;,    &quot;env&quot;: &#123;        &quot;PYTHONPATH&quot;: &quot;$&#123;workspaceRoot&#125;&quot;    &#125;,    &quot;code-runner.fileDirectoryAsCwd&quot;: true,    &quot;workbench.startupEditor&quot;: &quot;none&quot;,    &quot;window.menuBarVisibility&quot;: &quot;classic&quot;,    &quot;leetcode.outputFolder&quot;: &quot;$difficulty&quot;,    &quot;leetcode.filePath&quot;: &#123;        &quot;default&quot;: &#123;            &quot;folder&quot;: &quot;&quot;,            &quot;filename&quot;: &quot;$&#123;id&#125;.$&#123;kebab-case-name&#125;.$&#123;ext&#125;&quot;        &#125;    &#125;,    &quot;leetcode.endpoint&quot;: &quot;leetcode-cn&quot;,    &quot;markdown.preview.breaks&quot;: true,    &quot;leetcode.workspaceFolder&quot;: &quot;/root/.leetcode&quot;,    &quot;leetcode.showDescription&quot;: &quot;Both&quot;,    &quot;leetcode.hint.configWebviewMarkdown&quot;: false,    &quot;python.autoComplete.extraPaths&quot;: [],    &quot;python.analysis.extraPaths&quot;: [],    &quot;workbench.editor.enablePreview&quot;: false,    &quot;explorer.autoReveal&quot;: &quot;focusNoScroll&quot;,    &quot;workbench.colorTheme&quot;: &quot;Learn with Sumit Official Theme&quot;,    &quot;code-runner.saveAllFilesBeforeRun&quot;: true,    &quot;code-runner.showStopIconInEditorTitleMenu&quot;: false,    &quot;code-runner.saveFileBeforeRun&quot;: true,    &quot;code-runner.showExecutionMessage&quot;: false,    &quot;code-runner.clearPreviousOutput&quot;: true,&#125;\n","categories":["云端IDE"],"tags":["VSCode"]},{"title":"MySql","url":"/cmchtge9q004jnegbh1bydyiq/","content":"Centos8以 root 用户通过 CentOS 软件包管理器来安装sudo dnf install @mysql\n\n在键盘上敲一个：y启动 MySQLsudo systemctl start mysqld.service\n\n登入 MySQLmysql -u root -p\n\n设密码、授权、开启远程访问CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27;;GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;\n\n更改端口编辑 my.cnfsudo vim /etc/my.cnf\n\n增加配置[mysqld]port=6666\n\n重启 MySQLsudo systemctl restart mysqld.service\n\nCentos7\nhttps://www.jb51.net/article/251117.htm\n\n环境介绍 :\n\n服务器： 阿里云轻量应用服务器\n系统版本： CentOS 7.9\nMySQL版本： 8.0.23\n\n卸载MariaDB\n在CentOS中默认安装有MariaDB，是MySQL的一个分支，主要由开源社区维护。CentOS 7及以上版本已经不再使用MySQL数据库，而是使用MariaDB数据库。如果直接安装MySQL，会和MariaDB的文件冲突。因此，需要先卸载自带的MariaDB，再安装MySQL。\n\n查看版本：rpm -qa|grep mariadb\n\n卸载rpm -e --nodeps 文件名\n\n检查是否卸载干净：rpm -qa|grep mariadb\n\n安装MySQL下载资源包\n官网下载\n\nMySQL官网下载地址: https://dev.mysql.com/downloads/mysql/\n\nwget下载\n\nwget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\n\n解压.tar.gz后缀：tar -zxvf 文件名\n.tar.xz后缀：tar -Jxvf 文件名\ntar -Jxvf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\n\n重命名将解压后的文件夹重命名（或者为文件夹创建软链接）\n# 重命名mv 原文件夹名 mysql8# 软链接ln -s 文件夹名 mysql8\n\n添加PATH变量添加PATH变量后，可在全局使用MySQL。\n有两种添加方式：export命令临时生效、修改配置文件用久生效；\n# 临时环境变量，关闭shell后失效，通常用于测试环境vim /etc/profile追加下行内容到文件中export PATH=$PATH:/data/software/mysql8/binsource /etc/profile\n\n用户和用户组\n创建用户组和用户\n\n# 创建一个用户组：mysqlgroupadd mysql# 创建一个系统用户：mysql，指定用户组为mysqluseradd -r -g mysql mysql\n\n创建用户组：groupadd\n创建用户：useradd\n-r：创建系统用户-g：指定用户组\n数据目录\n创建目录\n\nmkdir -p /data/software/mysql8/datas\n\n\n赋予权限\n\n# 更改属主和数组chown -R mysql:mysql /data/software/mysql8/datas# 更改模式chmod -R 750 /data/software/mysql8/datas\n\n初始化MySQL配置参数在&#x2F;data&#x2F;software&#x2F;mysql8&#x2F;下，创建my.cnf配置文件，用于初始化MySQL数据库\n[mysql]# 默认字符集default-character-set=utf8mb4[client]port       = 3306socket     = /tmp/mysql.sock[mysqld]port       = 3306server-id  = 3306user       = mysqlsocket     = /tmp/mysql.sock# 安装目录basedir    = /data/software/mysql8# 数据存放目录datadir    = /data/software/mysql8/datas/mysqllog-bin    = /data/software/mysql8/datas/mysql/mysql-bininnodb_data_home_dir      =/data/software/mysql8/datas/mysqlinnodb_log_group_home_dir =/data/software/mysql8/datas/mysql#日志及进程数据的存放目录log-error =/data/software/mysql8/datas/mysql/mysql.logpid-file  =/data/software/mysql8/datas/mysql/mysql.pid# 服务端使用的字符集默认为8比特编码character-set-server=utf8mb4lower_case_table_names=1autocommit =1  ##################以上要修改的########################skip-external-lockingkey_buffer_size = 256Mmax_allowed_packet = 1Mtable_open_cache = 1024sort_buffer_size = 4Mnet_buffer_length = 8Kread_buffer_size = 4Mread_rnd_buffer_size = 512Kmyisam_sort_buffer_size = 64Mthread_cache_size = 128  #query_cache_size = 128Mtmp_table_size = 128Mexplicit_defaults_for_timestamp = truemax_connections = 500max_connect_errors = 100open_files_limit = 65535   binlog_format=mixed  binlog_expire_logs_seconds =864000  # 创建新表时将使用的默认存储引擎default_storage_engine = InnoDBinnodb_data_file_path = ibdata1:10M:autoextendinnodb_buffer_pool_size = 1024Minnodb_log_file_size = 256Minnodb_log_buffer_size = 8Minnodb_flush_log_at_trx_commit = 1innodb_lock_wait_timeout = 50transaction-isolation=READ-COMMITTED  [mysqldump]quickmax_allowed_packet = 16M   [myisamchk]key_buffer_size = 256Msort_buffer_size = 4Mread_buffer = 2Mwrite_buffer = 2M    [mysqlhotcopy]interactive-timeout\n\n初始化mysqld --defaults-file=/data/software/mysql8/my.cnf --basedir=/data/software/mysql8/ --datadir=/data/software/mysql8/datas/mysql --user=mysql --initialize-insecure\n\ndefaults-file：指定配置文件（要放在–initialize 前面）\nuser： 指定用户\nbasedir：指定安装目录\ndatadir：指定初始化数据目录\nintialize-insecure：初始化无密码\n启动MySQL查看 MySQL的 bin路径下，是否包含mysqld_safe，用于后台安全启动MySQL。\n启动服务# 完整命令/data/software/mysql8/bin/mysqld_safe --defaults-file=/data/software/mysql8/my.cnf &amp;# 添加PATH变量后的命令（省略bin目录的路径）mysqld_safe --defaults-file=/data/software/mysql/my.cnf &amp;# 查看是否启动ps -ef|grep mysql\n\n\n登录# 无密码登录方式/data/software/mysql8/bin/mysql -u root --skip-password# 有密码登录方式（初始的随机密码在/data/mysql8_data/mysql/mysql.log下）mysql -u root -ppassword:随机密码\n\n\n修改密码# 修改密码ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;# 刷新权限FLUSH PRIVILEGES;\n\n\n设置允许远程登录登录到mysql里执行\nmysql&gt; use mysqlmysql&gt; update user set user.Host=&#x27;%&#x27;where user.User=&#x27;root&#x27;;mysql&gt; flush privileges;mysql&gt; quit\n\n在Navicat上测试连接连接成功\nCentos7使用yum安装MySQL8\nhttps://blog.csdn.net/redrose2100/article/details/117938139\n\n下载[root@SqaServer Sysbench]# wget https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm--2022-11-06 13:17:56--  https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm正在解析主机 dev.mysql.com (dev.mysql.com)... 223.119.203.77, 2600:1417:e800:18a::2e31, 2600:1417:e800:189::2e31正在连接 dev.mysql.com (dev.mysql.com)|223.119.203.77|:443... 已连接。已发出 HTTP 请求，正在等待回应... 302 Moved Temporarily位置：https://repo.mysql.com//mysql80-community-release-el7-7.noarch.rpm [跟随至新的 URL]--2022-11-06 13:17:57--  https://repo.mysql.com//mysql80-community-release-el7-7.noarch.rpm正在解析主机 repo.mysql.com (repo.mysql.com)... 23.36.48.238正在连接 repo.mysql.com (repo.mysql.com)|23.36.48.238|:443... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：11196 (11K) [application/x-redhat-package-manager]正在保存至: “mysql80-community-release-el7-7.noarch.rpm”100%[====================================================================================&gt;] 11,196      --.-K/s 用时 0s2022-11-06 13:17:57 (106 MB/s) - 已保存 “mysql80-community-release-el7-7.noarch.rpm” [11196/11196])[root@SqaServer Sysbench]# ll总用量 592172-rwxrwxrwx  1 root root 604856088 11月  5 10:27 mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz-rw-r--r--  1 root root     11196 8月  27 02:56 mysql80-community-release-el7-7.noarch.rpmdrwxrwxr-x 13 root root      4096 11月  5 17:33 sysbench-1.0.20-rwxrwxrwx  1 root root   1509630 11月  5 10:27 sysbench-1.0.20.tar.gz[root@SqaServer Sysbench]# mv mysql80-community-release-el7-7.noarch.rpm /opt/[root@SqaServer Sysbench]# cd /opt/[root@SqaServer opt]# ll总用量 12drwxr-xr-x  3 root root    17 11月  1 15:53 cnidrwx--x--x  4 root root    28 11月  1 15:46 containerd-rw-r--r--  1 root root 11196 8月  27 02:56 mysql80-community-release-el7-7.noarch.rpmdrwxr-xr-x. 2 root root     6 10月 31 2018 rh[root@SqaServer opt]# yum localinstall mysql80-community-release-el7-7.noarch.rpm已加载插件：fastestmirror, langpacks正在检查 mysql80-community-release-el7-7.noarch.rpm: mysql80-community-release-el7-7.noarchmysql80-community-release-el7-7.noarch.rpm 将被安装正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 mysql80-community-release.noarch.0.el7-7 将被 安装--&gt; 解决依赖关系完成base/7/x86_64                                                                                          | 3.6 kB  00:00:00docker-ce-stable/7/x86_64                                                                              | 3.5 kB  00:00:00extras/7/x86_64                                                                                        | 2.9 kB  00:00:00kubernetes                                                                                             | 1.4 kB  00:00:00updates/7/x86_64                                                                                       | 2.9 kB  00:00:00依赖关系解决============================================================================================================================== Package                             架构             版本            源                                                 大小==============================================================================================================================正在安装: mysql80-community-release           noarch           el7-7           /mysql80-community-release-el7-7.noarch            10 k事务概要==============================================================================================================================安装  1 软件包总计：10 k安装大小：10 kIs this ok [y/d/N]: yDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction  正在安装    : mysql80-community-release-el7-7.noarch                                                                    1/1  验证中      : mysql80-community-release-el7-7.noarch                                                                    1/1已安装:  mysql80-community-release.noarch 0:el7-7完毕！[root@SqaServer opt]# yum -y install mysql-community-server已加载插件：fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: mirrors.bupt.edu.cn * extras: mirrors.bupt.edu.cn * updates: mirrors.bupt.edu.cnmysql-connectors-community                                                                             | 2.6 kB  00:00:00mysql-tools-community                                                                                  | 2.6 kB  00:00:00mysql80-community                                                                                      | 2.6 kB  00:00:00(1/3): mysql80-community/x86_64/primary_db                                                             | 222 kB  00:00:00(2/3): mysql-connectors-community/x86_64/primary_db                                                    |  93 kB  00:00:00(3/3): mysql-tools-community/x86_64/primary_db                                                         |  89 kB  00:00:00正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 mysql-community-server.x86_64.0.8.0.31-1.el7 将被 安装--&gt; 正在处理依赖关系 mysql-community-common(x86-64) = 8.0.31-1.el7，它被软件包 mysql-community-server-8.0.31-1.el7.x86_64 需要--&gt; 正在处理依赖关系 mysql-community-icu-data-files = 8.0.31-1.el7，它被软件包 mysql-community-server-8.0.31-1.el7.x86_64 需要--&gt; 正在处理依赖关系 mysql-community-client(x86-64) &gt;= 8.0.11，它被软件包 mysql-community-server-8.0.31-1.el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 mysql-community-client.x86_64.0.8.0.31-1.el7 将被 安装--&gt; 正在处理依赖关系 mysql-community-client-plugins = 8.0.31-1.el7，它被软件包 mysql-community-client-8.0.31-1.el7.x86_64 需要--&gt; 正在处理依赖关系 mysql-community-libs(x86-64) &gt;= 8.0.11，它被软件包 mysql-community-client-8.0.31-1.el7.x86_64 需要---&gt; 软件包 mysql-community-common.x86_64.0.8.0.31-1.el7 将被 安装---&gt; 软件包 mysql-community-icu-data-files.x86_64.0.8.0.31-1.el7 将被 安装--&gt; 正在检查事务---&gt; 软件包 mariadb-libs.x86_64.1.5.5.68-1.el7 将被 取代--&gt; 正在处理依赖关系 libmysqlclient.so.18()(64bit)，它被软件包 1:mariadb-devel-5.5.68-1.el7.x86_64 需要--&gt; 正在处理依赖关系 libmysqlclient.so.18()(64bit)，它被软件包 2:postfix-2.10.1-9.el7.x86_64 需要--&gt; 正在处理依赖关系 libmysqlclient.so.18(libmysqlclient_18)(64bit)，它被软件包 2:postfix-2.10.1-9.el7.x86_64 需要--&gt; 正在处理依赖关系 mariadb-libs(x86-64) = 1:5.5.68-1.el7，它被软件包 1:mariadb-devel-5.5.68-1.el7.x86_64 需要---&gt; 软件包 mysql-community-client-plugins.x86_64.0.8.0.31-1.el7 将被 安装---&gt; 软件包 mysql-community-libs.x86_64.0.8.0.31-1.el7 将被 舍弃--&gt; 正在检查事务---&gt; 软件包 mariadb-devel.x86_64.1.5.5.68-1.el7 将被 取代---&gt; 软件包 mysql-community-devel.x86_64.0.8.0.31-1.el7 将被 舍弃---&gt; 软件包 mysql-community-libs-compat.x86_64.0.8.0.31-1.el7 将被 舍弃--&gt; 解决依赖关系完成依赖关系解决============================================================================================================================== Package                                    架构               版本                       源                             大小==============================================================================================================================正在安装: mysql-community-devel                      x86_64             8.0.31-1.el7               mysql80-community             1.9 M      替换  mariadb-devel.x86_64 1:5.5.68-1.el7 mysql-community-libs                       x86_64             8.0.31-1.el7               mysql80-community             1.5 M      替换  mariadb-libs.x86_64 1:5.5.68-1.el7 mysql-community-libs-compat                x86_64             8.0.31-1.el7               mysql80-community             670 k      替换  mariadb-libs.x86_64 1:5.5.68-1.el7 mysql-community-server                     x86_64             8.0.31-1.el7               mysql80-community              64 M为依赖而安装: mysql-community-client                     x86_64             8.0.31-1.el7               mysql80-community              16 M mysql-community-client-plugins             x86_64             8.0.31-1.el7               mysql80-community             2.5 M mysql-community-common                     x86_64             8.0.31-1.el7               mysql80-community             647 k mysql-community-icu-data-files             x86_64             8.0.31-1.el7               mysql80-community             2.1 M事务概要==============================================================================================================================安装  4 软件包 (+4 依赖软件包)总下载量：89 MDownloading packages:警告：/var/cache/yum/x86_64/7/mysql80-community/packages/mysql-community-client-plugins-8.0.31-1.el7.x86_64.rpm: 头V4 RSA/SHA256 Signature, 密钥 ID 3a79bd29: NOKEYmysql-community-client-plugins-8.0.31-1.el7.x86_64.rpm 的公钥尚未安装(1/8): mysql-community-client-plugins-8.0.31-1.el7.x86_64.rpm                                          | 2.5 MB  00:00:01(2/8): mysql-community-common-8.0.31-1.el7.x86_64.rpm                                                  | 647 kB  00:00:00(3/8): mysql-community-devel-8.0.31-1.el7.x86_64.rpm                                                   | 1.9 MB  00:00:00(4/8): mysql-community-icu-data-files-8.0.31-1.el7.x86_64.rpm                                          | 2.1 MB  00:00:01(5/8): mysql-community-libs-8.0.31-1.el7.x86_64.rpm                                                    | 1.5 MB  00:00:00(6/8): mysql-community-libs-compat-8.0.31-1.el7.x86_64.rpm                                             | 670 kB  00:00:00(7/8): mysql-community-client-8.0.31-1.el7.x86_64.rpm                                                  |  16 MB  00:00:05(8/8): mysql-community-server-8.0.31-1.el7.x86_64.rpm                                                  |  64 MB  00:00:12------------------------------------------------------------------------------------------------------------------------------总计                                                                                          4.9 MB/s |  89 MB  00:00:18从 file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql-2022 检索密钥导入 GPG key 0x3A79BD29: 用户ID     : &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; 指纹       : 859b e8d7 c586 f538 430b 19c2 467b 942d 3a79 bd29 软件包     : mysql80-community-release-el7-7.noarch (@/mysql80-community-release-el7-7.noarch) 来自       : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql-2022从 file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql 检索密钥导入 GPG key 0x5072E1F5: 用户ID     : &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; 指纹       : a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5 软件包     : mysql80-community-release-el7-7.noarch (@/mysql80-community-release-el7-7.noarch) 来自       : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysqlRunning transaction checkRunning transaction testTransaction test succeededRunning transaction  正在安装    : mysql-community-client-plugins-8.0.31-1.el7.x86_64                                                       1/10  正在安装    : mysql-community-common-8.0.31-1.el7.x86_64                                                               2/10  正在安装    : mysql-community-libs-8.0.31-1.el7.x86_64                                                                 3/10  正在安装    : mysql-community-client-8.0.31-1.el7.x86_64                                                               4/10  正在安装    : mysql-community-icu-data-files-8.0.31-1.el7.x86_64                                                       5/10  正在安装    : mysql-community-server-8.0.31-1.el7.x86_64                                                               6/10  正在安装    : mysql-community-libs-compat-8.0.31-1.el7.x86_64                                                          7/10  正在安装    : mysql-community-devel-8.0.31-1.el7.x86_64                                                                8/10  正在删除    : 1:mariadb-devel-5.5.68-1.el7.x86_64                                                                      9/10  正在删除    : 1:mariadb-libs-5.5.68-1.el7.x86_64                                                                      10/10  验证中      : mysql-community-server-8.0.31-1.el7.x86_64                                                               1/10  验证中      : mysql-community-common-8.0.31-1.el7.x86_64                                                               2/10  验证中      : mysql-community-libs-compat-8.0.31-1.el7.x86_64                                                          3/10  验证中      : mysql-community-client-plugins-8.0.31-1.el7.x86_64                                                       4/10  验证中      : mysql-community-icu-data-files-8.0.31-1.el7.x86_64                                                       5/10  验证中      : mysql-community-client-8.0.31-1.el7.x86_64                                                               6/10  验证中      : mysql-community-libs-8.0.31-1.el7.x86_64                                                                 7/10  验证中      : mysql-community-devel-8.0.31-1.el7.x86_64                                                                8/10  验证中      : 1:mariadb-devel-5.5.68-1.el7.x86_64                                                                      9/10  验证中      : 1:mariadb-libs-5.5.68-1.el7.x86_64                                                                      10/10已安装:  mysql-community-devel.x86_64 0:8.0.31-1.el7                      mysql-community-libs.x86_64 0:8.0.31-1.el7  mysql-community-libs-compat.x86_64 0:8.0.31-1.el7                mysql-community-server.x86_64 0:8.0.31-1.el7作为依赖被安装:  mysql-community-client.x86_64 0:8.0.31-1.el7              mysql-community-client-plugins.x86_64 0:8.0.31-1.el7  mysql-community-common.x86_64 0:8.0.31-1.el7              mysql-community-icu-data-files.x86_64 0:8.0.31-1.el7替代:  mariadb-devel.x86_64 1:5.5.68-1.el7                            mariadb-libs.x86_64 1:5.5.68-1.el7完毕！[root@SqaServer opt]# systemctl start mysqld[root@SqaServer opt]# systemctl status  mysqld● mysqld.service - MySQL Server   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)   Active: active (running) since 日 2022-11-06 13:20:53 CST; 1s ago     Docs: man:mysqld(8)           http://dev.mysql.com/doc/refman/en/using-systemd.html  Process: 4104 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS) Main PID: 4189 (mysqld)   Status: &quot;Server is operational&quot;    Tasks: 39   CGroup: /system.slice/mysqld.service           └─4189 /usr/sbin/mysqld11月 06 13:20:48 SqaServer systemd[1]: Starting MySQL Server...11月 06 13:20:53 SqaServer systemd[1]: Started MySQL Server.[root@SqaServer opt]# systemctl enable mysqld[root@SqaServer opt]# grep &#x27;temporary password&#x27; /var/log/mysqld.log2022-11-06T05:20:50.998266Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: qr.:wRI#_7Nu[root@SqaServer opt]# mysql -uroot -pEnter password:ERROR 1045 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)[root@SqaServer opt]# mysql -uroot -pEnter password:Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 9Server version: 8.0.31Copyright (c) 2000, 2022, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;ERROR 1819 (HY000): Your password does not satisfy the current policy requirementsmysql&gt; exitBye[root@SqaServer opt]# mysql -uroot -pEnter password:Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 10Server version: 8.0.31Copyright (c) 2000, 2022, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123ABCdef*&#x27;;Query OK, 0 rows affected (0.01 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; use mysql;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; update user set user.Host=&#x27;%&#x27;where user.User=&#x27;root&#x27;;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                |+--------------------+4 rows in set (0.00 sec)mysql&gt;\n\ndocker compose部署mysql\n创建mysql文件夹，编写配置文件保存至mysql文件夹内\n\ndocker-compose.yml\nversion: &#x27;3&#x27;services:  db:    image: docker.1ms.run/mysql:latest    environment:      MYSQL_ROOT_PASSWORD: 123ABCdef*      MYSQL_DATABASE: test      MYSQL_USER: admin      MYSQL_PASSWORD: 123ABCdef*    ports:      - &quot;19994:3306&quot;      - &quot;19993:8080&quot;    volumes:      - ./mysql-data:/var/lib/mysql  phpmyadmin:    image: docker.1ms.run/phpmyadmin:latest    environment:      PMA_HOST: db      PMA_USER: root      PMA_PASSWORD: 123ABCdef*    ports:      - &quot;19992:80&quot;\n\n\n启动\n\nroot@VM-24-11-ubuntu:/data/docker/mysql# docker-compose up -dCreating network &quot;mysql_default&quot; with the default driverCreating mysql_phpmyadmin_1 ... doneCreating mysql_db_1         ... doneroot@VM-24-11-ubuntu:/data/docker/mysql# \n\n\n销毁\n\nroot@VM-24-11-ubuntu:/data/docker/mysql# docker-compose downStopping mysql_db_1         ... doneStopping mysql_phpmyadmin_1 ... doneRemoving mysql_db_1         ... doneRemoving mysql_phpmyadmin_1 ... doneRemoving network mysql_bridgeroot@VM-24-11-ubuntu:/data/docker/mysql# \n\ndocker cli 部署 mysql创建容器docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n\n常见问题处理\n修改密码\n\ndocker exec -it mysql /bin/bashalter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;new_password&#x27;;alter user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;new_password&#x27;;# 刷新权限flush privileges;\n\n\n忘记密码\n\ndocker exec -it mysql /bin/bashvim /etc/mysql/mysql.conf.d/mysqld.cnf需要加入“skip-grant-tables”  按i     cv加入&quot;skip-grant-tables&quot;     按esc   然后:wq!exitdocker restart mysql \n\n参考链接\nhttps://www.jb51.net/article/251117.htm\n\n\nhttp://www.manongjc.com/detail/51-xnvorytnwrkdfgd.html\n\n","categories":["数据库"],"tags":["MySql"]},{"title":"Gcc","url":"/cmchtge9q004mnegb69vx273l/","content":"yum 安装通过以下命令安装 gcc，该命令下安装的版本为 4.8.5，版本较低：\nyum -y install gcc gcc-c++ kernel-devel\n\n升级安装 centos-release-sclyum install -y centos-release-scl\n\n安装 devtoolset以下为 8 版本的安装，如果安装 7 版本将数字改为 7 即可：\nyum install -y devtoolset-8-gcc*\n\n激活 devtoolsetscl enable devtoolset-8 bash\n\n查看版本执行命令：\ngcc -v如果显示如下说明安装成功：gcc version 8.3.1 20190311 (Red Hat 8.3.1-3) (GCC)\n\n设置开机启动可以通过两种方式设置开机启动。\n配置自启动文件\n安装的 devtoolset 在 &#x2F;opt&#x2F;rh 目录下，编辑文件：\n\nvi /etc/profile.d/gcc.sh\n\n\n填写以下内容后保存：\n\nsource /opt/rh/devtoolset-8/enable\n\n\n执行命令：\n\nchmod +x /etc/profile.d/gcc.shsource /etc/profile.d/gcc.sh\n\n问题及解决方案[root@SqaServer fio-fio-3.32]# fio fio-test.ini &gt; fio-test.txtfio: engine libaio not loadablefio: failed to load engine# 安装依赖[root@SqaServer fio-fio-3.32]# yum install -y libaio-devel\n\n环境插件安装\nhttps://blog.csdn.net/m0_47696151/article/details/123519481\n\n","categories":["C生态"],"tags":["Gcc"]},{"title":"Gdb","url":"/cmchtge9r004qnegb8coo92na/","content":"GDB安装本节下载的 GDB 源码包为 gdb-9.2-tar.gz，接下来以 CentOS 系统为例（也同样适用于其它 Linux 发行版），给大家演示整个安装过程：\n\n找到 gdb-9.2-tar.gz 文件，笔者将下载好的 gdb-9.2-tat.gz 放置在 &#x2F;usr&#x2F;local&#x2F;src 目录下：\n\n[root@bogon ~]# cd /usr/local/src[root@bogon src]# lsgdb-9.2.tar.gz\n\n\n使用 tar 命令解压该文件，执行命令如下：\n\n[root@bogon ~]# tar -zxvf gdb-9.2.tar.gz--省略解压过程的输出结果[root@bogon src]# lsgdb-9.2  gdb-9.2.tar.gz\n\n此步骤会得到 gdb-9.2.tar.gz 相应的解压文件 gdb-9.2 。\n\n进入 gdb-9.2 目录文件，创建一个 gdb_build_9.2 目录并进入，为后续下载并放置安装 GDB 所需的依赖项做准备：\n\n[root@bogon src]# cd gdb-9.2[root@bogon gdb-9.2]# mkdir gdb-build-9.2[root@bogon src]# cd gdb-build-9.2\n\n\n在此基础上，继续执行如下指令：\n\n[root@bogon gdb-build-9.2]# ../configure......    &lt;--省略众多输出configure: creating ./config.statusconfig.status: creating Makefile\n\n\n执行 make 指令编译整个 GDB 源码文件，此过程可能会花费很长时间，读者耐心等待即可：\n\n[root@bogon gdb-build-9.2]# make...... &lt;-- 省略编译过程产生的输出结果# 注意，如果编译过程中出现错误，极有可能是所用的 GCC 编译器版本过低导致的，可尝试升级 GCC 版本后再重新执行 make 命令。# 或者出现错误后WARNING: `makeinfo&#x27; is missing on your system.  You should only need it if         you modified a `.texi&#x27; or `.texinfo&#x27; file, or any other file   # 尝试以下命令[root@bogon gdb-build-9.2]# yum install texinfo\n\n\n确定整个编译过程没有出错之后，执行sudo make install指令（其中使用 sudo 指令是为了避免操作权限不够而导致安装失败），正式开始安装 GDB 调试器：\n\n[root@bogon gdb-build-9.2]# sudo make install...... &lt;-- 省略输出结果以上过程全部成功执行，则表示 GDB 安装成功。通过再次执行 gdb -v 指令，可验证其是否被成功安装。[root@bogon gdb-build-9.2]# gdb -vGNU gdb (GDB) 9.2Copyright (C) 2020 Free Software Foundation, Inc.......  &lt;-- 省略部分输出\n\n测试用例[root@SqaServer gdb]# cat gdb-sample.c #include &lt;stdio.h&gt;int nGlobalVar = 0;int tempFunction(int a, int b)&#123;    printf(&quot;tempFunction is called, a = %d, b = %d \\n&quot;, a, b);    return (a + b);&#125;int main()&#123;    int n;        n = 1;        n++;        n--;        nGlobalVar += 100;        nGlobalVar -= 12;    printf(&quot;n = %d, nGlobalVar = %d \\n&quot;, n, nGlobalVar);        n = tempFunction(1, 2);    printf(&quot;n = %d&quot;, n);    return 0;&#125;[root@SqaServer gdb]# \n\ngdb测试#在下面的命令行中，使用 -o 参数指定了编译生成的可执行文件名为 gdb-sample，#使用参数 -g 表示将源代码信息编译到可执行文件中。如果不使用参数 -g，会给后面的GDB调试造成不便#当然，如果我们没有程序的源代码，自然也无从使用 -g 参数，调试/跟踪时也只能是汇编代码级别的调试/跟踪。[root@SqaServer gdb]# gcc gdb-sample.c -o gdb-sample -g[root@SqaServer gdb]# ll总用量 37716-rwxrwxrwx 1 root root 38604458 5月   2 2022 gdb-12.1.tar.gz-rwxr-xr-x 1 root root    11064 11月 17 10:42 gdb-sample-rwxrwxrwx 1 root root      435 11月 17 10:43 gdb-sample.c#下面“gdb”命令启动GDB，将首先显示GDB说明，：[root@SqaServer gdb]# gdbGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-120.el7Copyright (C) 2013 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;and &quot;show warranty&quot; for details.This GDB was configured as &quot;x86_64-redhat-linux-gnu&quot;.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.#下面使用“file”命令载入被调试程序 gdb-sample（这里的 gdb-sample 即前面 GCC 编译输出的可执行文件）：(gdb) file gdb-sampleReading symbols from /tmp/soft/gdb/gdb-sample...done.#上面最后一行提示已经加载成功。#下面使用“r”命令执行（Run）被调试文件，因为尚未设置任何断点，将直接执行到程序结束：(gdb) rStarting program: /tmp/soft/gdb/gdb-sample n = 1, nGlobalVar = 88 tempFunction is called, a = 1, b = 2 n = 3[Inferior 1 (process 11509) exited normally]Missing separate debuginfos, use: debuginfo-install glibc-2.17-326.el7_9.x86_64#下面使用“b”命令在 main 函数开头设置一个断点（Breakpoint）：(gdb) b mainBreakpoint 1 at 0x400549: file gdb-sample.c, line 13.#上面最后一行提示已经成功设置断点，并给出了该断点信息：在源文件 gdb-sample.c 第19行处设置断点#这是本程序的第一个断点（序号为1）；断点处的代码地址为 0x804835c（此值可能仅在本次调试过程中有效）。#回过头去看源代码，第13行中的代码为“n = 1”，恰好是 main 函数中的第一个可执行语句（前面的“int n;”为变量定义语句，并非可执行语句）。#再次使用“r”命令执行（Run）被调试程序：(gdb) rStarting program: /tmp/soft/gdb/gdb-sample Breakpoint 1, main () at gdb-sample.c:1313\t        n = 1;#程序中断在gdb-sample.c第13行处，即main函数是第一个可执行语句处。#上面最后一行信息为：下一条将要执行的源代码为“n = 1;”，它是源代码文件gdb-sample.c中的第19行。#下面使用“s”命令（Step）执行下一行代码（即第13行“n = 1;”）：(gdb) s14\t        n++;#上面的信息表示已经执行完“n = 1;”，并显示下一条要执行的代码为第14行的“n++;”。#既然已经执行了“n = 1;”，即给变量 n 赋值为 1，那我们用“p”命令（Print）看一下变量 n 的值是不是 1 ：(gdb) p n$1 = 1#果然是 1。（$1大致是表示这是第一次使用“p”命令——再次执行“p n”将显示“$2 = 1”——此信息应该没有什么用处。）#下面我们分别在第26行、tempFunction 函数开头各设置一个断点（分别使用命令“b 20”“b tempFunction”）：(gdb) b 20Breakpoint 2 at 0x400576: file gdb-sample.c, line 20.(gdb) b tempFunctionBreakpoint 3 at 0x400520: file gdb-sample.c, line 6.(gdb) Note: breakpoint 3 also set at pc 0x400520.Breakpoint 4 at 0x400520: file gdb-sample.c, line 6.#使用“c”命令继续（Continue）执行被调试程序，程序将中断在第二 个断点（20行），此时全局变量 nGlobalVar 的值应该是 88；#再一次执行“c”命令，程序将中断于第三个断点（6行，tempFunction 函数开头处），此时tempFunction 函数的两个参数 a、b 的值应分别是 1 和 2：(gdb) cContinuing.Breakpoint 2, main () at gdb-sample.c:2020\t    printf(&quot;n = %d, nGlobalVar = %d \\n&quot;, n, nGlobalVar);(gdb) cContinuing.n = 1, nGlobalVar = 88 Breakpoint 3, tempFunction (a=1, b=2) at gdb-sample.c:66\t    printf(&quot;tempFunction is called, a = %d, b = %d \\n&quot;, a, b);(gdb) p a$2 = 1(gdb) p b$3 = 2#上面反馈的信息一切都在我们预料之中~~#再一次执行“c”命令（Continue），因为后面再也没有其它断点，程序将一直执行到结束：(gdb) cContinuing.tempFunction is called, a = 1, b = 2 n = 3[Inferior 1 (process 12101) exited normally]#有时候需要看到编译器生成的汇编代码，以进行汇编级的调试或跟踪，又该如何操作呢？#这就要用到display命令“display /i $pc”了（此命令前面已有详细解释）：(gdb) display /i $pc#此后程序再中断时，就可以显示出汇编代码了：(gdb) rStarting program: /tmp/soft/gdb/gdb-sample Breakpoint 1, main () at gdb-sample.c:1313\t        n = 1;1: x/i $pc=&gt; 0x400549 &lt;main+8&gt;:\tmovl   $0x1,-0x4(%rbp)# 看到了汇编代码，“n = 1;”对应的汇编代码是“movl   $0x1,-0x4(%rbp)”。# 并且以后程序每次中断都将显示下一条汇编指定（“si”命令用于执行一条汇编代码——区别于“s”执行一行C代码）：(gdb) si14\t        n++;1: x/i $pc=&gt; 0x400550 &lt;main+15&gt;:\taddl   $0x1,-0x4(%rbp)(gdb) si15\t        n--;1: x/i $pc=&gt; 0x400554 &lt;main+19&gt;:\tsubl   $0x1,-0x4(%rbp)(gdb) si17\t        nGlobalVar += 100;1: x/i $pc=&gt; 0x400558 &lt;main+23&gt;:\tmov    0x200ada(%rip),%eax        # 0x601038 &lt;nGlobalVar&gt;# 接下来我们试一下命令“b *&lt;函数名称&gt;”。#为了更简明，有必要先删除目前所有断点（使用“d”命令——Delete breakpoint）：(gdb) dDelete all breakpoints? (y or n) y#当被询问是否删除所有断点时，输入“y”并按回车键即可。#下面使用命令“b *main”在 main 函数的 prolog 代码处设置断点（prolog、epilog，分别表示编译器在每个函数的开头和结尾自行插入的代码）：(gdb) b *mainBreakpoint 5 at 0x400541: file gdb-sample.c, line 11.(gdb) rThe program being debugged has been started already.Start it from the beginning? (y or n) yStarting program: /tmp/soft/gdb/gdb-sample Breakpoint 5, main () at gdb-sample.c:1111\t&#123;1: x/i $pc=&gt; 0x400541 &lt;main&gt;:\tpush   %rbp(gdb) si0x0000000000400542\t11\t&#123;1: x/i $pc=&gt; 0x400542 &lt;main+1&gt;:\tmov    %rsp,%rbp(gdb) si0x0000000000400545\t11\t&#123;1: x/i $pc=&gt; 0x400545 &lt;main+4&gt;:\tsub    $0x10,%rsp(gdb) si13\t        n = 1;1: x/i $pc=&gt; 0x400549 &lt;main+8&gt;:\tmovl   $0x1,-0x4(%rbp)(gdb) si14\t        n++;1: x/i $pc=&gt; 0x400550 &lt;main+15&gt;:\taddl   $0x1,-0x4(%rbp)(gdb) si15\t        n--;1: x/i $pc=&gt; 0x400554 &lt;main+19&gt;:\tsubl   $0x1,-0x4(%rbp)(gdb) si17\t        nGlobalVar += 100;1: x/i $pc=&gt; 0x400558 &lt;main+23&gt;:\tmov    0x200ada(%rip),%eax        # 0x601038 &lt;nGlobalVar&gt;#此时可以使用“i r”命令显示寄存器中的当前值———“i r”即“Infomation Register”：(gdb) i rrax            0x400541\t4195649rbx            0x0\t0rcx            0x4005c0\t4195776rdx            0x7fffffffe228\t140737488347688rsi            0x7fffffffe218\t140737488347672rdi            0x1\t1rbp            0x7fffffffe130\t0x7fffffffe130rsp            0x7fffffffe120\t0x7fffffffe120r8             0x7ffff7dd5e80\t140737351868032r9             0x0\t0r10            0x7fffffffdc60\t140737488346208r11            0x7ffff7a2f460\t140737348039776r12            0x400440\t4195392r13            0x7fffffffe210\t140737488347664r14            0x0\t0r15            0x0\t0rip            0x400558\t0x400558 &lt;main+23&gt;eflags         0x202\t[ IF ]cs             0x33\t51ss             0x2b\t43ds             0x0\t0es             0x0\t0fs             0x0\t0gs             0x0\t0(gdb) i r eaxeax            0x400541\t4195649(gdb) qA debugging session is active.\tInferior 1 [process 12970] will be killed.Quit anyway? (y or n) y[root@SqaServer gdb]# \n\n使用手册\nhttps://zhuanlan.zhihu.com/p/297925056http://c.biancheng.net/gdb/\n\n实战技巧\nhttps://wizardforcel.gitbooks.io/100-gdb-tips/content/set-var.html\n\nGDB调试代码\nhttps://www.jianshu.com/p/c9219fb0fd66\n\n","categories":["C生态"],"tags":["Gdb"]},{"title":"Python虚拟环境创建及使用","url":"/cmchtge9s004unegb2czr3plk/","content":"安装虚拟环境sunmy@LDSPDVS:~$ sudo apt updatesunmy@LDSPDVS:~$ sudo apt install python3.12-venv\n\n创建虚拟环境sunmy@LDSPDVS:~$ python3 -m venv VenvPython  # VenvPython 环境名称\n\n激活虚拟环境sunmy@LDSPDVS:~$ source ./VenvPython/bin/activate(VenvPython) sunmy@LDSPDVS:~$ \n\n安装依赖包(VenvPython) sunmy@LDSPDVS:~$ pip install pytestCollecting pytest  Downloading pytest-8.3.5-py3-none-any.whl.metadata (7.6 kB)Collecting iniconfig (from pytest)  Downloading iniconfig-2.1.0-py3-none-any.whl.metadata (2.7 kB)Collecting packaging (from pytest)  Downloading packaging-25.0-py3-none-any.whl.metadata (3.3 kB)Collecting pluggy&lt;2,&gt;=1.5 (from pytest)  Downloading pluggy-1.6.0-py3-none-any.whl.metadata (4.8 kB)Downloading pytest-8.3.5-py3-none-any.whl (343 kB)   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 343.6/343.6 kB 1.2 MB/s eta 0:00:00Downloading pluggy-1.6.0-py3-none-any.whl (20 kB)Downloading iniconfig-2.1.0-py3-none-any.whl (6.0 kB)Downloading packaging-25.0-py3-none-any.whl (66 kB)   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 66.5/66.5 kB 16.1 MB/s eta 0:00:00Installing collected packages: pluggy, packaging, iniconfig, pytestSuccessfully installed iniconfig-2.1.0 packaging-25.0 pluggy-1.6.0 pytest-8.3.5(VenvPython) sunmy@LDSPDVS:~$(VenvPython) sunmy@LDSPDVS:~$ pip listPackage   Version--------- -------iniconfig 2.1.0packaging 25.0pip       24.0pluggy    1.6.0pytest    8.3.5(VenvPython) sunmy@LDSPDVS:~$\n\n退出虚拟环境VenvPython) sunmy@LDSPDVS:~$ deactivatesunmy@LDSPDVS:~$ \n","categories":["Python生态"],"tags":["Venv"]},{"title":"PyTestAllure","url":"/cmchtge9s004xnegberqjao33/","content":"Pytest_L1Pytest 安装pip install pytest\n\nPytest 命名规则\n\n\n类型\n规则\n\n\n\n文件\ntest_开头或者_test结尾\n\n\n类\nTest开头\n\n\n方法&#x2F;函数\ntest_开头\n\n\n\n注意：测试类中不可以添加 init 构造函数，添加之后，无法识别相关测试用例\n\nPyTest 测试用例结构\n用例名称\n用力步骤\n用例断言\n\n\n测试用例示例\n\ndef test_XXX(self):    # 测试步骤1    # 测试步骤2    # 断言 实际结果 对比 预期结果    assert ActualResult == ExceptedResult\n\n\n类级别的测试用例\n\nclass TestXXX:    def setup(self):        # 资源准备        pass    def teardown(self):        # 资源销毁        pass    def test_XXX(self):        # 测试步骤1        # 测试步骤2        # 断言 实际结果 对比 预期结果        assert ActualResult == ExceptedResult\n\nPyTest测试用例断言\n什么是断言\n\n断言(assert)是一种在程序中的一阶逻辑，目的为了表示与验证软件开发者预期的结果。当程序运行到断言的位置时，对应的断言应该为真。若断言不为真，程序会终止执行，并给出错误信息\n\n断言写法\n\nassert &lt;表达式&gt;\nassert True\nassert False\n\n\nassert &lt;表达式&gt;,&lt;描述&gt;\nassert False,’Test false’\n\n\n\n\n\nimport sysdef test_plat():    assert (&#x27;linux&#x27; in sys.platform),&#x27;改代码只能在linux系统运行&#x27;\n\nPytest 测试框架结构\n\n\n类型\n规则\n\n\n\nsetup_moudle&#x2F;teardown_module\n全局模块级（.py文件）\n\n\nsetup_class&#x2F;teardown_class\n类级（class），只在类中前后运行一次\n\n\nsetup_function&#x2F;teardown_function\n函数级，在类外\n\n\nsetup_method&#x2F;teardown_method\n方法级，类中每个方法执行前后\n\n\nsetup&#x2F;teardown\n在类中，运行在调用方法的前后（重点，相当于setup_method&#x2F;teardown_method缩写）\n\n\n# coding=utf-8&quot;&quot;&quot;@File    : test_setup_teardown.py@Time    : 2023/2/20 21:34@Author  : Sun@Description : &quot;&quot;&quot;# 模块级别，整个py文件只调一次def setup_module():    print(&#x27;资源准备：setup_module&#x27;)def teardown_module():    print(&#x27;资源销毁：teardown_module&#x27;)# 函数级、在类外def setup_function():    print(&#x27;资源准备：setup_function&#x27;)def teardown_function():    print(&#x27;资源销毁：teardown_function&#x27;)def test_case1():    print(&#x27;test_case1&#x27;)def test_case2():    print(&#x27;test_case2&#x27;)class TestDemo:    # 执行类级别，在类执行的前后分别执行setup_class teardown_class    def setup_class(self):        print(&#x27;资源准备：setup_class&#x27;)    def teardown_class(self):        print(&#x27;资源销毁：teardown_class&#x27;)    # 在类的每个方法前后执行    def setup(self):        print(&#x27;资源准备：setup&#x27;)    def teardown_method(self):        print(&#x27;资源销毁：teardown_method&#x27;)        print()    def test_demo1(self):        print(&#x27;test_demo1&#x27;)    def test_demo2(self):        print(&#x27;test_demo2&#x27;)\n\n# resultD:\\Programs\\anaconda3\\envs\\PyTest\\python.exe &quot;D:/Program Files/JetBrains/PyCharm 2022.2.3/plugins/python/helpers/pycharm/_jb_pytest_runner.py&quot; --path E:\\PycharmProjects\\PyTest\\test_setup_teardown.py Testing started at 21:50 ...Launching pytest with arguments E:\\PycharmProjects\\PyTest\\test_setup_teardown.py --no-header --no-summary -q in E:\\PycharmProjects\\PyTest============================= test session starts =============================collecting ... collected 4 itemstest_setup_teardown.py::test_case1 资源准备：setup_module资源准备：setup_functionPASSED                                [ 25%]test_case1资源销毁：teardown_functiontest_setup_teardown.py::test_case2 资源准备：setup_functionPASSED                                [ 50%]test_case2资源销毁：teardown_functiontest_setup_teardown.py::TestDemo::test_demo1 test_setup_teardown.py::TestDemo::test_demo2 ============================== 4 passed in 0.02s ==============================Process finished with exit code 0资源准备：setup_class资源准备：setupPASSED                      [ 75%]test_demo1资源销毁：teardown_method资源准备：setupPASSED                      [100%]test_demo2资源销毁：teardown_method资源销毁：teardown_class资源销毁：teardown_module\n\n计算器实战计算器通过加法、减法、乘法、除法等功能的运算\nPytest_L2Pytest参数化用例参数化应用场景\n测试登录场景\n\n登录成功\n登录数百\n\n\n普通测试用例方法\n\ncopy多份代码 or 输入多个参数\n\n\n\nPytest参数化实现方法\n装饰器：\n\n@pytest.mark.parametrize(“参数名(与测试用例中需要替换的参数一致)”,[参数值1,参数值2])\n@pytest.mark.parametrize(&quot;useranme,password&quot;,[[&quot;right&quot;,&quot;right&quot;],[&quot;wrong&quot;,&quot;wrong&quot;]])def test_param(useranme,password):    login(useranme,password)\n\nMark:参数化测试函数使用单参数，可以将数据放在列表中import pytestseach_list = [&#x27;appium&#x27;,&#x27;sellent&#x27;,&#x27;pytest&#x27;]# 参数化实现测试用例的动态形成@pytest.mark.parametrize(&quot;search_key&quot;,[&#x27;appium&#x27;,&#x27;sellent&#x27;,&#x27;pytest&#x27;,&#x27;aba&#x27;,&#x27;&#x27;])def test_search_param(search_key):    # 1. 定义搜索词    # search_key = &quot;appium&quot;    # 2. 完成断言    assert search_key in seach_list# RESULTtest_param.py::test_search_param[sellent] test_param.py::test_search_param[pytest] test_param.py::test_search_param[aba] PASSED                          [ 20%]PASSED                         [ 40%]PASSED                          [ 60%]FAILED                             [ 80%]test_param.py:14 (test_search_param[aba])&#x27;aba&#x27; != [&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;]Expected :[&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;]Actual   :&#x27;aba&#x27;&lt;Click to see difference&gt;search_key = &#x27;aba&#x27;    @pytest.mark.parametrize(&quot;search_key&quot;, [&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;, &#x27;aba&#x27;, &#x27;&#x27;])    def test_search_param(search_key):        # 1. 定义搜索词        # search_key = &quot;appium&quot;        # 2. 完成断言&gt;       assert search_key in seach_listE       AssertionError: assert &#x27;aba&#x27; in [&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;]test_param.py:20: AssertionErrortest_param.py::test_search_param[] FAILED                                [100%]test_param.py:14 (test_search_param[])&#x27;&#x27; != [&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;]Expected :[&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;]Actual   :&#x27;&#x27;&lt;Click to see difference&gt;search_key = &#x27;&#x27;    @pytest.mark.parametrize(&quot;search_key&quot;, [&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;, &#x27;aba&#x27;, &#x27;&#x27;])    def test_search_param(search_key):        # 1. 定义搜索词        # search_key = &quot;appium&quot;        # 2. 完成断言&gt;       assert search_key in seach_listE       AssertionError: assert &#x27;&#x27; in [&#x27;appium&#x27;, &#x27;sellent&#x27;, &#x27;pytest&#x27;]test_param.py:20: AssertionError========================= 2 failed, 3 passed in 0.14s =========================Process finished with exit code 1\n\n多参数，将数据放在列表嵌套元组中或列表嵌套列表中@pytest.mark.parametrize(&quot;username,password&quot;,                         [(&#x27;right_usename&#x27;, &#x27;right_password&#x27;), (&#x27;wrong_username&#x27;, &#x27;wrong_password&#x27;), (&quot; &quot;, &#x27;password&#x27;),                          (&quot;username&quot;, &#x27; &#x27;)])def test_login1(username, password):    print(f&#x27;登录的用户名:&#123;username&#125;, 密码:&#123;password&#125;&#x27;)# RESULTPASSED          [ 25%]登录的用户名:right_usename, 密码:right_passwordPASSED         [ 50%]登录的用户名:wrong_username, 密码:wrong_passwordPASSED                            [ 75%]登录的用户名: , 密码:passwordPASSED                            [100%]登录的用户名:username, 密码: \n\n用例重命名用例重命名-添加ids参数\n通过ids参数，将别名放在列表中，ids列表中参数的数量要与第二项参数值的个数一致\n\n@pytest.mark.parametrize(&quot;username,password&quot;,[[&#x27;right_usename&#x27;,&#x27;right_password&#x27;],[&#x27;wrong_username&#x27;,&#x27;wrong_password&#x27;],[&quot; &quot;,&#x27;password&#x27;]],                         ids=[&#x27;RIGHT username and password&#x27;,&#x27;WRONG username and password&#x27;,&#x27;WRONG username and RIGHT password&#x27;])def test_login(username,password):    print(f&#x27;登录的用户名:&#123;username&#125;, 密码:&#123;password&#125;&#x27;)# RESULTPASSED            [ 33%]登录的用户名:right_usename, 密码:right_passwordPASSED            [ 66%]登录的用户名:wrong_username, 密码:wrong_passwordPASSED      [100%]登录的用户名: , 密码:password\n\n用例重命名-添加ids参数（中文情况）\n在项目下新建conftest.py文件，添加以下内容\n\ndef pytest_collection_modifyitems(items):    # 测试用里收集完成是，将收集到的用例名name和用例表示nodeid的中文信息显示在控制台上    for i in items:        i.name = i.name.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode_escape&#x27;)        i._nodeid = i.nodeid.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode_escape&#x27;)\n\n\n通过ids参数，将别名放在列表中，ids列表中参数的数量要与第二项参数值的个数一致\n\n# ids设置中文的情况@pytest.mark.parametrize(&quot;username,password&quot;,[[&#x27;right_usename&#x27;,&#x27;right_password&#x27;],[&#x27;wrong_username&#x27;,&#x27;wrong_password&#x27;],[&quot; &quot;,&#x27;password&#x27;]],                         ids=[&#x27;正确&#x27;,&#x27;错误&#x27;,&#x27;正确用户名，错误密码&#x27;])def test_login2(username,password):    print(f&#x27;登录的用户名:&#123;username&#125;, 密码:&#123;password&#125;&#x27;)# RESULTPASSED                                  [ 33%]登录的用户名:right_usename, 密码:right_passwordPASSED                                  [ 66%]登录的用户名:wrong_username, 密码:wrong_passwordPASSED                  [100%]登录的用户名: , 密码:password\n\n笛卡儿积\n两组数据\n\na&#x3D;[1,2,3]\nb&#x3D;[a,b,c]\n\n\n对应有几种形式\n\n(1,a)(1,b)(1,c)\n(2,a)(2,b)(2,c)\n(3,a)(3,b)(3,c)\n\n\n装饰器其实就是一个方法，先执行离测试用例最近的装饰器，在执行远的，由近及远，所以测试结果是1-a,1-b,1-c,2-a,2-b,,,\n\n\n# 笛卡儿积@pytest.mark.parametrize(&#x27;b&#x27;, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])@pytest.mark.parametrize(&#x27;a&#x27;, [1, 2, 3])def test_dk(a, b):    print(f&#x27;笛卡儿积形式的参数：a=&#123;a&#125;,b=&#123;b&#125;&#x27;)# RESULTPASSED                                       [ 11%]笛卡儿积形式的参数：a=1,b=aPASSED                                       [ 22%]笛卡儿积形式的参数：a=1,b=bPASSED                                       [ 33%]笛卡儿积形式的参数：a=1,b=cPASSED                                       [ 44%]笛卡儿积形式的参数：a=2,b=aPASSED                                       [ 55%]笛卡儿积形式的参数：a=2,b=bPASSED                                       [ 66%]笛卡儿积形式的参数：a=2,b=cPASSED                                       [ 77%]笛卡儿积形式的参数：a=3,b=aPASSED                                       [ 88%]笛卡儿积形式的参数：a=3,b=bPASSED                                       [100%]笛卡儿积形式的参数：a=3,b=c\n\n标记测试用例\n场景：只执行符合要求的某一部分用例，可以把一个web项目划分多个模块，然后指定模块名称运行\n解决：在测试用例方法上加 @pytest.mark.标签名\n执行：-m执行自定义标记的相关用例\npytest -s test_mark_zi_09.py -m&#x3D;webtest\npytest -s test_mark_zi_09.py -m “apptest”\npytest -s test_mark_zi_09.py -m “not ios”\n\n\n\n\n在文件夹下新建pytest.ini文件，注册标签，避免执行pytest -m 命令时出现warinning\n\n[pytest]markers = str    bignum    int    float    zero    minus\n\n\n新建测试用例\n\nimport pytestdef double(a):    return a * 2# 测试数据：整形@pytest.mark.intdef test_double_int():    print(&#x27;test double int&#x27;)    assert 1 == double(1)# 测试数据：负数@pytest.mark.minusdef test_double_minus():    print(&#x27;test double minus&#x27;)    assert -2 == double(-1)# 测试数据：浮点数@pytest.mark.floatdef test_double_float():    print(&#x27;test double float&#x27;)    assert 0.2 == double(0.1)@pytest.mark.floatdef test_double_float2():    print(&#x27;test double float&#x27;)    assert -10.2 == double(-0.1)@pytest.mark.zerodef test_double_zero():    print(&#x27;test double zero&#x27;)    assert 10 == double(0)@pytest.mark.bignumdef test_double_bignum():    print(&#x27;test double bignum&#x27;)    assert 200 == double(100)@pytest.mark.strdef test_double_str():    print(&#x27;test double str&#x27;)    assert &#x27;aa&#x27; == double(&#x27;a&#x27;)@pytest.mark.strdef test_double_str1():    print(&#x27;test double str&#x27;)    assert &#x27;a$a$&#x27; == double(&#x27;a$&#x27;)# RESULTPS E:\\PycharmProjects\\PyTest\\L2&gt; pytest .\\test_command_param.py -vs -m &quot;str&quot;================================================================================= test session starts =================================================================================platform win32 -- Python 3.9.12, pytest-7.1.2, pluggy-1.0.0 -- D:\\Program Files\\Python39\\python.execachedir: .pytest_cacherootdir: E:\\PycharmProjects\\PyTest\\L2, configfile: pytest.inicollected 8 items / 6 deselected / 2 selected                                                                                                                                       test_command_param.py::test_double_str test double strPASSEDtest_command_param.py::test_double_str1 test double strPASSED=========================================================================== 2 passed, 6 deselected in 0.01s =========================================================================== PS E:\\PycharmProjects\\PyTest\\L2&gt; \n\n设置跳过、预期失败用例\n调试时不像运行这个用例\n标记无法在某些平台上运行的测试功能\n\n设置跳过\n添加装饰器\n\n@pytest.mark.skip\n\n@pytest.mark.skip(reason=&#x27;未开发完成&#x27;)def test_true():    print(&#x27;true&#x27;)    assert True# RESULTSKIPPED (未开发完成)                             [ 50%]Skipped: 未开发完成\n\n\n@pytest.mark.skipif\n\n@pytest.mark.skipif(sys.platform == &#x27;win&#x27;, reason=&#x27;跳过此项测试的条件为，如果是win平台则跳过此项测试&#x27;)def test_true1():    print(&#x27;Platform:&#123;&#125;&#x27;.format(sys.platform))    assert True# RESULTPASSED                                          [ 66%]Platform:win32\n代码中添加跳过代码\npytest.skip(reason)def check_login():    return Truedef test_login():    print(&#x27;start&#x27;)    if not check_login():        pytest.skip(&#x27;unsupported configuration&#x27;)    print(&#x27;end&#x27;)# RESULTPASSED                                          [100%]startend\n\n预期失败用例\nxfail使用场景\n与skip类似，预期结果为fail，标记用例为fail\n用法：添加装饰器@pytest.mark.xfail\n\n@pytest.mark.xfaildef test_result():    print(&#x27;test_xfaile 方法执行&#x27;)    assert 2 == 2# RESULTXPASS                                          [100%]test_xfaile 方法执行\n\n@xfail(reason=&#x27;bug 110&#x27;)def test_result1():    print(&#x27;test_xfaile 方法执行&#x27;)    assert 1 == 2# RESULTXFAIL (bug 110)                               [100%]test_xfaile 方法执行@xfail(reason=&#x27;bug 110&#x27;)    def test_result1():        print(&#x27;test_xfaile 方法执行&#x27;)&gt;       assert 1 == 2E       assert 1 == 2\n\ndef test_result2():    print(&#x27;test_xfaile 方法执行&#x27;)    pytest.xfail(reason=&#x27;该功能尚未完成&#x27;)    assert 1 == 2# RESULTXFAIL (该功能尚未完成)                        [100%]test_xfaile 方法执行def test_result2():        print(&#x27;test_xfaile 方法执行&#x27;)&gt;       pytest.xfail(reason=&#x27;该功能尚未完成&#x27;)E       _pytest.outcomes.XFailed: 该功能尚未完成\n\n运行用例\n运行 某个&#x2F;多个 用例包（文件夹）\n在某个文件夹下直接运行pytest，将会测试所有符合 test_xxx或 xxx_test 命名的用例\n\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest\n\n\n运行 某个&#x2F;多个 用力模块\npytest 文件名.py\n\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest test_param.py -v\n\n\n运行 某个&#x2F;多个 用例类\npytest 文件名.py::测试类名\n\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L1# pytest test_setup_teardown.py::TestDemo -v\n\n\n运行 某个&#x2F;多个 用例方法\npytest 文件名.py::测试类名::测试用例名\n\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L1# pytest test_setup_teardown.py::TestDemo::test_demo1 -v\n\n测试用例调度与执行\n命令行参数-使用缓存状态\n\n–lf(–last-failed)只重新运行故障\n–ff(–failed-first)先运行故障然后再运行其余的测试\n\n\n\n# 正常测试root@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest -v============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cacherootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 56 items                                                                                                                           test_command_param.py::test_double_int FAILED                                                                                              [  1%]test_command_param.py::test_double_minus PASSED                                                                                            [  3%]test_command_param.py::test_double_float PASSED                                                                                            [  5%]test_command_param.py::test_double_float2 FAILED                                                                                           [  7%]test_command_param.py::test_double_zero FAILED                                                                                             [  8%].....test_skip.py::test_login PASSED                                                                                                            [ 94%]test_skip.py::test_result XPASS                                                                                                            [ 96%]test_skip.py::test_result1 XFAIL (该功能尚未完成)                                                                                          [ 98%]test_skip.py::test_result2 XFAIL (该功能尚未完成)                                                                                          [100%]# --lfroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest --lf -v============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cacherootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 5 items                                                                                                                            run-last-failure: rerun previous 5 failures (skipped 1 file)test_command_param.py::test_double_int FAILED                                                                                              [ 20%]test_command_param.py::test_double_float2 FAILED                                                                                           [ 40%]test_command_param.py::test_double_zero FAILED                                                                                             [ 60%]test_param.py::test_search_param[aba] FAILED                                                                                               [ 80%]test_param.py::test_search_param[] FAILED                                                                                                  [100%]# --ffroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest --ff -v============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cacherootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 56 items                                                                                                                           run-last-failure: rerun previous 5 failures firsttest_command_param.py::test_double_int FAILED                                                                                              [  1%]test_command_param.py::test_double_float2 FAILED                                                                                           [  3%]test_command_param.py::test_double_zero FAILED                                                                                             [  5%]test_param.py::test_search_param[aba] FAILED                                                                                               [  7%]test_param.py::test_search_param[] FAILED                                                                                                  [  8%]test_command_param.py::test_double_minus PASSED                                                                                            [ 10%]test_command_param.py::test_double_float PASSED                                                                                            [ 12%]test_command_param.py::test_double_bignum PASSED                                                                                           [ 14%].....test_skip.py::test_login PASSED                                                                                                            [ 94%]test_skip.py::test_result XPASS                                                                                                            [ 96%]test_skip.py::test_result1 XFAIL (该功能尚未完成)                                                                                          [ 98%]test_skip.py::test_result2 XFAIL (该功能尚未完成)                                                                                          [100%]\n\npytest 命令行常用参数\n–help 获取参数列表\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest --helpusage: pytest [options] [file_or_dir] [file_or_dir] [...]positional arguments:  file_or_dirgeneral:  -k EXPRESSION         Only run tests which match the given substring expression. An expression is a Python evaluatable expression where all                        names are substring-matched against test names and their parent classes. Example: -k &#x27;test_method or test_other&#x27; matches                        all test functions and classes whose name contains &#x27;test_method&#x27; or &#x27;test_other&#x27;, while -k &#x27;not test_method&#x27; matches those                        that don&#x27;t contain &#x27;test_method&#x27; in their names. -k &#x27;not test_method and not test_other&#x27; will eliminate the matches.                        Additionally keywords are matched to classes and functions containing extra names in their &#x27;extra_keyword_matches&#x27; set, as                        well as functions which have names assigned directly to them. The matching is case-insensitive.  -m MARKEXPR           Only run tests matching given mark expression. For example: -m &#x27;mark1 and not mark2&#x27;.  --markers             show markers (builtin, plugin and per-project ones).  -x, --exitfirst       Exit instantly on first error or failed test  --fixtures, --funcargs...root@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# \n\n\n-x 用例一旦失败（fail&#x2F;error)立刻停止执行\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest -x\n\n\n–maxfail&#x3D;num 用例达到\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest --maxfail=3\n\n\n-m 标记用例，执行@pytest.mark.xx 标记为xx的用例\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest -m &#x27;bignum&#x27; -vs============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cacherootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 56 items / 55 deselected / 1 selected                                                                                              test_command_param.py::test_double_bignum test double bignumPASSED======================================================== 1 passed, 55 deselected in 0.01s ========================================================root@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# \n\n\n-k 执行包含某个关键字的测试用例(针对测试用例名称)\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest -vs -k &#x27;login1&#x27;============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cacherootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 56 items / 52 deselected / 4 selected                                                                                              test_param.py::test_login1[right_usename-right_password] 登录的用户名:right_usename, 密码:right_passwordPASSEDtest_param.py::test_login1[wrong_username-wrong_password] 登录的用户名:wrong_username, 密码:wrong_passwordPASSEDtest_param.py::test_login1[ -password] 登录的用户名: , 密码:passwordPASSEDtest_param.py::test_login1[username- ] 登录的用户名:username, 密码: PASSED======================================================== 4 passed, 52 deselected in 0.02s ========================================================root@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# \n\n\n-v打印详细日志\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest -v -k &#x27;login1&#x27;============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cacherootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 56 items / 52 deselected / 4 selected                                                                                              test_param.py::test_login1[right_usename-right_password] PASSED                                                                            [ 25%]test_param.py::test_login1[wrong_username-wrong_password] PASSED                                                                           [ 50%]test_param.py::test_login1[ -password] PASSED                                                                                              [ 75%]test_param.py::test_login1[username- ] PASSED                                                                                              [100%]======================================================== 4 passed, 52 deselected in 0.02s ========================================================root@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# \n\n\n-s打印输出日志（一般-vs一起使用）\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest -s -k &#x27;login1&#x27;============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0rootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 56 items / 52 deselected / 4 selected                                                                                              test_param.py 登录的用户名:right_usename, 密码:right_password.登录的用户名:wrong_username, 密码:wrong_password.登录的用户名: , 密码:password.登录的用户名:username, 密码: .======================================================== 4 passed, 52 deselected in 0.02s ========================================================root@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# \n\n\n–collect-only(测试平台，pytest自动导入)\n\nroot@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# pytest --collect-only -k &#x27;login1&#x27;============================================================== test session starts ===============================================================platform linux -- Python 3.10.6, pytest-7.2.1, pluggy-1.0.0rootdir: /root/code/vscode-server/PyTest/L2, configfile: pytest.inicollected 56 items / 52 deselected / 4 selected                                                                                              &lt;Module test_param.py&gt;  &lt;Function test_login1[right_usename-right_password]&gt;  &lt;Function test_login1[wrong_username-wrong_password]&gt;  &lt;Function test_login1[ -password]&gt;  &lt;Function test_login1[username- ]&gt;================================================= 4/56 tests collected (52 deselected) in 0.01s ==================================================root@99eb4bd37fb2:~/code/vscode-server/PyTest/L2# \n\n执行Pytest\n代码执行main函数\n\nif __name__ == &#x27;__main__&#x27;:    # 1、运行当前目录下所有符合规则的用例，包括子目录（test_*.py 和 *_test.py）    # pytest.main()    # 2、运行test_first.py::test_answer模块中的某一用例    # pytest.main([&#x27;test_param.py::test_dk&#x27;,&#x27;-vs&#x27;])    # 3、运行某个标签    pytest.main([&#x27;test_command_param.py&#x27;,&#x27;-vs&#x27;,&#x27;-m&#x27;,&#x27;float&#x27;])\n\n\n使用python -m pytest调用pytest\n\nPS E:\\PycharmProjects\\PyTest\\L2&gt; python -m pytest -vs .\\test_param.py^\n\npytest异常处理\ntry…except\n\ntry:    a = int(input(&#x27;Please input a number: &#x27;))    b = int(input(&#x27;Please input a number: &#x27;))    c = a / b    print(f&#x27;&#123;a&#125; / &#123;b&#125; = &#123;c&#125;&#x27;)except(ValueError, ArithmeticError):    print(&#x27;ValueError or ArithmeticError&#x27;)except:    print(&quot;Unknown Error&quot;)print(&quot;End&quot;)\n\n\npytest.raise()\n可以捕获特定的异常\n获取捕获的异常的细节（异常类型、异常信息）\n发生异常，后面的代码将不会被执行\n\n\n\ndef test_raise1():    with pytest.raises(ZeroDivisionError):        raise ZeroDivisionError(&#x27;除数为0&#x27;)def test_raise2():    with pytest.raises((ValueError, ZeroDivisionError)):        raise ZeroDivisionError(&#x27;除数为0&#x27;)# 正则匹配里的内容必须和设置的内容一样，否则将会认为失败def test_raise3():    with pytest.raises((ValueError, ZeroDivisionError), match=&#x27;value must be 0 or none&#x27;):        raise ZeroDivisionError(&#x27;value must be 0 or none&#x27;)def test_raise4():    with pytest.raises((ValueError, ZeroDivisionError)) as exc_info:        raise ValueError(&#x27;value must be 0 or none&#x27;)    assert exc_info.type is ValueError    assert exc_info.value.args[0] == &#x27;value must be 0 or none&#x27;\n\nPytest_L3Pytest结合数据驱动-yaml\n什么是数据驱动\n\n数据驱动就是数据的改变从而驱动自动化测试的执行，最终引起测试结果的改变。简单来说就是参数化的应用。\n\n\n应用\n\nApp、Web、接口自动化测试\n测试步骤数据驱动\n测试数据的驱动\n配置的数据驱动\n\n\n\nyaml文件介绍\n对象：键值对的集合，用冒号“:”表示\n\n数组：一组按次序排列的值，前加“-”\n\n纯量：单个的，不可再分的值\n\n字符串\n布尔值\n整数\n浮点数\nNull\n时间\n日期\n\n\n读取yaml文件\n\n安装：pip install pyyaml\n方法：yaml.safe_load(f)\n方法：yaml.safe_dump(f)\n\n\n\n\ndatas&#x2F;data.yaml\n\n#相当于[[1,2,3],[3,6,9],[100,200,300]]-  - 1  - 2  - 3-  - 3  - 6  - 9-  - 100  - 200  - 300\n\n\nfunc&#x2F;operation.py\n\n# coding=utf-8&quot;&quot;&quot;@File    : operation.py@Time    : 2023/2/26 22:58@Author  : Sun@Description : 被测对象&quot;&quot;&quot;# 被测方法，相加功能def my_add(x, y):    result = x + y    return result\n\n\ntestcase&#x2F;test_add.py\n\n# coding=utf-8&quot;&quot;&quot;@File    : test_add.py@Time    : 2023/2/26 22:58@Author  : Sun@Description : 测试用例&quot;&quot;&quot;import pytestimport yamlfrom L3.func.operation import my_addfile_path = &#x27;../datas/data.yaml&#x27;# 读取yaml文件def get_data():    with open(file_path, mode=&#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:        data = yaml.safe_load(f)    return datadef test_get_data():    print(get_data())class TestWithYAML:    # 参数化适合少量数据测试，不适合批量数据    @pytest.mark.parametrize(&#x27;x,y,expected&#x27;, [[1, 2, 3], [3, 6, 9], [100, 200, 300],                                              [11, 22, 33], [32, 62, 94], [1001, 2001, 3002]])    def test_add1(self, x, y, expected):        assert my_add(int(x), int(y)) == int(expected)    # 使用yaml文件测试    @pytest.mark.parametrize(&#x27;x,y,expected&#x27;, get_data())    def test_add2(self, x, y, expected):        assert my_add(int(x), int(y)) == int(expected)if __name__ == &#x27;__main__&#x27;:    pytest.main([&#x27;test_add.py&#x27;,&#x27;-vs&#x27;])\n\nPytest 结合数据驱动-excel\nopenpyxl\n\ndef get_excel():    # 获取工作簿    book = openpyxl.load_workbook(&#x27;../datas/params.xlsx&#x27;)    # 获取工作表    sheet = book.active    # 获取单元格数据    # a_1 = sheet[&#x27;A1&#x27;].value    # print(a_1)    # 获取数据时column和row的索引都是从1开始    # c_3 = sheet.cell(column=3, row=3).value    # print(c_3)    # 获取多个单元格    cells = sheet[&#x27;A1&#x27;:&#x27;C7&#x27;]    values = []    for row in cells:        datas = []        for cell in row:            datas.append(cell.value)        values.append(datas)    # print(values)    return values    # 使用excel文件测试    @pytest.mark.parametrize(&#x27;x,y,expected&#x27;, get_excel())    def test_add_excel(self, x, y, expected):        assert my_add(int(x), int(y)) == int(expected)\n\nPytest 结合数据驱动-csv# 读取csv文件def get_csv():    with open(&#x27;../datas/demo.csv&#x27;, &#x27;r&#x27;) as f:        datas = csv.reader(f)        valuse = []        for line in datas:            valuse.append(line)        return valuse    # 使用csv文件测试    @pytest.mark.parametrize(&#x27;x,y,expected&#x27;, get_csv())    def test_add_csv(self, x, y, expected):        assert my_add(int(x), int(y)) == int(expected)\n\nPytest 结合数据驱动-json# 读取json文件def get_json():    with open(&#x27;../datas/data.json&#x27;,&#x27;r&#x27;) as f:        datas = json.loads(f.read())        return list(datas.values())    # 使用json文件测试    @pytest.mark.parametrize(&#x27;x,y,expected&#x27;, get_json())    def test_add_json(self, x, y, expected):        assert my_add(int(x), int(y)) == int(expected)\n\nPytest 测试用例生命周期管理-Fixture用法\n命令灵活：对应setup,teardown,可以不起这两个名字\n数据共享：在conftest.py配置里写方法，可以实现数据共享，不需要import导入\nscope的层次及申请的yield组合相当于各种setup和teardown\n实现参数化\n\n\n场景：测试用例执行时，加入有10条用例，其中4条需要登录，setup和teardown无法满足\n\n步骤\n\n导入pytest\n在登录的函数(要实现自动化的函数)上面加上@pytest.fixture()\n在要使用的测试方法中传入（登录函数名称），将会执行登录的方法\n不传入登录函数的将会直接执行测试方法\n\n\n\nimport pytest# 定义了登录的fixture@pytest.fixturedef login():    print(&#x27;完成登录操作&#x27;)# 未定义登录的fixturedef login1():    print()    print(&#x27;完成登录操作&#x27;)def test_search():    print(&#x27;搜索&#x27;)# 使用fixture方法，需要调用函数就先传入函数名字，否则就不需要def test_order(login):    print(&#x27;下单功能&#x27;)# 未使用fixture方法def test_cart():    login1()    print(&#x27;购物车&#x27;)\n\nFixture在自动化中的应用-作用域\n\n\n取值\n范围\n说明\n\n\n\nfunction\n函数级\n每一个函数或方法都会调用\n\n\nclass\n类级别\n每个测试类只运行一次\n\n\nmodule\n模块级\n每个.py文件调用一次\n\n\npackage\n包级\n每个python包只调用一次（暂不支持）\n\n\nsession\n会话级\n每个会话只运行一次，绘画内所有方法及类，模块都共享这个方法\n\n\nimport pytest# 定义了登录的fixture，尽量避免以test_开头# 设置作用域 scope=&quot;module&quot;# 设置作用域 scope=&quot;class&quot;# 定义了登录的fixture# @pytest.fixture(scope=&quot;class&quot;)@pytest.fixture(scope=&quot;module&quot;)def login():    print(&#x27;完成登录操作&#x27;)def test_search():    print(&#x27;搜索&#x27;)# 使用fixture方法，需要调用函数就先传入函数名字，否则就不需要def test_order(login):    print(&#x27;下单功能&#x27;)# 未使用fixture方法def test_cart():    print(&#x27;购物车&#x27;)class TestDemo:    def test_case1(self,login):        print(&#x27;case1&#x27;)    def test_case2(self,login):        print(&#x27;case2&#x27;)\n\nFixture在自动化中的应用-yield关键字\n场景：测试方法后销毁清除数据的如何进行\n解决：在fixture函数中加入yield关键字，yield是调用第一次返回的结果，第二次执行它下面的语句返回\n步骤：在@pytest.fixture(scope&#x3D;module)，在登录的方法中加入yield，之后加销毁清除的步骤\n\nimport pytest# 定义了登录的fixture，尽量避免以test_开头# 设置作用域 scope=&quot;module&quot;# 设置作用域 scope=&quot;class&quot;# 定义了登录的fixture@pytest.fixture(scope=&quot;class&quot;)# @pytest.fixture(scope=&quot;module&quot;)# @pytest.fixture(scope=&quot;session&quot;)def login():    # setup 操作    print(&#x27;完成登录操作&#x27;)    token = &#x27;abcagasss&#x27;    username = &#x27;user1&#x27;    # 相当于return，但是如果改成return，将不会执行后续操作    yield token,username    # teardown 操作    print(&#x27;完成登出操作&#x27;)def test_search():    print(&#x27;搜索&#x27;)# 使用fixture方法，需要调用函数就先传入函数名字，否则就不需要def test_order(login):    token,username = login    print(f&#x27;token:&#123;token&#125;,username:&#123;username&#125;&#x27;)    print(&#x27;下单功能&#x27;)# 未使用fixture方法def test_cart():    print(&#x27;购物车&#x27;)class TestDemo:    def test_case1(self,login):        print(&#x27;case1&#x27;)    def test_case2(self,login):        print(&#x27;case2&#x27;)\n\nPytest生命周期管理-自动注册\n场景与其他人一起开发，公共模块要在不同文件中，要在大家都能访问到的地方\n\n解决使用conftest.py这个文件进行数据共享，并且可以放在不同位置起到共享作用\n\n前提\n\nconftest文件名不能换\n放在项目下是全局共享的地方\n\n\n执行\n\n系统执行到参数login时，先从本模块中查找是否有这个名字的变量什么的\n之后在conftest.py中找是否有\n\n\n步骤将登录模块@pytest.fixture写在conftest.py文件中\n\n\n# conftest.pyimport pytest# conftest.py 名字固定，不能改变# 定义公用方法# 定义了登录的fixture@pytest.fixture(scope=&quot;class&quot;)# @pytest.fixture(scope=&quot;module&quot;)# @pytest.fixture(scope=&quot;session&quot;)def login():    # setup 操作    print(&#x27;完成登录操作&#x27;)    token = &#x27;abcagasss&#x27;    username = &#x27;user1&#x27;    # 相当于return，但是如果改成return，将不会执行后续操作    yield token, username    # teardown 操作    print(&#x27;完成登出操作&#x27;)@pytest.fixture(scope=&quot;session&quot;)def connectDB():    print(&#x27;连接数据库&#x27;)    yield    print(&#x27;断开数据库&#x27;)# test_fixture_use_conftest.pydef test_get_order(connectDB, login):    token, username = login    print(f&#x27;token:&#123;token&#125;,username:&#123;username&#125;&#x27;)    print(&#x27;获取订单&#x27;)\n\nPytest生命周期管理-自动生效\n场景：不想测试方法有改动，或全部都自动实现，自动应用，没特例，也都不需要返回值时可以选择自动应用\n解决：使用fixture中参数 autouse&#x3D;True 实现\n步骤：在方法上面加@pytest.fixture(autouse&#x3D;True)\n\n# conftest.py@pytest.fixture(scope=&quot;function&quot;,autouse=True)def login1():    # setup 操作    print(&#x27;完成登录操作—autouse=True&#x27;)    token = &#x27;abcagasss&#x27;    username = &#x27;user1&#x27;    # 相当于return，但是如果改成return，将不会执行后续操作    yield token, username    # teardown 操作    print(&#x27;完成登出操作-autouse=True&#x27;)# test_fixture_use_conftest1.pyclass TestDemo:    def test_case1(self):        print(&#x27;case1&#x27;)    def test_case2(self):        print(&#x27;case2&#x27;)\n\nPytest fixture 实现参数化\n场景：测试离不开数据，为了数据灵活，一般数据都是通过参数传递的\n解决：fixture 通过固定参数request传递\n步骤：在fixture中增加@pytest.fixture(params&#x3D;[1,2,3,’linda’])在方法参数中写request，方法体里面使用request.param接收参数\n\nimport pytest@pytest.fixture(params=[[&#x27;harry&#x27;, &#x27;123&#x27;], [&#x27;lice&#x27;, 999]])def login_param(request):    print(f&#x27;用户名：&#123;request.param&#125;&#x27;)    return request.paramdef test_demo1(login_param):    print(f&#x27;demo1 case:数据为：&#123;login_param&#125;&#x27;)\n\nPytest_L4Pytest 配置文件-pytest.ini\npytest.ini是pytest的配置文件\n可以修改pytest的默认行为\n不能使用任何中文符号，包括汉字、空格、引号、冒号等等\n作用\n修改用例的命名规则\n配置日志格式，比代码配置更方便\n添加标签，防止运行过程报警告错误\n指定执行目录\n排除搜索目录\n\n执行check_开头和 test_开头的所有的文件，后面一定要加*python_files &#x3D; check_* test_*\nPytest插件\npytest 插件分类\n外部插件 pip install 安装插件\n本地插件 pytest自动模块发现机制（conftest.py）存放的\n内置插件 代码内部的_pytest目录加载\n\n\npytest hook介绍\npytest hook执行顺序\n\nPytest 常用插件\nhttps://pypi.org/search/?q=pytest\n\npytest --collect-only 收集测试用例pip install pytest-ordering 控制用例的执行顺序pip install pytest-xdist 分布式并发执行测试用例\n\nPytest并行与分布式执行pip install pytest-xdist 分布式并发执行测试用例# auto 自行决定调用CPU核心，也可自己指定CPU核心数pytest -n auto\n\nPytest内置插件 hook 体系\n是个函数，在系统消息触时被系统调用\n自动触发机制\nHook函数的名称是确定的\npytest有非常多的勾子函数\n使用时直接编写函数体\n\n\nconftest.py(存放在根目录下)# hook 体系from typing import Optionaldef pytest_collection_modifyitems(session, config, items:list):    for item in items:        item.name = item.name.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode-escape&#x27;)        item._nodeid = item.nodeid.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode-escape&#x27;)    &quot;&quot;&quot;Called after collection has been performed. May filter or re-order    the items in-place.    :param pytest.Session session: The pytest session object.    :param pytest.Config config: The pytest config object.    :param List[pytest.Item] items: List of item objects.    &quot;&quot;&quot;def pytest_runtest_setup(item: &quot;Item&quot;) -&gt; None:    print(&quot;hook : setup&quot;)    &quot;&quot;&quot;Called to perform the setup phase for a test item.    The default implementation runs ``setup()`` on ``item`` and all of its    parents (which haven&#x27;t been setup yet). This includes obtaining the    values of fixtures required by the item (which haven&#x27;t been obtained    yet).    &quot;&quot;&quot;def pytest_runtest_teardown(item: &quot;Item&quot;, nextitem: Optional[&quot;Item&quot;]) -&gt; None:    print(&#x27;hook : teardown&#x27;)    &quot;&quot;&quot;Called to perform the teardown phase for a test item.    The default implementation runs the finalizers and calls ``teardown()``    on ``item`` and all of its parents (which need to be torn down). This    includes running the teardown phase of fixtures required by the item (if    they go out of scope).    :param nextitem:        The scheduled-to-be-next test item (None if no further test item is        scheduled). This argument is used to perform exact teardowns, i.e.        calling just enough finalizers so that nextitem only needs to call        setup functions.    &quot;&quot;&quot;\n\ntest_hook.py# hook 体系def test_demo1():    print(&#x27;test_demo1&#x27;)\n\n\n总结\n\n\nhook函数名字固定\nhook函数会被自动执行\n执行是有先后顺序的\npytest定义了很多hook函数，可以在不同阶段实现不同功能\n\nPytest插件开发pytest_collection_modifyitems 收集上来的测试用例\nAllure2_L1Allure2安装\nJava开发、轻量级、灵活的测试报告工具\n多平台的Report框架\n支持多语言，Python、JavaScript、PHP、Ruby\n可以为开发&#x2F;测试&#x2F;管理等人员提供详尽的测试报告，包括测试类别、测试步骤、日志、图片、视频等\n可为管理层提供高水准的统计报告\n可以集成到Jenkins生成在线的趋势汇总报告\n\n# Ubuntu 2204# 1. 配置Java环境sudo apt-get updatesudo apt-get install default-jresudo apt-get install default-jdk# 2. 配置alluresudo apt-add-repository ppa:qameta/alluresudo apt-get update sudo apt-get install alluresudo nano /etc/environmentALLURE_HOME=&quot;/usr/lib/allure/&quot;source /etc/environment# 3. 验证版本 allure --version\n\n运行方式\n运行用例，添加 –alluredir\n\npytest [测试用例/模块/包] --alluredir=存放结果路径pytest [测试用例/模块/包] --alluredir=./results\n\n\n生成报告\nallure server 生成在线报告\nallure generate 生成静态资源报告\n\n\n\n# 指定端口、IPallure serve ./results/ -h 172.17.0.5 -p 20000\n\nAllure2_L2allure2 报告生成\n常用参数\n\n\nallure generate可以输出路径，也可以清理上次的报告记录\n-o &#x2F; –output 输出报告的路径\n-c &#x2F; –clean 如果报告路径重复\n\n\nallure open打开报告\n-h &#x2F; –host 主机IP地址，此主机将用于启动报表的web服务\n-p &#x2F; –port 主机端口，此端口将用于启动报表的web服务器，默认值0\n\n\n\n清理上次结果 –clean-alluredirroot@3832dba7df75:~/code/vscode-server/PyTest/Allure2_L1/allure2_2# pytest test_allure_demo.py --alluredir=./results --clean-alluredir\n\nallure generate 生成静态资源报告root@3832dba7df75:~/code/vscode-server/PyTest/Allure2_L1/allure2_2# allure generate ./resultsReport successfully generated to allure-report\n\nallure generate 生成静态资源报告,指定输出报告路径root@3832dba7df75:~/code/vscode-server/PyTest/Allure2_L1/allure2_2# allure generate ./results -o ./myreports \n\nallure open打开报告，指定IP，portroot@3832dba7df75:~/code/vscode-server/PyTest/Allure2_L1/allure2_2# allure open -h 172.17.0.3 -p 20000 ./allure-report/\n\nallure2 报告中添加常用用例\nallure用法\n\n\n\n\n方法名\n方法参数\n参数说明\n\n\n\n@allure.epic()\nepic描述\n敏捷里面的概念，定义史诗，往下是feature\n\n\n@allure.feature()\n模块名称\n功能点的描述，往下是story\n\n\n@allure.story\n用户故事\n用户故事，往下是title\n\n\n@allure.title(用例的标题)\n用例的标题\n重命名html报告名称\n\n\n@allure.step()\n操作步骤\n测试用例的步骤\n\n\n@allure.testcase()\n测试用例的连接地址\n对应功能测试用例系统里面的case\n\n\n@allure.issue()\n缺陷\n对应缺陷管理系统里面的链接\n\n\n@allure.description\n用例描述\n测试用例的描述\n\n\n@allure.severity()\n用例等级\nblocker,citical,normal,minor,trival\n\n\n@allure.link()\n链接\n定义一个链接，在测试报告展现\n\n\n@allure.attachment()\n附件\n报告添加附件\n\n\n\n通过使用装饰器@allure.title可以为测试用例自定义一个可阅读性的标题\nallure.title的三种使用方法\n\n\n直接使用@allure.title为测试用例自定义标题\n\n@allure.title(&#x27;自定义测试用例标题&#x27;)def test_with_title1():    assert True\n\n\n@allure.title 支持通过占位符的方式传递参数，可以实现测试用例标题参数化，动态生成测试用例标题\n\n@allure.title(&#x27;参数化用例标题:参数1：&#123;param1&#125;，参数2，&#123;parame2&#125;&#x27;)@pytest.mark.parametrize(&#x27;param1,parame2,expected&#x27;,[[1,2,3],[0.2,0.31,0.5],(12,32,44),(90,22,112)])def test_with_title2(param1,parame2,expected):    assert param1 + parame2 == expected\n\n\nallure.dynamic.title 动态更新测试用例标题\n\n@allure.title(&quot;动态更新前的标题&quot;)def test_with_title3():    assert True    allure.dynamic.title(&quot;动态更新后的标题&quot;)\n\nallure2 报告中添加用例步骤\nAllure支持两种方法：\n\n\n使用装饰器定义一个测试步骤，在测试用例中使用\n\n@allure.stepdef simple_step1(step_param1,step_param2 = None):    # 定义一个测试步骤1    print(&#x27;首先：链接数据库，准备测试数据&#x27;)    print(f&#x27;步骤1：打开页面，参数1：&#123;step_param1&#125;, 参数2：&#123;step_param2&#125;&#x27;)@allure.stepdef simple_step2(step_param):    # 定义一个测试步骤2    assert False    print(f&#x27;步骤2：完成搜索：&#123;step_param&#125; 功能&#x27;)#@pytest.mark.parametrize(&#x27;param1&#x27;,[&#x27;pytest&#x27;,&#x27;allure&#x27;])@pytest.mark.parametrize(&#x27;param1&#x27;,[&#x27;pytest&#x27;,&#x27;allure&#x27;],ids=[&#x27;search pytest&#x27;,&#x27;search allure&#x27;])def test_parameterize_with_id(param1):    simple_step2(param1)@pytest.mark.parametrize(&#x27;param1&#x27;,[True,False])@pytest.mark.parametrize(&#x27;param2&#x27;,[&#x27;Value 1&#x27;,&#x27;Value 2&#x27;])def test_parameterize_with_two_params(param1,param2):    simple_step1(param1,param2)@pytest.mark.parametrize(&#x27;param2&#x27;,[&quot;Pytest&quot;,&quot;unittest&quot;])@pytest.mark.parametrize(&#x27;param1,param3&#x27;,[[1,2]])def test_parameterize_with_uneven_value_sets(param1,param2,param3):    simple_step1(param1,param3)    simple_step2(param2)\n\n\n使用with allure.step() 添加测试步骤\n\n@allure.title(&#x27;搜索用例:&#123;searchkey&#125;&#x27;)@pytest.mark.parametrize(&#x27;searchkey&#x27;,[&#x27;pytest&#x27;,&#x27;allure&#x27;,&#x27;unittest&#x27;])def test_step_in_method(searchkey):    with allure.step(&#x27;测试步骤1：打开页面&#x27;):        print(&#x27;操作 a&#x27;)        print(&#x27;操作 b&#x27;)    with allure.step(f&#x27;测试步骤2：搜索 &#123;searchkey&#125;&#x27;):        print(f&#x27;搜索操作: &#123;searchkey&#125;&#x27;)    with allure.step(&#x27;测试步骤3：断言&#x27;):        assert False\n\nallure2 报告中添加用例链接\n@allure.link(url,name)添加一个普通的link链接\n\n# 1. 添加一个普通的 link 链接@allure.link(&#x27;https://ceshiren.com/t/topic/15860&#x27;)def test_with_link():    pass# 2. 添加一个普通的 link 链接, 添加name别名@allure.link(&#x27;https://ceshiren.com/t/topic/15860&#x27;,name=&quot;这是一个链接&quot;)def test_with_link_name():    pass\n\n\n@allure.testcase（url,name) 添加一个用例管理系统连接\n\n# 3. 添加用例管理系统链接TEST_CASE_LING = &quot;www.baidu.com&quot;@allure.testcase(TEST_CASE_LING,&quot;用例管理系统&quot;)def test_with_testcase_link():    pass\n\n\n@allure.issue(url,name) 添加bug管理系统连接\n\n# 4. 添加 bug管理系统链接# pytest test_allure_link.py --alluredir=./results --allure-link-pattern=issue:https://ceshiren.com/t/topic/&#123;&#125;@allure.issue(&quot;15860&quot;,&#x27;bug管理系统&#x27;)def test_with_issue():    pass\n\nallure2 报告中添加用例分类\n@allure.epic:敏捷里面的概念，定义史诗(相当于需求)，往下是feature\n\npytest test_allure_feature.py --alluredir=./results --allure-epics=demand1\n\n\n@allure.feature:功能点的描述，理解成模块，往下是story\n\npytest test_allure_feature.py --alluredir=./results --allure-features=demand1_function2\n\n\n@allure.story:故事story是feature的子集\n\npytest test_allure_feature.py --alluredir=./results --allure-stories=demand1_function2_sub_function3pytest test_allure_feature.py --alluredir=./results --allure-stories=demand1_function2_sub_function3,demand2_function1_sub_function3\n\n\n需求1+需求2-功能模块1-子功能模块3\n\npytest test_allure_feature.py --alluredir=./results --allure-epics=demand1 --allure-stories=demand2_function1_sub_function3\n\n报告中添加用例描述\n使用装饰器 @allure.description()传递一个字符\n\n@allure.description(&#x27;&#x27;&#x27;通过@allure.description()传递多行描述第一行第二行&#x27;&#x27;&#x27;)def test_description_provide_string():    assert True\n\n\n使用装饰器 @allure.description_html传递一段HTML文本来描述测试用例\n\n@allure.description_html(&#x27;&#x27;&#x27;&lt;div id=&quot;lg&quot; class=&quot;s-p-top&quot;&gt;&lt;img id=&quot;s_lg_img&quot; class=&quot;s_lg_img_gold_show&quot; src=&quot;//www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot; width=&quot;270&quot; height=&quot;129&quot; onerror=&quot;this.src=&#x27;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1-66368c33f8.png&#x27;;this.onerror=null;&quot; usemap=&quot;#mp&quot; title=&quot;&quot; cursor=&quot;default&quot;&gt;&lt;img id=&quot;s_lg_img_new&quot; class=&quot;s_lg_img_gold_showre&quot; src=&quot;//www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot; width=&quot;270&quot; height=&quot;129&quot; onerror=&quot;this.src=&#x27;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1-66368c33f8.png&#x27;;this.onerror=null;&quot; usemap=&quot;#mp&quot; title=&quot;&quot; cursor=&quot;default&quot;&gt;&lt;img hidefocus=&quot;true&quot; id=&quot;s_lg_img_aging&quot; class=&quot;index-logo-aging-tools&quot; src=&quot;//www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&quot; width=&quot;270&quot; height=&quot;129&quot; onerror=&quot;this.src=&#x27;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1-66368c33f8.png&#x27;;this.onerror=null;&quot; usemap=&quot;#mp&quot; title=&quot;&quot; cursor=&quot;default&quot;&gt;&lt;map name=&quot;mp&quot; id=&quot;s_mp&quot;&gt;&lt;area style=&quot;cursor:pointer;outline:none;&quot; shape=&quot;rect&quot; coords=&quot;0,0,270,129&quot; href=&quot;//www.baidu.com/s?wd=%E7%99%BE%E5%BA%A6%E7%83%AD%E6%90%9C&amp;sa=ire_dl_gh_logo_texing&amp;rsv_dl=igh_logo_pc&quot; target=&quot;_blank&quot; title=&quot;点击一下，了解更多&quot; onmousedown=&quot;&quot;return&quot; ns_c(&#123;&#x27;fm&#x27;:&#x27;behs&#x27;,&#x27;tab&#x27;:&#x27;bdlogo&#x27;&#125;)&quot;=&quot;&quot;&gt;&lt;/map&gt;&lt;/div&gt;&#x27;&#x27;&#x27;)def test_description_html():    assert True\n\n\n直接在测试用例方法中通过编写文档注释的方法来添加描述\n\ndef test_description_dostring():    &quot;&quot;&quot;    直接写在测试用例方法中    通过编写文档注释的方法    来添加描述    &quot;&quot;&quot;    assert 1+1 == 2\n\n\n用例代码内部动态添加描述信息\n\n@allure.description(&#x27;这个描述将被替换&#x27;)def test_dynamic_description():    assert 1+1 == 2    allure.dynamic.description(&#x27;替换后的文本信息&#x27;)@allure.description(&#x27;这个描述将被替换&#x27;)def test_dynamic_description_html():    assert 1+1 == 2    allure.dynamic.description_html(&#x27;&#x27;&#x27;    替换后的html信息    &lt;div id=&quot;lg&quot; class=&quot;s-p-top&quot;&gt;&lt;img id=&quot;s_lg_img&quot; class=&quot;s_lg_img_gold_show&quot; src=&quot;//www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot; width=&quot;270&quot; height=&quot;129&quot; onerror=&quot;this.src=&#x27;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1-66368c33f8.png&#x27;;this.onerror=null;&quot; usemap=&quot;#mp&quot; title=&quot;&quot; cursor=&quot;default&quot;&gt;&lt;img id=&quot;s_lg_img_new&quot; class=&quot;s_lg_img_gold_showre&quot; src=&quot;//www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot; width=&quot;270&quot; height=&quot;129&quot; onerror=&quot;this.src=&#x27;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1-66368c33f8.png&#x27;;this.onerror=null;&quot; usemap=&quot;#mp&quot; title=&quot;&quot; cursor=&quot;default&quot;&gt;&lt;img hidefocus=&quot;true&quot; id=&quot;s_lg_img_aging&quot; class=&quot;index-logo-aging-tools&quot; src=&quot;//www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&quot; width=&quot;270&quot; height=&quot;129&quot; onerror=&quot;this.src=&#x27;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1-66368c33f8.png&#x27;;this.onerror=null;&quot; usemap=&quot;#mp&quot; title=&quot;&quot; cursor=&quot;default&quot;&gt;&lt;map name=&quot;mp&quot; id=&quot;s_mp&quot;&gt;&lt;area style=&quot;cursor:pointer;outline:none;&quot; shape=&quot;rect&quot; coords=&quot;0,0,270,129&quot; href=&quot;//www.baidu.com/s?wd=%E7%99%BE%E5%BA%A6%E7%83%AD%E6%90%9C&amp;sa=ire_dl_gh_logo_texing&amp;rsv_dl=igh_logo_pc&quot; target=&quot;_blank&quot; title=&quot;点击一下，了解更多&quot; onmousedown=&quot;&quot;return&quot; ns_c(&#123;&#x27;fm&#x27;:&#x27;behs&#x27;,&#x27;tab&#x27;:&#x27;bdlogo&#x27;&#125;)&quot;=&quot;&quot;&gt;&lt;/map&gt;&lt;/div&gt;    &#x27;&#x27;&#x27;)\n\nallure2报告中添加用例优先级\n应用场景，用例执行时，希望按照严重级别执行测试用例\n解决：为每个用例添加一个等级的装饰器 @allure.severity\n类上添加的级别，对类中没有添加级别的方法生效\nallure对严重级别定义分为5个\n\n\nBlocker级别：中断缺陷（客户端程序无响应，无法执行下一步操作）\nCritical级别：临界缺陷（功能点缺失）\nNormal级别：普通缺陷（数值计算错误）\nMinor级别：次要缺陷（界面错误与UI需求不符）\nTrivial级别：轻微缺陷（必输项无提示，或提示不规范）\n\n\n运行时添加命令行参数 –allure-serverities\n\nimport alluredef test_with_no_severity_label():    assert True@allure.severity(allure.severity_level.TRIVIAL)def test_with_trival_severity():    assert True@allure.severity(allure.severity_level.NORMAL)def test_with_normal_severity():    assert True@allure.severity(allure.severity_level.NORMAL)class TestClassWithNormalSeverity:    def test_inside_class_with_no_severity(self):        assert True    @allure.severity(allure.severity_level.CRITICAL)    def test_inside_class_with_critical_severity(self):        assert True    @allure.severity(allure.severity_level.MINOR)    def test_inside_class_with_minor_severity(self):        assert True    @allure.severity(allure.severity_level.BLOCKER)    def test_inside_class_with_blocker_severity(self):        assert True$: pytest test_allure_serverity.py --alluredir=./results --allure-severities=rmal$: allure serve ./results/ -h 172.17.0.5 -p 20000\n\nallure2报告中添加用例支持tag标签import pytestimport allure# 当用例通过时标记 xfail@pytest.mark.xfail(condition=lambda :True,reason=&#x27;这是一个预期失败的用例&#x27;)def test_xfail_expected_failure():    assert False# 当用例通过时标记 xpass@pytest.mark.xfaildef test_xfail_unexpected_pass():    assert True# 跳过用例@pytest.mark.skipif(&#x27;2+2!=5&#x27;,reason=&#x27;当条件触发时，这个用例被跳过 @pytest.mark.skipif&#x27;)def test_skip_by_triggered_condition():    assert True@pytest.fixture()def fun1():    print(&#x27;这是fixture fun1 的前置动作&#x27;)    yield    print(&#x27;这是fixture fun1 的后置动作&#x27;)@pytest.fixture()def func(request):    # 前置动作 -- 相当于setup    print(&quot;这是一个fixture 前置方法&quot;)    # 后置动作 -- 相当于teardown    # 定义一个终结器，teardown动作放在终结器中    def over():        print(&quot;session 级别终结器&quot;)      # 添加终结器，在执行完测试用例之后会执行终结器中的内容    request.addfinalizer(over)class TestClass(object):    def test_with_scopped_finalizers(self,func,fun1):        print(&#x27;测试用例&#x27;)\n\nallure2 报告中支持记录失败重试功能\n重试功能可以使用pytest相关插件 pytest-rerunfailures\n\n# pip install pytest-rerunfailures# reruns = 2 失败重试次数# reruns_delay=2 失败重试间隔@pytest.mark.flaky(reruns=3,reruns_delay=1.5)def test_rerun2():    assert False\n\nAllure2_L3Allure2 报告中添加附件-图片\nallure.attach.file(source,name,attachment_type,extension)\nsource：文件路径\nname：附件名字\nattachment_type：附件类型，是allure.attachment_type其中的一种\nextension：附件的扩展名\n\n\n\nimport allureimport loggingclass TestWithAttach:    def test_pic(self):        logging.info(&#x27;添加一个图片&#x27;)        allure.attach.file(&#x27;./img/pic1.png&#x27;,                           name=&#x27;这是一个测试图片&#x27;,                           attachment_type=allure.attachment_type.PNG,                           extension=&#x27;png&#x27;)\n\n\nallure.attach(body,name&#x3D;None,attachment_type&#x3D;None,extension&#x3D;None)\nbody：要写入附件的内容\nname：附件名字\nattachment_type：附件类型，是allure.attachment_type其中的一种\nextension：附件的扩展名\n\n\n\ndef test_pic1(self):    logging.info(&#x27;这是通过 allure.attach 添加的一个测试图片&#x27;)    with open(&#x27;./img/pic1.png&#x27;,mode=&#x27;rb&#x27;) as f:        # 文本的内容        file = f.read()        # 将文件内容添加到allure.attach()方法中        allure.attach(file,name=&#x27;页面截图&#x27;,attachment_type=allure.attachment_type.PNG)\n\nAllure2 报告中添加附件-日志\n配置工具类\n\n# 创建一个日志模块 log_util.pyimport syssys.path.append(&#x27;./&#x27;)import loggingimport osfrom logging.handlers import RotatingFileHandler# 绑定句柄到logger对象logger = logging.getLogger(__name__)# 获取当前工具文件所在的路径root_path = os.path.dirname(os.path.abspath(__file__))# 拼接当前要输出的日志的路径log_dir_path = os.sep.join([root_path,f&#x27;/logs&#x27;])if not os.path.isdir(log_dir_path):    os.mkdir(log_dir_path)# 创建日志记录器，指明日志保存路径，每个日志的大小，保存的上限file_log_handler = RotatingFileHandler(os.sep.join([log_dir_path,&#x27;log.log&#x27;]),maxBytes=1024*1024,backupCount=10,encoding=&#x27;utf-8&#x27;)# 设置日志的格式data_string = &#x27;%Y-%m-%d %H:%M:%S&#x27;formatter = logging.Formatter(    &#x27;[%(asctime)s] [%(levelname)s] [%(filename)s]/[line: %(lineno)d]/[%(funcName)s] [%(message)s]&#x27;,data_string)# 日志输出到控制台的句柄stream_handler = logging.StreamHandler()# 将日志记录器指定日志的格式file_log_handler.setFormatter(formatter)stream_handler.setFormatter(formatter)# 为全局的日志工具对象添加日志记录器# 绑定句柄到logger对象logger.addHandler(stream_handler)logger.addHandler(file_log_handler)# 设置日志输出级别logger.setLevel(level=logging.INFO)\n\nimport syssys.path.append(&#x27;../../tools&#x27;)from logTools.log_util import loggerimport allure@allure.epic(&#x27;需求1&#x27;)@allure.feature(&#x27;功能模块1&#x27;)class TestEpic:    @allure.story(&#x27;子功能模块1&#x27;)    @allure.title(&#x27;用例1&#x27;)    def test_case1(self):        logger.info(&#x27;这是TestEpic 第1条用例&#x27;)        print(&#x27;用例1&#x27;)\n\n\n禁用日志–allure-no-capture\n\nAllure2 报告中添加附件-html\n语法：allure.attach(body,name&#x3D;None,attachment_type&#x3D;None,extension&#x3D;None)\nbody：要写入附件的内容\nname：附件名字\nattachment_type：附件类型，是allure.attachment_type其中的一种\nextension：附件的扩展名\n\n\n\nimport allureimport syssys.path.append(&#x27;../../tools&#x27;)from logTools.log_util import loggerclass TestAllureHtml:    def test_html_part(self):        logger.info(&#x27;这是添加一个html 部分代码的测试用例&#x27;)        allure.attach(&#x27;&#x27;&#x27;        &lt;div class=&quot;boiling-title_ZrdUH&quot;&gt;&lt;img src=&quot;https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=423474926,1801248814&amp;fm=179&amp;app=35&amp;f=PNG?w=518&amp;h=136&amp;s=ADFEEB16D210A1925C7BF2EA0300E03E&quot;&gt;&lt;/div&gt;        &#x27;&#x27;&#x27;,name=&#x27;allure.attach(name=html片段)&#x27;,attachment_type=allure.attachment_type.HTML,extension=&#x27;extension:html&#x27;)\n\nAllure2_L4allure2报告定制\n定制页面logo\n\n\n获取安装路径\n\nroot@3832dba7df75:~/code/vscode-server# ll /root/downloads/alluretotal 24drwxr-xr-x  6 root root 4096 Feb  7 11:41 ./drwxr-xr-x  3 root root 4096 Mar 11 10:55 ../drwxr-xr-x  2 root root 4096 Feb  7 11:41 bin/drwxr-xr-x  2 root root 4096 Feb  7 11:41 config/drwxr-xr-x  3 root root 4096 Mar 11 09:25 lib/drwxr-xr-x 12 root root 4096 Mar 11 09:25 plugins/root@3832dba7df75:~/code/vscode-server# \n\n\n修改config下的allure.yml文件\n\nplugins:  - junit-xml-plugin  - xunit-xml-plugin  - trx-plugin  - behaviors-plugin  - packages-plugin  - screen-diff-plugin  - xctest-plugin  - jira-plugin  - xray-plugin  - custom-logo-plugin\n\n\nallure.yml修改后，在plugins下custom-logo-plugin内的static文件夹下修改style.css文件中的url，替换需要的文件\n\n.side-nav__brand &#123;  background: url(&#x27;custom-logo.svg&#x27;) no-repeat left center !important;  margin-left: 10px;&#125;\n\n\n修改标题内容\n\n\n修改style.css文件\n\n/* 去掉logo后面的Allure文本 */.side-nav__brand-text&#123;  display: none;&#125;/* 设置logo后面的字体大小与样式 */.side-nav__brand::after&#123;  content: &quot;测试俱乐部&quot;;  margin-left: 18px;  height: 20px;  font-family: Arial, Helvetica, sans-serif;  font-size: 13px;&#125;\n","categories":["Python生态","测试框架"],"tags":["Pytest","Allure"]},{"title":"官方依赖下载","url":"/cmchtge9t0050negb36z1boqi/","content":"项目介绍本项目旨在解决日常离线环境下安装Python依赖库包的问题\n环境打包步骤\n提取依赖环境\n\npip install pipreqs# 生成 requirements.txtpipreqs . --force\n\n\n联网电脑安装依赖\n\npip install -r requirements.txt\n\n3.1 依据下载文件下载依赖包\npip download -r .\\requirements.txt -d wetools_require-r requirements.txt 表示根据需求文件下载包。-d wetools_require 将包下载到名为 wetools_require 的目录中。\n\n3.2 下载单个依赖包\npip download pyinstaller -d lib_pyinstallerpip download pandas -d lib_pandaspip download pywin32 -d lib_win32compip download auto-py-to-exe -d lib_auto_py_to_exepip download pysimplegui -d lib_pysimplegui\n\n\n在离线电脑上安装\n\npip install --no-index --find-links=wetools_require -r requirements.txt--no-index 禁止从 PyPI 在线检索。--find-links=wetools_require 指定本地的包目录。-r requirements.txt 表示按照需求文件安装。pip install --no-index --find-links=lib_pandas pandas\n","categories":["Python生态"],"tags":["libs"]},{"title":"Parse","url":"/cmchtge9t0053negbb5oc4r3i/","content":"Parse 学习\n正则表达式的替代品\n\n安装pip install parse\n\n特性与用法parse 的 API 与Python Regular Expressions近似，主要就是 parse, search 及 findall 这三个方法。一些基础的使用可以通过 parse 的文档来了解。\npattern 的格式parse 的格式与 python format syntas 非常类似。可以通过{}或者{field_name}来对匹配的文本进行捕获。\n测试样例简单使用res = parse(&quot;It&#x27;s &#123;&#125;, I love it!&quot;, &quot;It&#x27;s spam, I love it!&quot;)print(res, type(res))print(res[0])\n\n命名提取res = parse(&quot;It&#x27;s &#123;food&#125;, I love it!&quot;, &quot;It&#x27;s spam, I love it!&quot;)print(f&quot;res: &#123;res&#125;\\nres[&#x27;food&#x27;]: &#123;res[&#x27;food&#x27;]&#125;,\\ntype(res): &#123;type(res)&#125;&quot;)\n\nres: &lt;Result () &#123;&#x27;food&#x27;: &#x27;spam&#x27;&#125;&gt;res[&#x27;food&#x27;]: spam,type(res): &lt;class &#x27;parse.Result&#x27;&gt;\n\n类型转换 指定提取的数据类型print(&quot;=&quot; * 20)res = search(&quot;Age: &#123;number:d&#125;\\n&quot;, &quot;Name: Rufus\\nAge: 42\\nColor: red\\n&quot;)print(    f&quot;res: &#123;res&#125;\\nres[&#x27;number&#x27;]: &#123;res[&#x27;number&#x27;]&#125;,\\ntype(res[&#x27;number&#x27;]): &#123;type(res[&#x27;number&#x27;])&#125;&quot;)\n\nres: &lt;Result () &#123;&#x27;number&#x27;: 42&#125;&gt;res[&#x27;number&#x27;]: 42,type(res[&#x27;number&#x27;]): &lt;class &#x27;int&#x27;&gt;\n\n测试脚本# coding=utf-8&quot;&quot;&quot;@File   : PythonStudy.py@Time   : 2025/01/16 09:42:34@Author : Sunmy@Description: Parse学习&quot;&quot;&quot;from parse import *# 简单匹配res = parse(&quot;It&#x27;s &#123;&#125;, I love it!&quot;, &quot;It&#x27;s spam, I love it!&quot;)# print(res, type(res))# print(res[0])&quot;&quot;&quot;&lt;Result (&#x27;spam&#x27;,) &#123;&#125;&gt; &lt;class &#x27;parse.Result&#x27;&gt;spam&quot;&quot;&quot;print(&quot;=&quot; * 20)# 命名匹配res = parse(&quot;It&#x27;s &#123;food&#125;, I love it!&quot;, &quot;It&#x27;s spam, I love it!&quot;)print(f&quot;res: &#123;res&#125;\\nres[&#x27;food&#x27;]: &#123;res[&#x27;food&#x27;]&#125;,\\ntype(res): &#123;type(res)&#125;&quot;)# 类型转换 指定提取的数据类型print(&quot;=&quot; * 20)res = search(&quot;Age: &#123;number:d&#125;\\n&quot;, &quot;Name: Rufus\\nAge: 42\\nColor: red\\n&quot;)print(    f&quot;res: &#123;res&#125;\\nres[&#x27;number&#x27;]: &#123;res[&#x27;number&#x27;]&#125;,\\ntype(res[&#x27;number&#x27;]): &#123;type(res[&#x27;number&#x27;])&#125;&quot;)print(&quot;=&quot; * 20)log_line = &quot;2023-10-05 12:34:56 INFO User logged in: username=alice&quot;pattern = &quot;&#123;date&#125; &#123;timestamp&#125; &#123;level&#125; &#123;message&#125;&quot;result = parse(pattern, log_line)print(result[&quot;date&quot;])  # 输出: 2023-10-05 12:34:56print(result[&quot;timestamp&quot;])  # 输出: 2023-10-05 12:34:56print(result[&quot;level&quot;])  # 输出: INFOprint(result[&quot;message&quot;])  #\n","categories":["Python生态"],"tags":["Parse"]},{"title":"Pyparsing","url":"/cmchtge9u0056negb1j649p8i/","content":"PyParsing学习安装pip install pyparsing\n\n架构与组成基本元素\nLiteral: 匹配固定的字符串。\nWord: 匹配由特定字符组成的单词。\nChars: 匹配一组字符中的任意一个。\nnums: 预定义的字符集，表示数字（0-9）。\nalphas: 预定义的字符集，表示字符（a-zA-Z）。\nalphanums: 预定义的字符集，表述字母和数字（a-zA-Z0-9）\nCombine: 将多个解析结果合并为一个字符串。\nGroup：将多个解析结果分组。\n\n测试脚本# 导入 pyparsing 模块中的必要类from pyparsing import (    Word,  # 用于匹配单词或特定字符集合    nums,  # 预定义的字符集，表示数字（0-9）    alphas,  # 预定义的字符集，表示字母（a-zA-Z）    Literal,  # 用于匹配固定的字符串    SkipTo,  # 跳过所有内容，直到匹配到指定的模式    Optional,  # 表示可选部分    Combine,  # 用于连接多个模式)def analysis_logs(log_content):    &quot;&quot;&quot;    解析日志内容    :param log_content: 日志内容    :return: None    &quot;&quot;&quot;    # 定义语法规则    # 匹配测试用例的 ID（由数字组成）    template_test_case_id = Word(nums)    # 匹配测试用例的名称（由字母、数字和下划线组成）    template_test_case_name = Word(alphas + nums + &quot;_&quot;)    # 匹配固定的字符串 &quot;starting ...!&quot;    template_starting = Literal(&quot;starting ...!&quot;)    # 匹配结果部分的分隔符（&quot;!!!&quot; 或 &quot;@@@&quot;）    template_result_sep = Literal(&quot;!!!&quot;) | Literal(&quot;@@@&quot;)    # 匹配结果标志（由字母组成，如 &quot;PASS&quot; 或 &quot;FAIL&quot;）    template_result_flag = Word(alphas)    # 定义完整模式    pattern = (        Literal(&quot;Test Case&quot;)  # 匹配固定的字符串 &quot;Test Case&quot;        + template_test_case_id(            &quot;case_exec_id&quot;        )  # 匹配测试用例的 ID，并将其命名为 case_exec_id        + &quot;:&quot;  # 匹配冒号        + template_test_case_name(            &quot;case_name&quot;        )  # 匹配测试用例的名称，并将其命名为 case_name        + template_starting  # 匹配固定的字符串 &quot;starting ...!&quot;        + SkipTo(template_result_sep | &quot;Test Case&quot;)(            &quot;content&quot;        )  # 匹配内容，直到遇到分隔符或下一个测试用例        + Optional(  # 可选部分：匹配 RESULT 部分            template_result_sep(&quot;result_sep1&quot;)            + Literal(&quot;RESULT: Test Case&quot;)            + template_test_case_id(&quot;case_exec_res_id&quot;)            + &quot;:&quot;            + template_test_case_name(&quot;case_res_name&quot;)            + template_result_flag(&quot;template_result_flag&quot;)            + template_result_sep(&quot;result_sep2&quot;)        )    )    # 解析日志内容（匹配所有记录）    parsed_results = pattern.searchString(log_content)    # 输出解析结果    # 输出解析结果    for i, parsed_result in enumerate(parsed_results, 1):        print(f&quot;Test Case &#123;i&#125;:&quot;)        print(f&quot;\\tTest Case ID: &#123;parsed_result[&#x27;case_exec_id&#x27;]&#125;&quot;)        print(f&quot;\\tTest Case Name: &#123;parsed_result[&#x27;case_name&#x27;]&#125;&quot;)        # 检查是否有 RESULT 部分        if &quot;result_sep1&quot; in parsed_result:            print(f&quot;\\tResult Separator 1: &#123;parsed_result[&#x27;result_sep1&#x27;]&#125;&quot;)            print(f&quot;\\tResult Separator 2: &#123;parsed_result[&#x27;result_sep2&#x27;]&#125;&quot;)            print(f&quot;\\tTest Result Flag: &#123;parsed_result[&#x27;template_result_flag&#x27;]&#125;&quot;)        else:            print(&quot;\\tResult: Incomplete (No RESULT section found)&quot;)        # 检查 content 是否为空        content = parsed_result[            &quot;content&quot;        ].strip()  # 使用 strip() 去掉开头和结尾的空白字符        if content:            print(f&quot;\\tContent:\\n&#123;content&#125;&quot;)  # 输出去掉空行后的内容        else:            print(&quot;\\tContent: 无&quot;)        print(&quot;=&quot; * 40)from pyparsing import Literal, Word, nums, Combine, StringEnddef analysis_logs_login(log_content):    &quot;&quot;&quot;    解析日志内容，统计每天的登录次数    :param log_content: 日志内容    :return: 每天的登录次数（字典形式）    &quot;&quot;&quot;    # 定义语法规则    template_starting = Literal(&quot;use time: &quot;)  # 匹配固定的字符串 &quot;use time: &quot;    template_date = Combine(        Word(nums, exact=4) + &quot;-&quot; + Word(nums, exact=2) + &quot;-&quot; + Word(nums, exact=2)    )  # 匹配日期（YYYY-MM-DD）    template_time = Combine(        Word(nums, exact=2) + &quot;:&quot; + Word(nums, exact=2) + &quot;:&quot; + Word(nums, exact=2)    )  # 匹配时间（HH:MM:SS）    # 定义完整模式    pattern = (        template_starting  # 匹配固定的字符串 &quot;use time: &quot;        + template_date(&quot;login_date&quot;)  # 匹配登录日期，并将其命名为 login_date        + &quot; &quot;  # 匹配空格        + template_time(&quot;login_time&quot;)  # 匹配登录时间，并将其命名为 login_time        + StringEnd()  # 确保匹配到行尾    )    # 逐行解析日志内容    login_counts = &#123;&#125;  # 用于存储每天的登录次数    for line in log_content.splitlines():  # 按行分割日志内容        line = line.strip()  # 去除行首尾的空格和换行符        if not line:  # 跳过空行            continue        parsed_result = pattern.searchString(line)  # 解析每一行        print(f&quot;解析行：&#123;line&#125; -&gt; 解析结果：&#123;parsed_result&#125;&quot;)  # 打印每一行的解析结果        if parsed_result:            login_date = parsed_result[0].login_date  # 提取登录日期            if login_date in login_counts:                login_counts[login_date] += 1  # 如果日期已存在，增加计数            else:                login_counts[login_date] = 1  # 如果日期不存在，初始化计数    return login_countsif __name__ == &quot;__main__&quot;:    # 示例日志内容    log_content = &quot;&quot;&quot;use time: 2025-01-13 20:11:33use time: 2025-01-13 20:11:42use time: 2025-01-13 22:42:21use time: 2025-01-13 22:42:31use time: 2025-01-14 22:38:16use time: 2025-01-14 22:38:25use time: 2025-01-14 23:02:20use time: 2025-01-15 11:13:09use time: 2025-01-15 11:13:59use time: 2025-01-15 11:16:25use time: 2025-01-15 11:33:54use time: 2025-01-15 11:34:55use time: 2025-01-15 11:36:09use time: 2025-01-15 11:36:23use time: 2025-01-15 11:37:54use time: 2025-01-15 11:38:30use time: 2025-01-15 13:58:01use time: 2025-01-15 13:58:40use time: 2025-01-15 14:00:26use time: 2025-01-15 14:01:57use time: 2025-01-15 14:03:43use time: 2025-01-15 14:05:17use time: 2025-01-15 17:56:19use time: 2025-01-15 18:53:24use time: 2025-01-15 19:00:06use time: 2025-01-15 19:04:23use time: 2025-01-15 19:18:19use time: 2025-01-15 19:21:34use time: 2025-01-15 19:30:49use time: 2025-01-15 19:33:37use time: 2025-01-15 19:42:22use time: 2025-01-15 20:03:49use time: 2025-01-15 20:08:52use time: 2025-01-15 20:44:49&quot;&quot;&quot;    # 解析登录日志    parsed_results = analysis_logs_login(log_content)    print(parsed_results)# if __name__ == &quot;__main__&quot;:#     # 读取日志文件#     with open(&quot;Temp/test_qrs.log&quot;, &quot;r&quot;) as f:#         log_content = f.read()  # 将日志文件内容读取到 log_content 变量中#     # analysis_logs(log_content)#     # 读取登录日志文件#     with open(&quot;Temp/test_login.txt&quot;, &quot;r&quot;) as f:#         log_content = f.read()  # 将日志文件内容读取到 log_content 变量中#     print(log_content)#     print(&quot;====================&quot;)#     # 解析登录日志#     parsed_results = analysis_logs_login(log_content)#     print(parsed_results)\n","categories":["Python生态"],"tags":["Pyparsing"]},{"title":"Java","url":"/cmchtge9u0059negbcrqxdkgf/","content":"创建文件夹，存放解压后的jdk文件[root@Centos8 local]# pwd/usr/local[root@Centos8 local]# mkdir java[root@Centos8 local]# cd java[root@Centos8 java]# pwd/usr/local/java\n\n上传从JDK官网下载号的压缩包文件[root@Centos8 java]# ll-rw-r--r-- 1 root root 145424384 9月  20 08:56 jdk-8u341-linux-x64.tar.gz\n\n解压jdk安装包[root@Centos8 java]# tar -zxvf jdk-8u341-linux-x64.tar.gz(jdk安装包)\n\n将解压后的jdk重命名[root@Centos8 java]# mv jdk1.8.0_341 jdk8\n\n给etc文件夹下的profile文件添加java运行环境[root@Centos8 java]# vim /etc/profile\n\n在文件末尾添加java运行环境JAVA_HOME=/usr/local/java/jdk8CALSS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JAR_HOME/libPATH=$JAVA_HOME/bin:$PATHexport JAVA_HOME CLASS_PATH PATH\n\n将添加在文件中的配置信息马上生效[root@Centos8 local]# source /etc/profile\n\n检查是否安装成功[root@Centos8 java]# java -versionjava version &quot;1.8.0_341&quot;Java(TM) SE Runtime Environment (build 1.8.0_341-b10)Java HotSpot(TM) 64-Bit Server VM (build 25.341-b10, mixed mode)[root@Centos8 java]#\n","categories":["Java生态"],"tags":["Java"]},{"title":"Maven","url":"/cmchtge9v005cnegb9gu0h8y7/","content":"创建文件夹，存放下载的maven压缩包[root@Centos8 ~]# cd /usr/local/[root@Centos8 local]# mkdir maven[root@Centos8 local]# cd maven/[root@Centos8 maven]# ll总用量 0[root@Centos8 maven]# pwd/usr/local/maven\n\n从官网下载maven压缩包[root@Centos8 maven]# wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz[root@Centos8 maven]# ll总用量 8476-rw-r--r-- 1 root root 8676320 6月   7 00:45 apache-maven-3.8.6-bin.tar.gz\n\n解压[root@Centos8 maven]# tar -zxvf apache-maven-3.8.6-bin.tar.gz[root@Centos8 maven]# ll总用量 8476drwxr-xr-x 6 root root      99 9月  20 11:41 apache-maven-3.8.6-rw-r--r-- 1 root root 8676320 6月   7 00:45 apache-maven-3.8.6-bin.tar.gz\n\n编辑配置文件，添加下面变量，配置maven环境#MAVEN_ENVMAVEN_HOME=/usr/local/maven/apache-maven-3.8.6export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125;[root@Centos8 maven]# vim /etc/profile[root@Centos8 maven]# pwd/usr/local/maven[root@Centos8 maven]# vim /etc/profile\n\n重新加载配置文件[root@Centos8 maven]# source /etc/profile\n\n测试maven是否配置成功[root@Centos8 maven]# mvn -vApache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)Maven home: /usr/local/maven/apache-maven-3.8.6Java version: 1.8.0_341, vendor: Oracle Corporation, runtime: /usr/local/java/jdk8/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;4.18.0-193.14.2.el8_2.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;\n\n编辑配置文件，修改镜像位置和仓库位置&lt;mirror&gt;      &lt;id&gt;nexus-aliyun&lt;/id&gt;      &lt;mirrorOf&gt;*,!jeecg,!jeecg-snapshots&lt;/mirrorOf&gt;      &lt;name&gt;Nexus aliyun&lt;/name&gt;      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;  &lt;localRepository&gt;/usr/local/maven/repository&lt;/localRepository&gt;\n\n[root@Centos8 maven]# vim /usr/local/maven/apache-maven-3.8.6/conf/settings.xml[root@Centos8 maven]# mkdir repository[root@Centos8 maven]# ll总用量 8476drwxr-xr-x 6 root root      99 9月  20 11:41 apache-maven-3.8.6-rw-r--r-- 1 root root 8676320 6月   7 00:45 apache-maven-3.8.6-bin.tar.gzdrwxr-xr-x 2 root root       6 9月  20 11:51 repository[root@Centos8 maven]# pwd/usr/local/maven[root@Centos8 maven]# mvn -vApache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)Maven home: /usr/local/maven/apache-maven-3.8.6Java version: 1.8.0_341, vendor: Oracle Corporation, runtime: /usr/local/java/jdk8/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;4.18.0-193.14.2.el8_2.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;[root@Centos8 maven]#\n","categories":["Java生态"],"tags":["Maven"]},{"title":"Go","url":"/cmchtge9w005fnegb4eqmcbqt/","content":"下载Go压缩包[root@Centos8 lx]# pwd/opt/lx[root@Centos8 lx]# wget https://golang.google.cn/dl/go1.19.1.linux-amd64.tar.gz--2022-09-20 16:44:52--  https://golang.google.cn/dl/go1.19.1.linux-amd64.tar.gz正在解析主机 golang.google.cn (golang.google.cn)... 220.181.174.226正在连接 golang.google.cn (golang.google.cn)|220.181.174.226|:443... 已连接。已发出 HTTP 请求，正在等待回应... 302 Found位置：https://dl.google.com/go/go1.19.1.linux-amd64.tar.gz [跟随至新的 URL]--2022-09-20 16:44:52--  https://dl.google.com/go/go1.19.1.linux-amd64.tar.gz正在解析主机 dl.google.com (dl.google.com)... 220.181.174.33正在连接 dl.google.com (dl.google.com)|220.181.174.33|:443... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：148820241 (142M) [application/x-gzip]正在保存至: “go1.19.1.linux-amd64.tar.gz”go1.19.1.linux-amd64. 100%[========================&gt;] 141.93M  11.7MB/s  用时 11s2022-09-20 16:45:04 (12.6 MB/s) - 已保存 “go1.19.1.linux-amd64.tar.gz” [148820241/148820241])[root@Centos8 lx]# lsgo1.19.1.linux-amd64.tar.gz  lineuse  linkbench  yet-another-bench-script\n\n解压Go压缩包[root@Centos8 lx]# tar -zxvf go1.19.1.linux-amd64.tar.gzgo/go/CONTRIBUTING.mdgo/LICENSE...[root@Centos8 lx]# ll总用量 145336drwxr-xr-x 8 root root       199 9月   1 01:41 go-rw-r--r-- 1 root root 148820241 9月   7 00:18 go1.19.1.linux-amd64.tar.gzdrwxr-xr-x 2 root root       118 9月  20 16:32 lineusedrwxr-xr-x 6 root root       174 9月  20 13:20 linkbenchdrwxr-xr-x 3 root root       117 9月  16 15:00 yet-another-bench-script\n\n移动至用户的程序目录[root@Centos8 lx]# mv go /usr/local\n\n添加环境到配置文件export GOROOT=/usr/local/goexport PATH=$PATH:$GOROOT/bin[root@Centos8 lx]# vim /etc/profile\n\n重新加载配置文件[root@Centos8 lx]# source /etc/profile\n\n验证是否配置成功[root@Centos8 lx]# go versiongo version go1.19.1 linux/amd64[root@Centos8 lx]#\n","categories":["其他语言"],"tags":["Go"]},{"title":"Helm","url":"/cmchtge9w005hnegbgi1h1qxx/","content":"安装helm\nhttps://helm.sh/zh/\n\n脚本安装$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3$ chmod 700 get_helm.sh$ ./get_helm.sh如果想直接执行安装，运行curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash。\n\n包管理器安装sudo dnf install helm\n\n二进制版本安装下载 需要的版本解压(tar -zxvf helm-v3.0.0-linux-amd64.tar.gz)在解压目录中找到helm程序，移动到需要的目录中(mv linux-amd64/helm /usr/local/bin/helm)初始化当您已经安装好了Helm之后，您可以添加一个chart 仓库。从 Artifact Hub中查找有效的Helm chart仓库。$ helm repo add bitnami https://charts.bitnami.com/bitnami当添加完成，您将可以看到可以被您安装的charts列表：$ helm search repo bitnamiNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTIONbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...bitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...bitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Serverbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...# ... and many more\n\n参考链接\nhttps://helm.sh/zh/docs/intro/install/\n\n","categories":["其他语言"],"tags":["Helm"]},{"title":"Prometheus+Grafana","url":"/cmchtge9w005knegb4jzp2f3t/","content":"安装前系统信息简述\n\n\n应用\n主机名称\nIP地址\n端口\n运行命令\n\n\n\nnode-exporter\nSqaMaster1\n192.168.171.128\n9109\nnohup &#x2F;usr&#x2F;local&#x2F;node_exporter&#x2F;node_exporter –web.listen-address&#x3D;”0.0.0.0:9109” &amp;\n\n\nalertmanager\nSqaMaster1\n192.168.171.128\n9093\n&#x2F;usr&#x2F;local&#x2F;alertmanager&#x2F;alertmanager –config.file&#x3D;&#x2F;usr&#x2F;local&#x2F;alertmanager&#x2F;node-alert-rules.yml –web.listen-address&#x3D;”:9093”\n\n\nmysql\nSqaServer\n192.168.171.128\n9104\nnohup &#x2F;usr&#x2F;local&#x2F;mysqld_exporter&#x2F;mysqld_exporter –config.my-cnf&#x3D;&#x2F;usr&#x2F;local&#x2F;mysqld_exporter&#x2F;.my.cnf &amp;\n\n\nprometheus\nSqaServer\n192.168.171.200\n9099\n&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus –config.file&#x3D;”&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus.yml” –web.listen-address&#x3D;”0.0.0.0:9099”\n\n\ngrafana\nSqaServer\n192.168.171.200\n3000\n&#x2F;usr&#x2F;local&#x2F;grafana-9.1.6&#x2F;bin&#x2F;grafana-server\n\n\n安装被监控节点部署node_exporter V1.4.0\n登录到被监控服务器，预先将node_exporter V1.4.0上传到指定位置\n\n[root@SqaMaster1 soft]# wget https://github.com/prometheus/node_exporter/releases/download/v1.4.0/node_exporter-1.4.0.linux-amd64.tar.gz[root@SqaMaster1 soft]# pwd/tmp/soft-rw-rw-r-- 1 smy 10111972 Sep 26 20:39 node_exporter-1.4.0.linux-amd64.tar.gz[root@SqaMaster1 soft]# \n\n\n解压到&#x2F;usr&#x2F;local&#x2F;，并重命名\n\n[root@SqaMaster1 soft]# tar -zxvf node_exporter-1.4.0.linux-amd64.tar.gz -C /usr/local/[root@SqaMaster1 soft]# cd /usr/local/[root@SqaMaster1 local]# mv node_exporter-1.4.0.linux-amd64/ node_exporter/[root@SqaMaster1 local]# lldrwxr-xr-x  2 3434 3434 4096 Sep 26 20:39 node_exporter/[root@SqaMaster1 local]# \n\n被监控节点部署Alertmanager V0.24.0\n下载解压\n\n[root@SqaMaster1 soft]# pwd/tmp/soft[root@SqaMaster1 soft]# wget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.linux-amd64.tar.gz[root@SqaMaster1 soft]# tar -zxvf alertmanager-0.24.0.linux-amd64.tar.gz -C /usr/local/[root@SqaMaster1 soft]# cd /usr/local\n\n\n重命名\n\n[root@SqaMaster1 local]# mv alertmanager-0.24.0.linux-amd64 alertmanager[root@SqaMaster1 local]# cd alertmanager/[root@SqaMaster1 alertmanager]# ll总用量 55748-rwxr-xr-x 1 root root 31988661 11月  7 17:55 alertmanager-rwxr-xr-x 1 root root     1646 11月  7 20:03 alertmanager.yml-rwxr-xr-x 1 root root 25067944 11月  7 17:55 amtooldrwxr-xr-x 2 root root       35 11月  7 21:08 data-rwxr-xr-x 1 root root    11357 11月  7 17:55 LICENSE-rwxr-xr-x 1 root root     2218 11月  7 20:53 node-alert-rules.yml-rwxr-xr-x 1 root root      457 11月  7 17:55 NOTICE[root@SqaMaster1 alertmanager]# \n\n被监控节点部署mysql_exporter V0.14.0\n解压安装包\n\n[root@SqaServer soft]# wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz[root@SqaServer soft]# pwd/tmp/soft[root@SqaServer soft]# tar -zxvf mysqld_exporter-0.14.0.linux-amd64.tar.gz -C /usr/local/\n\n\n创建链接目录\n\n[root@SqaServer soft]# cd /usr/local[root@SqaServer local]# mv mysqld_exporter-0.14.0.linux-amd64 mysqld_exporter\n\n\n在MySQL服务器上创建监控用户\n\n[root@SqaServer local]# mysql -u root -pmysql&gt; grant select,replication client, process on *.* to &#x27;mysql_monitor&#x27;@&#x27;localhost&#x27; identified by &#x27;123&#x27;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.03 sec)mysql&gt; exitBye\n\n\n将上面创建的mysql用户信息写入mysqld_exporter配置文件（新创建一个）\n\n[root@SqaServer local]# vim /usr/local/mysqld_exporter/.my.cnf[client]user=mysql_monitorpassword=123[root@SqaServer local]# \n\n服务器安装Prometheus V2.38.0\n预先将Prometheus工具安装包上传到指定位置\n\n[root@SqaServer soft]# wget https://github.com/prometheus/prometheus/releases/download/v2.38.0/prometheus-2.38.0.linux-amd64.tar.gz[root@SqaServer soft]# pwd/tmp/soft[root@SqaServer soft]# ll总用量 89744-rw-r--r--  1 root   84166501 8月  16 21:49 prometheus-2.38.0.linux-amd64.tar.gz[root@SqaServer soft]# \n\n\n解压下载下来的压缩包到&#x2F;usr&#x2F;local\n\n[root@SqaServer soft]# tar -zxvf prometheus-2.38.0.linux-amd64.tar.gz -C /usr/local/…prometheus-2.38.0.linux-amd64/console_libraries/menu.lib…[root@SqaServer soft]# \n\n\n更改名字\n\n[root@SqaServer soft]# cd /usr/local/[root@SqaServer local]# mv prometheus-2.38.0.linux-amd64/ prometheus/[root@SqaServer local]# lsprometheus[root@SqaServer local]#\n\n服务器安装Grafana V9.1.6\n预先将Grafana.rpmV9.1.6上传到指定位置并解压\n\n[root@SqaServer soft]# pwd/tmp/soft[root@SqaServer soft]# wget https://github.com/grafana/grafana/archive/refs/tags/v9.1.6.tar.gz[root@SqaServer soft]# tar -zxvf grafana-enterprise-9.1.6.linux-amd64.tar.gz -C /usr/local/[root@SqaServer soft]# cd /usr/local[root@SqaServer local]# ll | grep grafanadrwxrwxr-x  8 admin   admin         157 10月 13 18:38 grafana-9.1.6[root@SqaServer local]# \n\n运行为方便观察，运行顺序依此为\n\nnode_exproter 获取被监控节点日志信息\nAlertmanager 启动被监控节点告警服务（发送告警email，展示告警信息\nmysql_exporter 获取被监控mysql服务器数据\nPrometheus 验证是否部署成功，是否可以接受到被监控节点的运行信息还有告警信息\nGrafana 接入Prometheus还有MySQL数据源，图形化展示监控数据\n\n被监控节点运行node_exporter# 后台执行，并设置监听端口为9109[root@SqaMaster1 local]# cd node_exporter/[root@SqaMaster1 node_exporter]# pwd/usr/local/node_exporter[root@SqaMaster1 node_exporter]# nohup /usr/local/node_exporter/node_exporter --web.listen-address=&quot;0.0.0.0:9109&quot; &amp;\n\n\n访问192.168.171.128:9109\n\n被监控节点运行alertmanager，指定配置文件监听端口\n配置监控告警信息，包括邮件发送，告警级别，抑制规则\n\n# 修改配置文件[root@SqaMaster1 alertmanager]# pwd/usr/local/alertmanager[root@SqaMaster1 alertmanager]# vim node-alert-rules.yml # 具体内容在下方附录1# 运行 指定配置文件和监听端口[root@SqaMaster1 alertmanager]# /usr/local/alertmanager/alertmanager --config.file=/usr/local/alertmanager/node-alert-rules.yml --web.listen-address=&quot;:9093&quot;\n\n\n访问192.168.171.128:9093\n\n被监控节点运行mysql_exporter# 启动mysqld_exporter[root@SqaServer local]# cd mysqld_exporter[root@SqaServer mysqld_exporter]# pwd/usr/local/mysqld_exporter[root@SqaServer mysqld_exporter]# nohup /usr/local/mysqld_exporter/mysqld_exporter --config.my-cnf=/usr/local/mysqld_exporter/.my.cnf &amp;# 确认是否正常启动（默认端口9104）[root@SqaServer mysqld_exporter]# netstat -lnptu | grep 9104tcp6       0      0 :::9104                 :::*                    LISTEN      32688/mysqld_export \n\n\n访问192.168.171.200:9104\n\n服务器节点上配置被监控节点告警触发规则文件[root@SqaServer local]# cd /usr/local/prometheus/rules/[root@SqaServer rules]# pwd/usr/local/prometheus/rules[root@SqaServer rules]# ll# 具体内容在附录3-rw-r--r-- 1 root root 14058 11月  7 19:26 alert-rules.yml-rw-r--r-- 1 root root   641 11月  7 18:58 node_down.yml[root@SqaServer rules]# \n\n服务器运行Prometheus\n更改配置文件prometheus.yml，添加主服务器的配置还有被监控服务器的名称、IP、端口，配置文件修改内容如下：\n\n[root@SqaServer local]# cd /usr/local/prometheus/[root@SqaServer prometheus]# vim prometheus.yml# 以下内容为示例，具体内容在附录2- job_name: &quot;prometheus&quot;  # metrics_path defaults to &#x27;/metrics&#x27;  # scheme defaults to &#x27;http&#x27;.  static_configs:    - targets: [&quot;8.143.7.110:9099&quot;]- job_name: &quot;ubuntu&quot;  static_configs:- targets: [&quot;101.43.224.143:9109&quot;]--config.file 指定配置文件--web.listen-address=&quot;0.0.0.0:9099&quot; 指定监控的端口\n\n\n启动Prometheus（若想首次启动便检测到被监控服务器，需要先在被监控服务器上执行node_exporter，然后再在主服务器上启动Prometheus）\n\n[root@SqaServer prometheus]# /usr/local/prometheus/prometheus --config.file=&quot;/usr/local/prometheus/prometheus.yml&quot; --web.listen-address=&quot;0.0.0.0:9099&quot;\n\n\n访问192.168.171.128:9099\n\n服务器运行Grafana# 启动服务，默认监听端口为3000，用户名密码为admin/admin[root@SqaServer local]# cd ./grafana-9.1.6/bin[root@SqaServer bin]# pwd/usr/local/grafana-9.1.6/bin[root@SqaServer bin]# /usr/local/grafana-9.1.6/bin/grafana-server\n\n\n访问192.168.171.128:3000\n\n附录1-被监控节点告警信息发送配置文件-node-alert-rules.ymlglobal:  # 当alertmanager持续多长时间未接收到告警后标记告警状态为 resolved  resolve_timeout: 5m  # 配置邮件发送信息  smtp_smarthost: &#x27;smtp.qq.com:465&#x27;  smtp_from: &#x27;EMAIL@qq.com&#x27;  smtp_auth_username: &#x27;EMAIL@qq.com&#x27;  smtp_auth_password: &#x27;aaftwxutipqiecbh&#x27;  smtp_require_tls: false  ######################告警抑制内容#############################inhibit_rules:- source_match:    alertname: NodeMemoryUsage    severity: critical  target_match:    severity: normal  equal:    - instance# 所有报警信息进入后的根路由，用来设置报警的分发策略route:  # 接收到的报警信息里面有许多alertname=NodeLoadHigh 这样的标签的报警信息将会批量被聚合到一个分组里面  group_by: [&#x27;alertname&#x27;]  # 当一个新的报警分组被创建后，需要等待至少 group_wait 时间来初始化通知，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送  group_wait: 30s  # 相同的group发送告警通知的时间间隔  group_interval: 30s  # 如果一个报警信息已经发送成功了，等待 repeat_interval 时间来重新发送  repeat_interval: 1m  # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器  receiver: default  # 上面所有的属性都由所有子路由继承，并且可以在每个子路由上进行覆盖。  routes:  - receiver: critical_alerts    group_wait: 10s    match:      severity: critical  - receiver: normal_alerts    group_wait: 10s    match_re:      severity: normal|middle# 配置告警接收者的信息receivers:- name: &#x27;default&#x27;  email_configs:  - to: &#x27;EMAIL@126.com&#x27;    send_resolved: true- name: &#x27;critical_alerts&#x27;    #严重告警级别发送给EMAIL@qq.com  email_configs:  - to: &#x27;EMAIL@qq.com&#x27;    send_resolved: true- name: &#x27;normal_alerts&#x27;    #普通告警级别发送给EMAIL@126.com  email_configs:  - to: &#x27;EMAIL@126.com&#x27;    send_resolved: true  #接受告警恢复的通知#kind: ConfigMap#metadata:#  name: alertmanager#  namespace: monitor\n\n附录2-Prometheus系统配置文件-prometheus.yml# my global configglobal:  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.  # scrape_timeout is set to the global default (10s).# Alertmanager configuration# 接受被监控节点告警配置alerting:  alertmanagers:    - static_configs:        - targets:          - 192.168.171.128:9093# Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.# 被监控节点告警触发规则文件rule_files:  # - &quot;first_rules.yml&quot;  # - &quot;second_rules.yml&quot;  - &#x27;rules/*.yml&#x27;# A scrape configuration containing exactly one endpoint to scrape:# Here it&#x27;s Prometheus itself.scrape_configs:  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.  - job_name: &quot;sqaserver&quot;    # metrics_path defaults to &#x27;/metrics&#x27;    # scheme defaults to &#x27;http&#x27;.    static_configs:      - targets: [&quot;192.168.171.200:9099&quot;]  # 被监控mysql节点  - job_name: &quot;sqamaster1&quot;    static_configs:      - targets: [&quot;192.168.171.128:9109&quot;]  # 被监控mysql服务器  - job_name: &quot;mysql-sqaserver&quot;    static_configs:      - targets: [&quot;192.168.171.200:9104&quot;]\n\n附录3-Prometheus上监控各节点触发告警规则配置文件alert-rules.ymlgroups:- name: AlertRules  rules:  - alert: HostOutOfMemory    expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 &lt; 80    for: 2m    labels:      severity: warning    annotations:      summary: Host out of memory (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Node memory is filling up (&lt; 80% left)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostMemoryUnderMemoryPressure    expr: rate(node_vmstat_pgmajfault[1m]) &gt; 1000    for: 2m    labels:      severity: warning    annotations:      summary: Host memory under memory pressure (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;The node is under heavy memory pressure. High rate of major page faults\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostUnusualNetworkThroughputIn    expr: sum by (instance) (rate(node_network_receive_bytes_total[2m])) / 1024 / 1024 &gt; 100    for: 5m    labels:      severity: warning    annotations:      summary: Host unusual network throughput in (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Host network interfaces are probably receiving too much data (&gt; 100 MB/s)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostUnusualNetworkThroughputOut    expr: sum by (instance) (rate(node_network_transmit_bytes_total[2m])) / 1024 / 1024 &gt; 100    for: 5m    labels:      severity: warning    annotations:      summary: Host unusual network throughput out (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Host network interfaces are probably sending too much data (&gt; 100 MB/s)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostUnusualDiskWriteRate    expr: sum by (instance) (rate(node_disk_written_bytes_total[2m])) / 1024 / 1024 &gt; 50    for: 2m    labels:      severity: warning    annotations:      summary: Host unusual disk write rate (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Disk is probably writing too much data (&gt; 50 MB/s)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  # Please add ignored mountpoints in node_exporter parameters like  # &quot;--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|run)($|/)&quot;.  # Same rule using &quot;node_filesystem_free_bytes&quot; will fire when disk fills for non-root users.  - alert: HostOutOfDiskSpace    expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes &lt; 10 and ON (instance, device, mountpoint) node_filesystem_readonly == 0    for: 2m    labels:      severity: warning    annotations:      summary: Host out of disk space (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Disk is almost full (&lt; 10% left)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  # Please add ignored mountpoints in node_exporter parameters like  # &quot;--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|run)($|/)&quot;.  # Same rule using &quot;node_filesystem_free_bytes&quot; will fire when disk fills for non-root users.  - alert: HostDiskWillFillIn24Hours    expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes &lt; 10 and ON (instance, device, mountpoint) predict_linear(node_filesystem_avail_bytes&#123;fstype!~&quot;tmpfs&quot;&#125;[1h], 24 * 3600) &lt; 0 and ON (instance, device, mountpoint) node_filesystem_readonly == 0    for: 2m    labels:      severity: warning    annotations:      summary: Host disk will fill in 24 hours (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Filesystem is predicted to run out of space within the next 24 hours at current write rate\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostOutOfInodes    expr: node_filesystem_files_free / node_filesystem_files * 100 &lt; 10 and ON (instance, device, mountpoint) node_filesystem_readonly == 0    for: 2m    labels:      severity: warning    annotations:      summary: Host out of inodes (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Disk is almost running out of available inodes (&lt; 10% left)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostInodesWillFillIn24Hours    expr: node_filesystem_files_free / node_filesystem_files * 100 &lt; 10 and predict_linear(node_filesystem_files_free[1h], 24 * 3600) &lt; 0 and ON (instance, device, mountpoint) node_filesystem_readonly == 0    for: 2m    labels:      severity: warning    annotations:      summary: Host inodes will fill in 24 hours (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Filesystem is predicted to run out of inodes within the next 24 hours at current write rate\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostUnusualDiskReadLatency    expr: rate(node_disk_read_time_seconds_total[1m]) / rate(node_disk_reads_completed_total[1m]) &gt; 0.1 and rate(node_disk_reads_completed_total[1m]) &gt; 0    for: 2m    labels:      severity: warning    annotations:      summary: Host unusual disk read latency (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Disk latency is growing (read operations &gt; 100ms)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostUnusualDiskWriteLatency    expr: rate(node_disk_write_time_seconds_total[1m]) / rate(node_disk_writes_completed_total[1m]) &gt; 0.1 and rate(node_disk_writes_completed_total[1m]) &gt; 0    for: 2m    labels:      severity: warning    annotations:      summary: Host unusual disk write latency (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Disk latency is growing (write operations &gt; 100ms)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostHighCpuLoad    expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[2m])) * 100) &gt; 80    for: 0m    labels:      severity: warning    annotations:      summary: Host high CPU load (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;CPU load is &gt; 80%\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostCpuStealNoisyNeighbor    expr: avg by(instance) (rate(node_cpu_seconds_total&#123;mode=&quot;steal&quot;&#125;[5m])) * 100 &gt; 10    for: 0m    labels:      severity: warning    annotations:      summary: Host CPU steal noisy neighbor (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;CPU steal is &gt; 10%. A noisy neighbor is killing VM performances or a spot instance may be out of credit.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostCpuHighIowait    expr: avg by (instance) (rate(node_cpu_seconds_total&#123;mode=&quot;iowait&quot;&#125;[5m])) * 100 &gt; 5    for: 0m    labels:      severity: warning    annotations:      summary: Host CPU high iowait (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;CPU iowait &gt; 5%. A high iowait means that you are disk or network bound.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  # 1000 context switches is an arbitrary number.  # Alert threshold depends on nature of application.  # Please read: https://github.com/samber/awesome-prometheus-alerts/issues/58  - alert: HostContextSwitching    expr: (rate(node_context_switches_total[5m])) / (count without(cpu, mode) (node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;)) &gt; 1000    for: 0m    labels:      severity: warning    annotations:      summary: Host context switching (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Context switching is growing on node (&gt; 1000 / s)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostSwapIsFillingUp    expr: (1 - (node_memory_SwapFree_bytes / node_memory_SwapTotal_bytes)) * 100 &gt; 80    for: 2m    labels:      severity: warning    annotations:      summary: Host swap is filling up (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Swap is filling up (&gt;80%)\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostSystemdServiceCrashed    expr: node_systemd_unit_state&#123;state=&quot;failed&quot;&#125; == 1    for: 0m    labels:      severity: warning    annotations:      summary: Host systemd service crashed (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;systemd service crashed\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostPhysicalComponentTooHot    expr: node_hwmon_temp_celsius &gt; 75    for: 5m    labels:      severity: warning    annotations:      summary: Host physical component too hot (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Physical hardware component too hot\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostNodeOvertemperatureAlarm    expr: node_hwmon_temp_crit_alarm_celsius == 1    for: 0m    labels:      severity: critical    annotations:      summary: Host node overtemperature alarm (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Physical node temperature alarm triggered\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostRaidArrayGotInactive    expr: node_md_state&#123;state=&quot;inactive&quot;&#125; &gt; 0    for: 0m    labels:      severity: critical    annotations:      summary: Host RAID array got inactive (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;RAID array &#123;&#123; $labels.device &#125;&#125; is in degraded state due to one or more disks failures. Number of spare drives is insufficient to fix issue automatically.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostRaidDiskFailure    expr: node_md_disks&#123;state=&quot;failed&quot;&#125; &gt; 0    for: 2m    labels:      severity: warning    annotations:      summary: Host RAID disk failure (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;At least one device in RAID array on &#123;&#123; $labels.instance &#125;&#125; failed. Array &#123;&#123; $labels.md_device &#125;&#125; needs attention and possibly a disk swap\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostKernelVersionDeviations    expr: count(sum(label_replace(node_uname_info, &quot;kernel&quot;, &quot;$1&quot;, &quot;release&quot;, &quot;([0-9]+.[0-9]+.[0-9]+).*&quot;)) by (kernel)) &gt; 1    for: 6h    labels:      severity: warning    annotations:      summary: Host kernel version deviations (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Different kernel versions are running\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostOomKillDetected    expr: increase(node_vmstat_oom_kill[1m]) &gt; 0    for: 0m    labels:      severity: warning    annotations:      summary: Host OOM kill detected (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;OOM kill detected\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostEdacCorrectableErrorsDetected    expr: increase(node_edac_correctable_errors_total[1m]) &gt; 0    for: 0m    labels:      severity: info    annotations:      summary: Host EDAC Correctable Errors detected (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Host &#123;&#123; $labels.instance &#125;&#125; has had &#123;&#123; printf \\&quot;%.0f\\&quot; $value &#125;&#125; correctable memory errors reported by EDAC in the last 5 minutes.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostNetworkTransmitErrors    expr: rate(node_network_transmit_errs_total[2m]) / rate(node_network_transmit_packets_total[2m]) &gt; 0.01    for: 2m    labels:      severity: warning    annotations:      summary: Host Network Transmit Errors (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Host &#123;&#123; $labels.instance &#125;&#125; interface &#123;&#123; $labels.device &#125;&#125; has encountered &#123;&#123; printf \\&quot;%.0f\\&quot; $value &#125;&#125; transmit errors in the last two minutes.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: HostRequiresReboot    expr: node_reboot_required &gt; 0    for: 4h    labels:      severity: info    annotations:      summary: Host requires reboot (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;&#123;&#123; $labels.instance &#125;&#125; requires a reboot.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: PrometheusJobMissing    expr: absent(up&#123;job=&quot;prometheus&quot;&#125;)    for: 0m    labels:      severity: warning    annotations:      summary: Prometheus job missing (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;A Prometheus job has disappeared\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: PrometheusTargetMissing    expr: up == 0    for: 0m    labels:      severity: critical    annotations:      summary: Prometheus target missing (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;A Prometheus target has disappeared. An exporter might be crashed.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: PrometheusAllTargetsMissing    expr: sum by (job) (up) == 0    for: 0m    labels:      severity: critical    annotations:      summary: Prometheus all targets missing (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;A Prometheus job does not have living target anymore.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: PrometheusTargetMissingWithWarmupTime    expr: sum by (instance, job) ((up == 0) * on (instance) group_right(job) (node_time_seconds - node_boot_time_seconds &gt; 600))    for: 0m    labels:      severity: critical    annotations:      summary: Prometheus target missing with warmup time (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Allow a job time to start up (10 minutes) before alerting that it&#x27;s down.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: PrometheusConfigurationReloadFailure    expr: prometheus_config_last_reload_successful != 1    for: 0m    labels:      severity: warning    annotations:      summary: Prometheus configuration reload failure (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Prometheus configuration reload error\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;  - alert: PrometheusTooManyRestarts    expr: changes(process_start_time_seconds&#123;job=~&quot;prometheus|pushgateway|alertmanager&quot;&#125;[15m]) &gt; 2    for: 0m    labels:      severity: warning    annotations:      summary: Prometheus too many restarts (instance &#123;&#123; $labels.instance &#125;&#125;)      description: &quot;Prometheus has restarted more than twice in the last 15 minutes. It might be crashlooping.\\n  VALUE = &#123;&#123; $value &#125;&#125;\\n  LABELS = &#123;&#123; $labels &#125;&#125;&quot;\n\nnode_down.ymlgroups:- name: node_down  rules:  # 告警名称  - alert: 节点离线告警    # 告警的判定条件，参考Prometheus高级查询来设定    expr: probe_success == 0    # for表示告警持续时间，超过这个时间才会发送给alertmanager    for: 10s    # 标签项    labels:      severity: warning    annotations:      # 尽可能把详细告警信息写入summary标签值，因为告警短信/邮件/钉钉发送的内容使用了summary标签中的值      summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; 离线&quot;      # 这是一条告警描述      description: &quot;这是一条告警描述信息&quot;\n\n参考教程监控插件安装\nhttps://blog.csdn.net/qq_29860591/article/details/108754090\n\n[admin@Centos8 lx]$ wget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.linux-amd64.tar.gz[admin@Centos8 lx]$ ll | grep aler-rw-rw-r--  1 admin   admin    25880024 10月 14 17:46 alertmanager-0.24.0.linux-amd64.tar.gz[admin@Centos8 lx]$ tar -zxvf alertmanager-0.24.0.linux-amd64.tar.gz alertmanager-0.24.0.linux-amd64/alertmanager-0.24.0.linux-amd64/alertmanager.ymlalertmanager-0.24.0.linux-amd64/LICENSEalertmanager-0.24.0.linux-amd64/NOTICEalertmanager-0.24.0.linux-amd64/alertmanageralertmanager-0.24.0.linux-amd64/amtool[admin@Centos8 lx]$ ll | grep alerdrwxr-xr-x  2 admin   admin          93 3月  25 2022 alertmanager-0.24.0.linux-amd64-rw-rw-r--  1 admin   admin    25880024 10月 14 17:46 alertmanager-0.24.0.linux-amd64.tar.gz[admin@Centos8 lx]$ mv alertmanager-0.24.0.linux-amd64/ alertmanager[admin@Centos8 lx]$ ll | grep alerdrwxr-xr-x  2 admin   admin          93 3月  25 2022 alertmanager-rw-rw-r--  1 admin   admin    25880024 10月 14 17:46 alertmanager-0.24.0.linux-amd64.tar.gz[admin@Centos8 lx]$ cd alertmanager/[admin@Centos8 alertmanager]$ lsalertmanager  alertmanager.yml  amtool  LICENSE  NOTICE[admin@Centos8 alertmanager]$ pwd/opt/lx/alertmanager[admin@Centos8 alertmanager]$ [admin@Centos8 alertmanager]$ [admin@Centos8 alertmanager]$ [admin@Centos8 alertmanager]$ sudo cp alertmanager /usr/local/bin/[admin@Centos8 alertmanager]$ sudo cp amtool /usr/local/bin/[admin@Centos8 alertmanager]$ alertmanager --versionalertmanager, version 0.24.0 (branch: HEAD, revision: f484b17fa3c583ed1b2c8bbcec20ba1db2aa5f11)  build user:       root@265f14f5c6fc  build date:       20220325-09:31:33  go version:       go1.17.8  platform:         linux/amd64[admin@Centos8 alertmanager]$ sudo mkdir -pv /etc/alertmanagermkdir: 已创建目录 &#x27;/etc/alertmanager&#x27;[admin@Centos8 alertmanager]$ sudo touch /etc/alertmanager/alertmanager.yml[admin@Centos8 alertmanager]$ sudo chmod 777 /etc/alertmanager/alertmanager.yml[admin@Centos8 alertmanager]$ vim /etc/alertmanager/alertmanager.yml[admin@Centos8 alertmanager]$ cat /etc/alertmanager/alertmanager.ymlglobal:  resolve_timeout: 5m  smtp_smarthost: &#x27;smtp.qq.com:465&#x27;  smtp_from: &#x27;EMAIL@qq.com&#x27;  smtp_auth_username: &#x27;EMAIL@qq.com&#x27;  smtp_auth_password: &#x27;xikolfiokklfebaa&#x27;  smtp_require_tls: falseroute:  receiver: mailreceivers:  - name: &#x27;mail&#x27;    email_configs:      - to: &#x27;EMAIL@126.com&#x27;[admin@Centos8 alertmanager]$ [admin@Centos8 alertmanager]$ alertmanager --config.file alertmanager.yml^C[admin@Centos8 alertmanager]$ alertmanager --config.file /etc/alertmanager/alertmanager.ymlts=2022-10-14T10:01:15.102Z caller=main.go:231 level=info msg=&quot;Starting Alertmanager&quot; version=&quot;(version=0.24.0, branch=HEAD, revision=f484b17fa3c583ed1b2c8bbcec20ba1db2aa5f11)&quot;ts=2022-10-14T10:01:15.102Z caller=main.go:232 level=info build_context=&quot;(go=go1.17.8, user=root@265f14f5c6fc, date=20220325-09:31:33)&quot;ts=2022-10-14T10:01:15.104Z caller=cluster.go:185 level=info component=cluster msg=&quot;setting advertise address explicitly&quot; addr=172.17.9.131 port=9094ts=2022-10-14T10:01:15.121Z caller=cluster.go:680 level=info component=cluster msg=&quot;Waiting for gossip to settle...&quot; interval=2shttp://8.143.7.110:9093/#/alerts\n\nmysql监控\nhttps://www.cnblogs.com/easydb/p/14151866.html\n\nPrometheus监控\nhttps://awesome-prometheus-alerts.grep.to/rules#prometheus-self-monitoring\n\n\nhttps://www.cnblogs.com/zhaojiedi1992/p/zhaojiedi_liunx_65_prometheus_alertmanager_rule.html\n\n","categories":["监控体系"],"tags":["Prometheus","Grafana"]},{"title":"Netdata","url":"/cmchtge9x005nnegbalk986ap/","content":"\n\n\nIP\n备注\n\n\n\n8.143.7.110\n主服务器\n\n\n43.143.132.104\n被监控服务器1\n\n\n101.43.224.143\n被监控服务器2\n\n\n主服务器部署下载NetData[root@Centos8 lx]# wget -O /tmp/netdata-kickstart.sh https://my-netdata.io/kickstart.sh &amp;&amp; sh /tmp/netdata-kickstart.sh\n\nTo view the Netdata dashboard, navigate to http://localhost:19999, or http://NODE:19999\ndocker部署docker run -d --name=netdata \\  -p 19999:19999 \\  -v netdataconfig:/etc/netdata \\  -v netdatalib:/var/lib/netdata \\  -v netdatacache:/var/cache/netdata \\  -v /etc/passwd:/host/etc/passwd:ro \\  -v /etc/group:/host/etc/group:ro \\  -v /proc:/host/proc:ro \\  -v /sys:/host/sys:ro \\  -v /etc/os-release:/host/etc/os-release:ro \\  --restart unless-stopped \\  --cap-add SYS_PTRACE \\  --security-opt apparmor=unconfined \\  netdata/netdata\n\n被监控服务器1、被监控服务器2配置Netdata，配置完成后可在主服务器上自动更新下载Netdatawget -O /tmp/netdata-kickstart.sh https://my-netdata.io/kickstart.sh &amp;&amp; sh /tmp/netdata-kickstart.sh --claim-token qCiOQN8bfBIEiOvbjpBXuhP2i0Pg1E0p4ZZHtgeXhbt4lZrl7Jkpy7VOUHbzWHR6u7nvuH8ND47kbErRLa0kRBxg4GGulAiHigPCvpGps-farTDa5r6425bp-YMBKwwEKpEAqyo --claim-url https://app.netdata.cloud\n\ndocker部署docker run -d --name=netdata \\  -p 19999:19999 \\  -v netdataconfig:/etc/netdata \\  -v netdatalib:/var/lib/netdata \\  -v netdatacache:/var/cache/netdata \\  -v /etc/passwd:/host/etc/passwd:ro \\  -v /etc/group:/host/etc/group:ro \\  -v /proc:/host/proc:ro \\  -v /sys:/host/sys:ro \\  -v /etc/os-release:/host/etc/os-release:ro \\  --restart unless-stopped \\  --cap-add SYS_PTRACE \\  --security-opt apparmor=unconfined \\  -e NETDATA_CLAIM_TOKEN=qCiOQN8bfBIEiOvbjpBXuhP2i0Pg1E0p4ZZHtgeXhbt4lZrl7Jkpy7VOUHbzWHR6u7nvuH8ND47kbErRLa0kRBxg4GGulAiHigPCvpGps-farTDa5r6425bp-YMBKwwEKpEAqyo \\  -e NETDATA_CLAIM_URL=https://app.netdata.cloud \\  netdata/netdata\n\n卸载[root@Centos8 lx]# sh netdata-kickstart-20221012.sh --uninstall\n\n个人服务器监控部署docker run -d --name=netdata \\  -p 19990:19999 \\  -v /proc:/host/proc:ro \\  -v /sys:/host/sys:ro \\  -v /var/run/docker.sock:/var/run/docker.sock:ro \\  --cap-add SYS_PTRACE \\  --security-opt apparmor=unconfined \\  netdata/netdata\n\n参考链接\nhttps://github.com/netdata/netdata\n\n","categories":["监控体系"],"tags":["Netdata"]},{"title":"cadvisor","url":"/cmchtge9x005pnegbhf9ag927/","content":"下载镜像[root@Centos8 ~]# docker pull google/cadvisor\n\nDocker上运行cAdvisor[root@Centos8 ~]# docker imagesREPOSITORY                 TAG       IMAGE ID       CREATED         SIZEgoogle/cadvisor            latest    eb1210707573   3 years ago     69.6MB[root@Centos8 ~]#[root@Centos8 ~]# docker run \\&gt;   --volume=/:/rootfs:ro \\&gt;   --volume=/var/run:/var/run:ro \\&gt;   --volume=/sys:/sys:ro \\&gt;   --volume=/var/lib/docker/:/var/lib/docker:ro \\&gt;   --volume=/dev/disk/:/dev/disk:ro \\&gt;   --publish=8089:8080 \\&gt;   --detach=true \\&gt;   --name=cadvisor_lx \\&gt;   --privileged \\&gt;   --device=/dev/kmsg \\&gt;   google/cadvisor\n\n--volume=/:/rootfs:ro: 将主机根目录（/）挂载到容器的/rootfs目录，并以只读模式（ro）挂载。这将允许cAdvisor容器查看主机文件系统的信息。--volume=/var/run:/var/run:ro: 将主机的/var/run目录挂载到容器中的相应目录，以只读模式（ro）。这将允许cAdvisor容器查看主机上的运行时信息。--volume=/sys:/sys:ro: 将主机的/sys目录挂载到容器的相应目录，并以只读模式（ro）挂载。这将允许cAdvisor容器监视主机上的系统信息。--volume=/var/lib/docker/:/var/lib/docker:ro: 将主机的Docker数据目录挂载到cAdvisor容器中的相应目录，并以只读模式（ro）挂载。这将允许cAdvisor容器监视和分析Docker容器的资源使用情况。--volume=/dev/disk/:/dev/disk:ro: 将主机的磁盘设备文件目录挂载到cAdvisor容器的相应目录，并以只读模式（ro）挂载。这将允许cAdvisor容器识别和监视主机上的磁盘信息。--publish=8089:8080: 将cAdvisor容器的8080端口映射到主机上的8089端口。这将允许您从主机上的Web浏览器访问cAdvisor Web UI。--detach=true: 在后台运行cAdvisor容器，使其在退出终端时继续运行。--name=cadvisor_lx: 为cAdvisor容器指定名称（cadvisor_lx）。--privileged: 启用特权模式，以便cAdvisor容器可以执行一些系统级操作。\n\n创建成功返回容器ID值e96c09e2e0db7c65164029c0913679641529a93cbdec8284566f31dc3b0d9541[root@Centos8 ~]#\n","categories":["监控体系"],"tags":["cadvisor"]},{"title":"ChaosBlade","url":"/cmchtge9y005tnegbaqgz741m/","content":"下载chaosblade[admin@Centos8 lx]$ wget https://download.fastgit.org/chaosblade-io/chaosblade/releases/download/v1.7.0/chaosblade-1.7.0-linux-amd64.tar.gz[admin@Centos8 lx]$ ll-rw-rw-r--  1 admin admin  53765642 9月   6 15:54 chaosblade-1.7.0-linux-amd64.tar.gz[admin@Centos8 lx]$ ll总用量 301884drwxr-xr-x  5 admin admin        68 9月   6 15:15 chaosblade-1.7.0-rw-rw-r--  1 admin admin  53765642 9月   6 15:54 chaosblade-1.7.0-linux-amd64.tar.gz[admin@Centos8 lx]$ cd chaosblade-1.7.0/[admin@Centos8 chaosblade-1.7.0]$ ll总用量 11772drwxr-xr-x 2 admin admin      138 9月  29 14:46 bin-rwxr-xr-x 1 admin admin 12050700 9月   6 15:08 bladedrwxr-xr-x 4 admin admin       34 9月  29 14:46 libdrwxr-xr-x 2 admin admin      272 9月   6 15:12 yaml[admin@Centos8 chaosblade-1.7.0]$ tree.├── bin│   ├── chaos_fuse│   ├── chaos_os│   ├── nsexec│   └── strace├── blade├── lib│   ├── cplus│   │   ├── chaosblade-exec-cplus│   │   └── script│   │       ├── shell_break_and_return_attach_parent.sh│   │       ├── shell_break_and_return_attach.sh│   │       ├── shell_break_and_return.sh│   │       ├── shell_check_process_duplicate.sh│   │       ├── shell_check_process_id.sh│   │       ├── shell_initialization.sh│   │       ├── shell_modify_variable_attach_parent.sh│   │       ├── shell_modify_variable_attach.sh│   │       ├── shell_modify_variable.sh│   │       ├── shell_remove_process.sh│   │       ├── shell_response_delay_attach_parent.sh│   │       ├── shell_response_delay_attach.sh│   │       └── shell_response_delay.sh│   └── sandbox│       ├── bin│       │   └── sandbox.sh│       ├── cfg│       │   ├── sandbox-logback.xml│       │   ├── sandbox.properties│       │   └── version│       ├── example│       │   └── sandbox-debug-module.jar│       ├── install-local.sh│       ├── lib│       │   ├── sandbox-agent.jar│       │   ├── sandbox-core.jar│       │   └── sandbox-spy.jar│       ├── module│       │   ├── chaosblade-java-agent-1.7.0.jar│       │   └── sandbox-mgr-module.jar│       ├── provider│       │   └── sandbox-mgr-provider.jar│       ├── sandbox-module│       └── tools.jar└── yaml    ├── chaosblade-check-spec-1.7.0.yaml    ├── chaosblade-cplus-spec.yaml    ├── chaosblade-cri-spec-1.7.0.yaml    ├── chaosblade-docker-spec-1.7.0.yaml    ├── chaosblade-jvm-spec-1.7.0.yaml    ├── chaosblade-k8s-spec-1.7.0.yaml    └── chaosblade-os-spec-1.7.0.yaml13 directories, 39 files[admin@Centos8 chaosblade-1.7.0]$ ./blade versionversion: 1.7.0env: #1 SMP Thu Mar 17 17:08:06 UTC 2022 x86_64build-time: Tue Sep  6 07:06:55 UTC 2022[admin@Centos8 chaosblade-1.7.0]$ \n\nChaosBlade V1.7.0可针对Docker 容器进行包括但不限于删除容器、容器内 CPU负载、内存、网络、磁盘、进程等实验场景测试，以下将选取典型场景进行验证。在执行本测试前默认系统已经配置好docker环境，这里使用的版本为V20.10.18，且已经成功运行一个容器，这里以Nginx为例，容器ID为f74cabd852d2\n容器内CPU负载对容器做CPU负载80%测试[root@centos7 chaosblade-1.7.0]# ./blade create docker cpu fullload --cpu-percent 80 /tmp/soft/chaosblade-1.7.0-linux-amd64.tar.gz --container-id f74cabd852d2执行上述命令后，返回如下结果，说明执行成功：&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;result&quot;:&quot;30276abc2fa0290c&quot;&#125;通过top命令验证，可以看到测试达到预期\n\n销毁命令（参数为创建测试成功的返回值）[root@centos7 chaosblade-1.7.0]# ./blade destroy 30276abc2fa0290c执行上述命令后，返回如下结果，说明执行成功：&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;result&quot;:&#123;&quot;target&quot;:&quot;cpu&quot;,&quot;action&quot;:&quot;fullload&quot;,&quot;flags&quot;:&#123;&quot;container-id&quot;:&quot;f74cabd852d2&quot;,&quot;cpu-percent&quot;:&quot;80&quot;&#125;,&quot;ActionProcessHang&quot;:false&#125;&#125;通过top命令验证，可以看到测试达到预期\n\n容器内网络场景对Nginx容器 80 端口做访问延迟 3 秒测试[root@centos7 chaosblade-1.7.0]# ./blade create docker network delay --time 3000 --interface eth0 --local-port 80 --container-id f74cabd852d2执行上述命令后，返回如下结果，说明执行成功。&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;result&quot;:&quot;fa177eca0d5952a9&quot;&#125;[root@centos7 chaosblade-1.7.0]# time curl localhost:80执行上述测试命令后，返回如下结果，说明执行成功。 此处延迟 9 秒的原因是涉及到多次 80 端口访问。\n\n销毁命令[root@centos7 chaosblade-1.7.0]# ./blade destroy fa177eca0d5952a9执行上述命令后，返回如下结果，说明执行成功。&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;result&quot;:&#123;&quot;target&quot;:&quot;network&quot;,&quot;action&quot;:&quot;delay&quot;,&quot;flags&quot;:&#123;&quot;container-id&quot;:&quot;f74cabd852d2&quot;,&quot;interface&quot;:&quot;eth0&quot;,&quot;local-port&quot;:&quot;80&quot;,&quot;time&quot;:&quot;3000&quot;&#125;,&quot;ActionProcessHang&quot;:false&#125;&#125;\n\n验证是否恢复正常[admin@Centos8 chaosblade]$ time curl localhost:32768\n\n容器内进程场景进入容器，使用top命令查看nginx的pid号杀掉容器内 nginx 进程[root@centos7 chaosblade-1.7.0]# ./blade create docker process kill --pid 1 --signal 9 /tmp/soft/chaosblade-1.7.0-linux-amd64.tar.gz --container-id f74cabd852d2执行上述命令后，返回如下结果，说明执行成功。&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;result&quot;:&quot;41ec24664e8aed56&quot;&#125;\n\n容器自身管理删除容器测试–force 强制删除\n[root@centos7 chaosblade-1.7.0]# ./blade create docker container remove --force --container-id f74cabd852d2执行上述命令后，返回如下结果，说明执行成功。&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;result&quot;:&quot;93066cb30f8f63ba&quot;&#125;\n\n参考链接\nhttps://github.com/chaosblade-io/chaosblade/blob/master/README_CN.md\n\n","categories":["混沌工程"],"tags":["ChaosBlade"]},{"title":"Pumba","url":"/cmchtge9y005vnegba7gq0iya/","content":"下载[admin@Centos8 lx]$ wget https://download.fastgit.org/alexei-led/pumba/releases/download/0.9.0/pumba_linux_amd64[admin@Centos8 lx]$ ll-rw-rw-r--  1 admin admin  14637627 12月  8 2021 pumba_linux_amd64```sh## 重命名```sh[admin@Centos8 lx]$ mv pumba_linux_amd64 pumba\n\n复制到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;目录下[admin@Centos8 lx]$ sudo cp pumba /usr/local/bin/pumba\n\n赋予执行权限[admin@Centos8 lx]$ sudo chmod 777 /usr/local/bin/pumba \n\n测试是否安装成功[admin@Centos8 lx]$ pumba -vPumba version 0.9.0 - 2e7ab7b (master) 2021-11-21T10:12:49+0200[admin@Centos8 lx]$ \n\n参考教程\nhttps://github.com/alexei-led/pumba\n\n","categories":["混沌工程"],"tags":["Pumba"]},{"title":"WSL配置","url":"/cmchtge9z005ynegb8iatbrj6/","content":"先决条件必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。如果使用的是更早的版本，请参阅[手动安装页](https://learn.microsoft.com/zh-cn/windows/wsl/install-manual)。\n\n更新 WSL$ wsl.exe --update\n\n修改配置文件装完 WSL 后，查看任务管理器时发现 vmmem 进程占用内存过高。WSL 内存默认值是电脑内存的一半，CPU 默认值是电脑处理器个数，swap 空间默认值是电脑内存的四分之一。\n# 查看wsl版本wsl -l -v# 查看正在wsl中运行的linux发行版wsl --list --running# 关闭所有正在wsl中运行的linux发行版wsl --shutdown\n\n.wslconfig 文件路径：\n.wslconfig 文件存放于当前用户的目录，即绝对路径为 C:\\Users\\你的用户名.wslconfig，没有的话就新建一个。也可以打开文件管理器后，在地址栏输入%UserProfile%跳转至用户目录，再新建或编辑.wslconfig 文件。修改.wslconfig 配置文件（根据自己电脑配置修改）\n# Settings apply across all Linux distros running on WSL 2[wsl2]# Limits VM memory to use no more than 2 GB, this can be set as whole numbers using GB or MBmemory=4GB# Sets the VM to use two virtual processorsprocessors=4# Sets amount of swap storage space to 2GB, default is 25% of available RAMswap=4GB# Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx# swapfile=C:\\\\temp\\\\wsl-swap.vhdx\n\n以上文件改好后，在 powershell 中执行以下代码，以重启 wsl2，使得配置生效。\nwsl --shutdown\n\n查看可支持版本$ wsl --list --online以下是可安装的有效分发的列表。使用 &#x27;wsl.exe --install &lt;Distro&gt;&#x27; 安装。NAME                                   FRIENDLY NAMEUbuntu                                 UbuntuDebian                                 Debian GNU/Linuxkali-linux                             Kali Linux RollingUbuntu-18.04                           Ubuntu 18.04 LTSUbuntu-20.04                           Ubuntu 20.04 LTSUbuntu-22.04                           Ubuntu 22.04 LTSUbuntu-24.04                           Ubuntu 24.04 LTSOracleLinux_7_9                        Oracle Linux 7.9OracleLinux_8_7                        Oracle Linux 8.7OracleLinux_9_1                        Oracle Linux 9.1openSUSE-Leap-15.5                     openSUSE Leap 15.5SUSE-Linux-Enterprise-Server-15-SP4    SUSE Linux Enterprise Server 15 SP4SUSE-Linux-Enterprise-15-SP5           SUSE Linux Enterprise 15 SP5openSUSE-Tumbleweed                    openSUSE Tumbleweed\n\n安装 WSL管理员模式进入 Power Shell，默认安装的为 Ubuntu# 默认安装$ wsl --install# 指定版本$ wsl --install -d &lt;Distrubution Name&gt;\n\n\n安装过程要求输入用户名，用户名不能大写；\n如果安装失败，无法解析服务器的名称或地址。可以考虑 更改 DNS 为 114.114.114.114,8.8.8.8这里建议更改 DNS。\n\n查看当前状态$ wsl -l -v  NAME      STATE           VERSION* Ubuntu    Running         2\n\n更改安装位置查看要迁移的系统名称$ wsl -l适用于 Linux 的 Windows 子系统分发:Ubuntu (默认)\n\n创建目标目录并导出$ mkdir D:\\WSL\\backup$ cd D:\\WSL\\backup$ wsl --export Ubuntu ./Ubuntu.tar正在导出，这可能需要几分钟时间。操作成功完成\n\n注销正在运行的系统$ wsl --unregister Ubuntu-20.04正在注销。操作成功完成。\n\n导入系统# wsl --import (发行版) (安装位置) (文件路径以及文件名称)$ wsl --import Ubuntu-20.04 D:\\WSL\\Ubuntu D:\\WSL\\backup\\Ubuntu.tar正在导入，这可能需要几分钟时间。操作成功完成。\n\n更改默认登录用户名管理员权限打开 powershell，关掉子系统wsl --shutdown\n\n设置默认用户&lt;wsl&gt; config --default-user &lt;username&gt;Ubuntu config --default-user username\n","categories":["WSL"],"tags":["WSL"]},{"title":"Win11改用Win10右键菜单","url":"/cmchtgea00061negb0aen5ryd/","content":"在Windows上新建名为Win11改用Win10右键菜单.bat的文件，以GBK编码保存，填写以下内容后，以管理员权限运行即可。\n@echo off:: 检查管理员权限&gt;nul 2&gt;&amp;1 &quot;%SYSTEMROOT%\\system32\\cacls.exe&quot; &quot;%SYSTEMROOT%\\system32\\config\\system&quot;if &#x27;%errorlevel%&#x27; NEQ &#x27;0&#x27; (    goto UACPrompt) else (     goto gotAdmin ):UACPromptecho 请求管理员权限...echo Set UAC = CreateObject^(&quot;Shell.Application&quot;^) &gt; &quot;%temp%\\getadmin.vbs&quot;echo UAC.ShellExecute &quot;%~s0&quot;, &quot;&quot;, &quot;&quot;, &quot;runas&quot;, 1 &gt;&gt; &quot;%temp%\\getadmin.vbs&quot;&quot;%temp%\\getadmin.vbs&quot;exit /B:gotAdminif exist &quot;%temp%\\getadmin.vbs&quot; ( del &quot;%temp%\\getadmin.vbs&quot; ):: 确认真正获得管理员权限&gt;nul 2&gt;&amp;1 &quot;%SYSTEMROOT%\\system32\\cacls.exe&quot; &quot;%SYSTEMROOT%\\system32\\config\\system&quot;if &#x27;%errorlevel%&#x27; NEQ &#x27;0&#x27; (    echo 未能获得管理员权限，操作已取消    pause    exit /B):: 主菜单:menuclsecho.echo ============================================= echo           Windows右键菜单切换工具echo ============================================= echo 1. 切换到Win10旧版右键菜单echo 2. 切换到Win11新版右键菜单echo 3. 退出echo ============================================= :selectset &quot;opt=&quot;set /p &quot;opt=请选择操作(1-3): &quot;if &quot;%opt%&quot;==&quot;&quot; (    echo 请输入有效选项    goto select)if &quot;%opt%&quot;==&quot;1&quot; (    echo 正在开启Win10旧版右键菜单...    reg add &quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\\InprocServer32&quot; /f /ve 2&gt;nul    if errorlevel 1 (        echo 注册表修改失败！    ) else (        echo 已成功启用Win10旧版右键菜单    )) else if &quot;%opt%&quot;==&quot;2&quot; (    echo 正在恢复Win11新版右键菜单...    reg delete &quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot; /f 2&gt;nul    if errorlevel 1 (        echo 注册表修改失败！    ) else (        echo 已成功恢复Win11新版右键菜单    )) else if &quot;%opt%&quot;==&quot;3&quot; (    exit /B) else (    echo 无效输入，请重新选择    goto select):: 重启资源管理器if not &quot;%opt%&quot;==&quot;3&quot; (    echo.    echo 正在重启资源管理器...    timeout /t 2 /nobreak &gt;nul    taskkill /f /im explorer.exe &gt;nul 2&gt;&amp;1    start explorer.exe &gt;nul    echo 操作完成！    pause)goto menu\n","categories":["Windows优化"],"tags":["Windows右键"]},{"title":"PowerShell常用命令","url":"/cmchtgea00064negb7gf6bw4w/","content":"PowerShell 常用命令D:\\Users\\llddss\\Desktop\\tmp\\test&gt;help有关某个命令的详细信息，请键入 HELP 命令名ASSOC          显示或修改文件扩展名关联。ATTRIB         显示或更改文件属性。BREAK          设置或清除扩展式 CTRL+C 检查。BCDEDIT        设置启动数据库中的属性以控制启动加载。CACLS          显示或修改文件的访问控制列表(ACL)。CALL           从另一个批处理程序调用这一个。CD             显示当前目录的名称或将其更改。CHCP           显示或设置活动代码页数。CHDIR          显示当前目录的名称或将其更改。CHKDSK         检查磁盘并显示状态报告。CHKNTFS        显示或修改启动时间磁盘检查。CLS            清除屏幕。CMD            打开另一个 Windows 命令解释程序窗口。COLOR          设置默认控制台前景和背景颜色。COMP           比较两个或两套文件的内容。COMPACT        显示或更改 NTFS 分区上文件的压缩。CONVERT        将 FAT 卷转换成 NTFS。你不能转换               当前驱动器。COPY           将至少一个文件复制到另一个位置。DATE           显示或设置日期。DEL            删除至少一个文件。DIR            显示一个目录中的文件和子目录。DISKPART       显示或配置磁盘分区属性。DOSKEY         编辑命令行、撤回 Windows 命令并               创建宏。DRIVERQUERY    显示当前设备驱动程序状态和属性。ECHO           显示消息，或将命令回显打开或关闭。ENDLOCAL       结束批文件中环境更改的本地化。ERASE          删除一个或多个文件。EXIT           退出 CMD.EXE 程序(命令解释程序)。FC             比较两个文件或两个文件集并显示               它们之间的不同。FIND           在一个或多个文件中搜索一个文本字符串。FINDSTR        在多个文件中搜索字符串。FOR            为一组文件中的每个文件运行一个指定的命令。FORMAT         格式化磁盘，以便用于 Windows。FSUTIL         显示或配置文件系统属性。FTYPE          显示或修改在文件扩展名关联中使用的文件               类型。GOTO           将 Windows 命令解释程序定向到批处理程序               中某个带标签的行。GPRESULT       显示计算机或用户的组策略信息。GRAFTABL       使 Windows 在图形模式下显示扩展               字符集。HELP           提供 Windows 命令的帮助信息。ICACLS         显示、修改、备份或还原文件和               目录的 ACL。IF             在批处理程序中执行有条件的处理操作。LABEL          创建、更改或删除磁盘的卷标。MD             创建一个目录。MKDIR          创建一个目录。MKLINK         创建符号链接和硬链接MODE           配置系统设备。MORE           逐屏显示输出。MOVE           将一个或多个文件从一个目录移动到另一个               目录。OPENFILES      显示远程用户为了文件共享而打开的文件。PATH           为可执行文件显示或设置搜索路径。PAUSE          暂停批处理文件的处理并显示消息。POPD           还原通过 PUSHD 保存的当前目录的上一个               值。PRINT          打印一个文本文件。PROMPT         更改 Windows 命令提示。PUSHD          保存当前目录，然后对其进行更改。RD             删除目录。RECOVER        从损坏的或有缺陷的磁盘中恢复可读信息。REM            记录批处理文件或 CONFIG.SYS 中的注释(批注)。REN            重命名文件。RENAME         重命名文件。REPLACE        替换文件。RMDIR          删除目录。ROBOCOPY       复制文件和目录树的高级实用工具SET            显示、设置或删除 Windows 环境变量。SETLOCAL       开始本地化批处理文件中的环境更改。SC             显示或配置服务(后台进程)。SCHTASKS       安排在一台计算机上运行命令和程序。SHIFT          调整批处理文件中可替换参数的位置。SHUTDOWN       允许通过本地或远程方式正确关闭计算机。SORT           对输入排序。START          启动单独的窗口以运行指定的程序或命令。SUBST          将路径与驱动器号关联。SYSTEMINFO     显示计算机的特定属性和配置。TASKLIST       显示包括服务在内的所有当前运行的任务。TASKKILL       中止或停止正在运行的进程或应用程序。TIME           显示或设置系统时间。TITLE          设置 CMD.EXE 会话的窗口标题。TREE           以图形方式显示驱动程序或路径的目录               结构。TYPE           显示文本文件的内容。VER            显示 Windows 的版本。VERIFY         告诉 Windows 是否进行验证，以确保文件               正确写入磁盘。VOL            显示磁盘卷标和序列号。XCOPY          复制文件和目录树。WMIC           在交互式命令 shell 中显示 WMI 信息。有关工具的详细信息，请参阅联机帮助中的命令行参考。D:\\Users\\llddss\\Desktop\\tmp\\test&gt;# 查询具体参数使用 命令 /?D:\\Users\\llddss\\Desktop\\tmp\\test&gt;D:\\Users\\llddss\\Desktop\\tmp\\test&gt;rd /?删除一个目录。RMDIR [/S] [/Q] [drive:]pathRD [/S] [/Q] [drive:]path    /S      除目录本身外，还将删除指定目录下的所有子目录和            文件。用于删除目录树。    /Q      安静模式，带 /S 删除目录树时不要求确认D:\\Users\\llddss\\Desktop\\tmp\\test&gt;\n\nPowerShell常见问题创建文件@echo offfor /l %%i in (1,1,10) do type nul &gt; SSS_CCCC_GGGG_%%i.cpause\n\n批量导出文件名到指定文件dir /b D:\\test &gt; D:\\test\\filelist.txt\n\nwin10上如何使用cmd批量重命名文件\n如果文件所在目录为 D:\\test，则输入以下命令：\n\ncd D:\\test\n\n\n使用“ren”命令来重命名文件。ren命令的语法如下：\n\nren &lt;原文件名&gt; &lt;新文件名&gt;\n\n\n如果要将所有以“.txt”结尾的文件名中的“old”替换为“new”，则输入以下命令：\n\n@echo offren SSS_AAA_GGGG_*.c SSS_SSS_CCCC_GGGG_*.cpause\n\n上述命令将批量重命名所有以“.txt”结尾的文件名中的“old”为“new”。\n按下“Enter”键执行命令，等待命令提示符窗口显示操作完成即可。\n请注意，执行重命名操作时请谨慎，因为重命名后无法恢复文件名。\n\n当前文件夹中有多个子文件夹文件名为子文件夹1中的文件有SSS_CCCC_GGGG_5.txtSSS_CCCC_GGGG_6.txtSSS_CCCC_GGGG_7.txtSSS_CCCC_GGGG_8.txtSSS_CCCC_GGGG_9.txt子文件夹2中的文件有SSS_AAA_GGGG_1.txtSSS_AAA_GGGG_10.txt如何才能重命名为SSS_CCC_GGGG_*.txt的格式\n\n 可以使用命令提示符 (cmd) 中的“for”命令和“ren”命令来批量重命名多个子文件夹中的文件。\n假设当前文件夹下有两个子文件夹，分别为“子文件夹1”和“子文件夹2”，它们中间包含了多个文件名为“SSS_CCCC_GGGG_.txt”和“SSS_AAA_GGGG_.txt”的文件。现在需要将它们的文件名都重命名为“SSS_CCC_GGGG_*.txt”的格式。\n以下是可以使用的命令：\nfor /r .\\ %%a in (SSS_CCCC_GGGG_*.txt) do ren &quot;%%a&quot; &quot;%%~na_tmp%%~xa&quot;for /r .\\ %%a in (SSS_AAA_GGGG_*.txt) do ren &quot;%%a&quot; &quot;%%~na_tmp%%~xa&quot;for /r .\\ %%a in (*_tmp*.txt) do ren &quot;%%a&quot; &quot;SSS_CCC_GGGG_%%~xa&quot;\n\n上述命令首先将所有符合“SSS_CCCC_GGGG_.txt”模式的文件名都重命名为“tmp.txt”的格式，然后将所有符合“SSS_AAA_GGGG.txt”模式的文件名都重命名为“_tmp.txt”的格式。最后，将所有包含“tmp”字符的文件名都重命名为“SSS_CCC_GGGG*.txt”的格式。\n请注意，在命令中“for &#x2F;r”语句中，“.\\”表示当前目录，而“%%a”是循环变量，可以根据需要进行修改。另外，上述命令需要在当前文件夹下运行，如果需要在其他文件夹下运行，请将“.\\”替换为对应的文件夹路径。\n如何给多级文件夹内的文件重命名\n示例目录结构\n\n├─a│  ├─b│  │  │  SSS_CCCC_AAAA_GGGG_1.c│  │  │  SSS_CCCC_AAAA_GGGG_2.c│  │  │  SSS_CCCC_AAAA_GGGG_3.c│  │  ││  │  └─b1│  ├─c│  │  │  SSS_CCCC_AAAA_GGGG_4.c│  │  │  SSS_CCCC_AAAA_GGGG_5.c│  │  │  SSS_CCCC_AAAA_GGGG_6.c│  │  ││  │  ├─c1│  │  └─c1 - 副本│  └─d│      │  SSS_CCCC_AAAA_GGGG_10.c│      │  SSS_CCCC_AAAA_GGGG_7.c│      │  SSS_CCCC_AAAA_GGGG_8.c│      │  SSS_CCCC_AAAA_GGGG_9.c│      ││      └─d1│          │  SSS_CCCC_AAAA_GGGG_11.c│          │  SSS_CCCC_AAAA_GGGG_12.c│          │  SSS_CCCC_AAAA_GGGG_13.c│          ││          └─b1└─help\n\n\nV1 脚本\n\n@echo offsetlocal enabledelayedexpansionREM 设置要搜索的字符串set &quot;search=SSS_AAA_GGGG_&quot;REM 设置要替换的字符串set &quot;replace=SSS_CCCC_AAAA_GGGG_&quot;REM 设置目标文件夹的路径set &quot;targetFolder=D:\\Users\\llddss\\Desktop\\tmp\\test&quot;REM 遍历目标文件夹及其子文件夹中的所有.c文件，并将每个文件的路径赋值给%%F变量for /r &quot;%targetFolder%&quot; %%F in (*.c) do (    REM 获取文件名（不包含扩展名）    set &quot;filename=%%~nF&quot;    REM 获取文件扩展名    set &quot;extension=%%~xF&quot;    REM 使用字符串替换操作将搜索字符串替换为替换字符串    set &quot;newfilename=!filename:%search%=%replace%!&quot;    REM 使用ren命令重命名文件    ren &quot;%%F&quot; &quot;!newfilename!!extension!&quot;)REM 显示完成消息echo Renaming complete.pause\n\n\nV2 脚本\n\n@echo offsetlocal enabledelayedexpansionREM 输入验证和错误处理set &quot;targetFolder=%~1&quot;if &quot;%targetFolder%&quot;==&quot;&quot; (    set &quot;targetFolder=D:\\Users\\llddss\\Desktop\\tmp\\test&quot;)if not exist &quot;%targetFolder%&quot; (    echo Target folder does not exist.    exit /b)REM 设置要搜索的字符串和替换的字符串set &quot;search=%~2&quot;if &quot;%search%&quot;==&quot;&quot; (    set &quot;search=SSS_AAA_GGGG_&quot;)set &quot;replace=%~3&quot;if &quot;%replace%&quot;==&quot;&quot; (    set &quot;replace=SSS_CCCC_AAAA_GGGG_&quot;)REM 文件扩展名数组set &quot;extensions=.c&quot;REM 日志文件路径set &quot;logFile=renaming_log.txt&quot;REM 遍历目标文件夹及其子文件夹中的所有指定扩展名的文件，并将每个文件重命名for /r &quot;%targetFolder%&quot; %%F in (*%extensions%) do (    REM 获取文件名（不包含扩展名）    set &quot;filename=%%~nF&quot;    REM 获取文件扩展名    set &quot;extension=%%~xF&quot;    REM 使用字符串替换操作将搜索字符串替换为替换字符串    set &quot;newfilename=!filename:%search%=%replace%!&quot;    REM 使用ren命令重命名文件    ren &quot;%%F&quot; &quot;!newfilename!!extension!&quot;    REM 记录重命名操作到日志文件    echo [!DATE! !TIME!] Renamed: %%F -&gt; !newfilename!!extension! &gt;&gt; &quot;%logFile%&quot;)REM 显示完成消息echo Renaming complete.REM 帮助文档echo.echo Usage: script.bat [targetFolder] [search] [replace]echo.echo Parameters:echo   targetFolder  : The target folder where files will be renamed.echo                    Default: D:\\tmp\\testecho   search        : The string to search for in file names.echo                    Default: QQQ_AAA_BBB_CCC_echo   replace       : The string to replace the search string with in file names.echo                    Default: QQQ_DDD_CCC_echo.echo Example: script.bat &quot;D:\\Path\\To\\Folder&quot; &quot;searchString&quot; &quot;replaceString&quot;pause\n\n如何给多级文件夹重命名@echo offsetlocal enabledelayedexpansionREM 获取命令行参数或设置默认值set &quot;targetFolder=%~1&quot;if &quot;%targetFolder%&quot;==&quot;&quot; set &quot;targetFolder=D:\\Users\\llddss\\Desktop\\tmp\\test&quot;set &quot;search=%~2&quot;if &quot;%search%&quot;==&quot;&quot; set &quot;search=SSS_CCCC_AAAA_GGGG&quot;set &quot;replace=%~3&quot;if &quot;%replace%&quot;==&quot;&quot; set &quot;replace=SSS_AAA_GGGG_&quot;REM 输入验证和错误处理if not exist &quot;%targetFolder%&quot; (    echo Target folder does not exist.    exit /b)REM 文件夹重命名for /d /r &quot;%targetFolder%&quot; %%F in (*%search%*) do (    set &quot;folder=%%~nxF&quot;    set &quot;newfolder=!folder:%search%=%replace%!&quot;    ren &quot;%%F&quot; &quot;!newfolder!&quot;)echo Renaming complete.pause\n\n如何将指定文件夹下的指定后缀名的文件名保存到指定文件中for /r &quot;文件夹路径&quot; %i in (*.后缀名) do @echo %~nxi &gt;&gt; 输出文件路径\\输出文件名.txt\n\n参考链接\nhttps://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/windows-commands\n\n","categories":["Windows优化"],"tags":["PowerShell"]},{"title":"WindowsTerminal 及 PowerShell 配置","url":"/cmchtgea00066negb7a2g0ppz/","content":"安装WindowsTerminal\nMicrosoft Store 下载\nGithub 下载 https://github.com/microsoft/terminal/releases\n\nPowerShellhttps://github.com/PowerShell/PowerShell/releases\nOh My Posh管理员模式打开终端运行\n# 安装 oh-my-posh 包，让你的命令行更酷炫、优雅Install-Module oh-my-posh -Scope CurrentUser   // 这里是旧版安装方式，最新的oh-my-posh已取消，如果已经这么安装的建议卸载# 卸载 oh-my-posh 包Uninstall-Module oh-my-posh# 安装最新版  oh-my-poshwinget install JanDeDobbeleer.OhMyPosh -s winget  // 下载完成后一定要重启 item，将工具全都关闭然后从新打开。\n\n配置安装 Powershell 插件 PSReadline、posh-git管理员模式打开终端运行\n# 1. 安装 PSReadline 包，该插件可以让命令行很好用，类似 zshInstall-Module -Name PSReadLine  -Scope CurrentUser -Force# 2. 安装 posh-git 包，让你的 git 更好用Install-Module posh-git  -Scope CurrentUser\n\n下载字体下载 oh-my-posh 所需的字体库，这个需要再 oh-my-posh 下载完成之后运行\noh-my-posh font install\n\n优化浏览主题\n打开终端输入\nGet-PoshThemes\n查看官网\nhttps://ohmyposh.dev/docs/themes\n\n\n更改主题输入下列命令打开配置文件\nnotepad $PROFILE\n\n修改配置文件，改为自己喜欢的主题后，保存退出，重启终端\noh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH/主题名.omp.json&quot; | Invoke-Expression\n\n配置远程 SSH 连接添加 SSH 配置1.打开 Windows Terminal 设置，在左侧配置文件处，点击添加新配置文件，选择新建空配置文件\n\n\n名称自定义，命令行更改为\n\nssh root@服务器IP地址 -p 22 -o ServerAliveInterval=20\n\n\n免密码登录\n查看本机是否有 ssh 公钥，如果没有使用命令生成\n\ncat ~/.ssh/id_rsa.pub# 没有公钥，使用下列命令生成ssh-keygen -t rsa -C\n\n\n登录远程主机修改 authorized_keys 文件,将上述 windows 主机生成的 id_rsa.pub 添加进去，如果不存在使用上述 ssh-keygen 命令生成\n\nvi ~/.ssh/authorized_keys\n\n美化远程主机终端安装 Oh My Poshsudo wget https://ghproxy.net/https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/v23.2.0/posh-linux-amd64 -O /usr/local/bin/oh-my-poshsudo chmod +x /usr/local/bin/oh-my-posh\n\n安装主题mkdir ~/.poshthemeswget https://kkgithub.com/JanDeDobbeleer/oh-my-posh/releases/download/v23.2.0/themes.zip -O ~/.poshthemes/themes.zipunzip ~/.poshthemes/themes.zip -d ~/.poshthemeschmod u+rw ~/.poshthemes/*.omp.*rm ~/.poshthemes/themes.zip\n\n应用 Oh My Posh\n在远程主机运行如下命令确定 shell 的类型\n\n$ oh-my-posh get shellbash\n\n\n参考官方文档https://ohmyposh.dev/docs/installation/prompt，针对不同shell类型有不同的应用方式。比如比较常见的bash，通常是在~/.bashrc文件的最下面添加一行\n\neval &quot;$(oh-my-posh init bash --config ~/.poshthemes/jandedobbeleer.omp.json)&quot;\n\n\n保存后重启 ssh 或者运行下列命令\n\nexec bash\n","categories":["Windows优化"],"tags":["PowerShell","WindowsTerminal"]},{"title":"Excel Macro","url":"/cmchtgea1006anegbfc6c3oue/","content":"合并单元格Sub MergedCells()    &#x27;从下向上合并    Dim myRange As Variant    Dim arr As Variant    Dim i, j, cmax, rmax, str, a    Dim rng As Range    Excel.Application.DisplayAlerts = False    &#x27;关闭合并单元格时弹出的仅保留左上角值的弹窗    &#x27;选择需要合并的区域，如果是多个不连续的区域，按住ctrl进行选择即可    Set myRange = Application.InputBox(prompt:=&quot;Select a cell to be expanded&quot;, Type:=8)    &#x27;Address属性返回的是单元格区域的绝对引用，如果是多个不连续区域，是用英文逗号隔开    arr = Split(myRange.Address, &quot;,&quot;)    For Each a In arr   &#x27;遍历选中的每一个不连续的区域，如果是连续区域，那就只有一个        Set rng = Range(Replace(a, &quot;$&quot;, &quot;&quot;))        &#x27;此处括号内得到的已经是字符串格式了，再使用range做引用即可，无需再对括号内的内容进行左右的双引号连接        &#x27;如果有需要把双引号作为连接内容的场景，可以加双重引号，比如&quot;&quot;&quot;excel&quot;&quot;&quot;，得到的就是&quot;excel&quot;；&#x27;也可以直接使用chr(34)进行连接，它对应的就是双引号        rmax = rng.Rows.Count        cmax = rng.Columns.Count        For j = 1 To cmax            For i = rmax To 2 Step -1  &#x27;遍历区域的行到第2行，默认存在标题行            &#x27;从下向上合并，到第2行时，其内容不会和标题行一样，所以不合并，从上向下合并代码量较多                If rng.Cells(i, j).Value = rng.Cells(i - 1, j).Value Then                    With Range(rng.Cells(i - 1, j), rng.Cells(i, j))                        .Merge                        .HorizontalAlignment = xlCenter                        .VerticalAlignment = xlCenter                    End With                End If            Next        Next    Next    Excel.Application.DisplayAlerts = TrueEnd Sub\n\n取消单元格合并并填充Sub SplitMergedCellsAndFill()    Dim myRange As Variant    Dim arr As Variant    Dim rng As Range    Dim cell As Range    Dim i As Long    Dim a As Variant    &#x27; Turn off alerts for unmerging cells    Excel.Application.DisplayAlerts = False    &#x27; Prompt the user to select a range of cells to unmerge and fill    Set myRange = Application.InputBox(prompt:=&quot;Select a cell to be expanded&quot;, Type:=8)    &#x27; Split the selected ranges in case of multiple non-contiguous selections    arr = Split(myRange.Address, &quot;,&quot;)    &#x27; Loop through each selected range    For Each a In arr        Set rng = Range(Replace(a, &quot;$&quot;, &quot;&quot;))        &#x27; Loop through each cell in the selected range        For Each cell In rng            &#x27; Check if the cell is part of a merged cell            If cell.MergeCells Then                &#x27; Get the number of rows in the merged cell area                Dim rowCount As Long                rowCount = cell.MergeArea.Rows.Count                &#x27; Unmerge the cells                cell.MergeArea.UnMerge                &#x27; Fill the unmerged cells with the value from the first cell                For i = 2 To rowCount                    With cell.Offset(i - 1, 0)                        .Value = cell.Value                        .HorizontalAlignment = xlCenter                        .VerticalAlignment = xlCenter                    End With                Next i                &#x27; Set alignment for the original cell                With cell                    .HorizontalAlignment = xlCenter                    .VerticalAlignment = xlCenter                End With            End If        Next cell    Next    &#x27; Turn alerts back on    Excel.Application.DisplayAlerts = TrueEnd Sub\n","categories":["Windows其他"],"tags":["Excel Macro"]},{"title":"操作系统学习笔记","url":"/cmchtgea2006cnegb3xv8afnw/","content":"小林Coding-图解系统\n硬件结构CPU是如何执行程序的图灵机的工作方式\n纸带 》 内存\n纸带中连续的格子 》内存中的数据或程序\n读写头 》 读取纸袋上任意格子的字符或把字符写入到纸带的格子\n读写头上的部件\n存储单元 》 存放数据\n控制单元 》 识别字符是数据还是指令，以及控制程序的流程\n运算单元 》 执行运算指令\n\n\n1+2的执行过程\n\n\n\n首先用读写头把【1、2、+】这3个字符分别写入到纸带的3个格子上\n\n\n读写头读入1到存储设备，这个存储设备称为图灵机的状态\n读写头向右移动一格，用同样的方式把2读入到图灵机的状态，于是现在图灵机的状态中存储着2个连续的数字1、2\n读写头再向右移动一格，碰到+，将+号传输给控制单元，控制单元发现是+号不是数字，所有没有存入到状态，因为+号是运算符指令，作用是加和目前的状态，于是通知运算单元工作。运算单元收到要加和状态中的值的通知后，就会把状态中的1和2读入并计算，再将计算的结果3存放到状态中；\n最后，运算单元将结果返回给控制单元，控制单元将结果传输给读写头，读写头向右移动，把结果3写入到纸带的格子中；\n通过图灵机计算1+2的过程，发现图灵机的主要功能是读取纸带（内存）格子的内容（数据） ，然后交给控制单元识别字符是数字还是运算符指令，如果是数字则存入到图灵机状态中（存储单元），如果是运算符，则通知运算单元读取状态中的数值进行计算，计算结果最终返回给读写头，读写头把结果写入到纸带的格子中。\n\n冯诺依曼模型\n\n中央处理器（CPU）\n\n中央处理器就是我们常说的CPU，32位和64位CPU最主要区别在于一次能计算多少字节数据：\n\n\n32位CPU一次可以计算4个字节（1字节等于8位,4x8bit&#x3D;32bit）；\n64位CPU一次可以计算8个字节（1字节等于8位,8x8bit&#x3D;64bit）；\n这里的32位和64位，通常称为CPU的位宽。\n之所以CPU这样设计，是为了能计算更大的数值，如果是8位的CPU，那么一次只能计算1个字节（2^8）0-255范围内的数值，这样就无法一次完成计算10000*500，于是为了能一次计算大数的运算，CPU需要支持多个byte一起计算，所以CPU位宽越大，可以计算的数值就越大，比如说32位CPU能计算的最大整数为4294967295(2^32)\nCPU内部还有一些组件，常见的有寄存器、控制单元和逻辑运算单元。\n控制单元，控制CPU工作\n逻辑运算单元，计算\n寄存器，根据种类不同划分不同的功能，主要作用是存储计算时的数据（因为内存离CPU太远，寄存器就在CPU里，紧挨控制单元和逻辑运算单元，计算时速度更快）\n通用寄存器，用来存放需要进行运算的数据，比如需要进行加和运算的两个数据。\n程序计数器，用来存储CPU要执行下一条指令所在的内存地址，注意不是存储了下一条要执行的指令，此时指令还在内存中，程序计数器只是存储了下一条指令的地址。\n指令寄存器，用来存放程序计数器指向的指令，也就是指令本身，指令被执行完之前，指令都存储在这里。\n\n\n\n\n\n\n内存\n\n程序和数据都是存储在内存，存储区域是线性的\n\n\n数据存储单位是一个二进制位（bit），即0或1，最小的存储单位是字节（byte），1字节等于8位\n内存的地址是从0开始编号的，然后自增排列，最后一个地址为内存总字节数-1，这种结构好似我们程序里的数组，所以内存的读写任何一个数据的速度都是一样的。\n\n\n输入设备\n\n输入设备向计算机输入数据，计算机经过计算后，把数据输出给输出设备。期间，如果输入设备是键盘，按下按键时是需要和CPU进行交互的，这时就需要用到控制总线了。\n\n\n输出设备\n\n总线\n\n总线是用于CPU和内存以及其他设备之间的通信，总线可分为3中：\n\n\n地址总线，用于指定CPU将要操作的内存地址；\n数据总线，用于读写内存的数据；\n控制总线，用于发送和接收信号，比如中断、设备复位等信号，CPU收到信号后自然进行响应，这时也需要控制总线。\n当CPU要读取内存数据的时候，一般需要通过两个总线：\n首先通过地址总线来指定内存的地址；\n再通过数据总线来传输数据；\n\n\n\n\n\n线路位宽与CPU位宽\n数据是如何通过线路传输的呢？其实是通过操作电压，低电压表示0，高电压表示1。\n\n\n如果构造了高低高这样的信号，其实就是101二进制数据，十进制表示则是5，如果只有一条线路，就意味着每次只能传递1bit的数据，即0或1，那么传输101这个数据，就需要3次，这样效率非常低，这样一位一位传输的方式，称为串行，下一个bit必须等待上一个bit传输完成才能进行传输。如果想一次多传一些数据，增加线路即可，这是数据就可以并行传输。\n为了避免低效率的串行传输方式，线路的位宽最好一次能访问所有的内存地址。CPU想要操作的内存地址就需要地址总线，如果地址总线只有1条，那每次只能表示0或1两种情况，所以CPU一次只能操作2个内存地址，如果想要CPU操作4G的内存，那么就需要32条地址总线，因为2^32&#x3D;4G。\nCPU位宽最好不要小于线路位宽，比如32位CPU控制40位宽的地址总线和数据总线的话，工作起来就会非常复杂其麻烦，所以32位的CPU最好和32位宽的线路搭配，因为32位CPU一次最多只能操作32位宽的地址总线和数据总线。\n64位CPU性能并不一定比32位CPU高很多，很少应用需要算超过32位的数字，所以**如果计算数额不超过32位数字的情况下，32位和64位CPU之间没什么区别，只有当计算超过32位数字的情况下，64为的优势才能体现出来。\n32位CPU最大智能操作4GB内存，就算装了8GB内存条也没用。而64位CPU寻址范围很大，理论最大的寻址空间为2^64。\n\n程序执行的基本过程\n\nCPU执行程序的过程如下\n\n\nCPU读取程序计数器的值，这个值是指令的内存地址，然后CPU的控制单元操作地址总线指定需要访问的内存地址，接着通知内存设备准备数据，数据准备好后通过数据总线将指令数据传给CPU，CPU收到内存传来的数据后，将这个指令数据存入到指令寄存器。\nCPU分析指令寄存器中的指令，确定指令的类型和参数，如果是计算类型的指令，就把指令交给逻辑运算单元运算；如果是存储类型的指令，则交由控制单元执行。\nCPU执行完指令后，程序计数器的值自增，表示指向下一条指令。这个自增的大小，由CPU的位宽决定，比如32位的CPU，指令是4个字节，需要4个内存地址存放，因此程序计数器的值会自增4；\n总结：一个程序执行的时候，CPU会根据程序计数器里的内存地址，从内存里面把需要执行的指令读取到指令寄存器里面执行，然后根据指令长度自增，开始顺序读取下一条指令。\n\na&#x3D;1+2执行具体过程\nCPU不认识a&#x3D;1+2这个字符串，这些字符串只是方便我们程序员认识，要想这段程序能跑起来，还需要包整个程序翻译成汇编语言的程序，这个过程称为编译成汇编代码。针对汇编代码，我们还需要用汇编器翻译成机器码，这些机器码由0和1组成的机器语言，这一条条机器码，就是一条条的计算机指令，这个才是CPU能够真正认识的东西。\n\n\na&#x3D;1+2在32位CPU的执行过程。程序编译过程中，编译器通过分析代码，发现1和2是数据，于是程序运行时，内存会有个专门的区域来存放这些数据，这个区域就是数据段。\n\n数据1被存到0x104位置；\n数据2被存到0x100位置；\n\n\n编译器把a&#x3D;1+2翻译成4条指令，存放到正文段中。如图，这4条指令被存到了0x200~0x20c\n\n0x200 的内容是 load 指令将0x100地址中的数据2装入到寄存器R0；\n0x204 的内容是 load 指令将0x104地址中的数据1装入到寄存器R1；\n0x208 的内容是 add 指令将寄存器R0和R1的数据相加，并把结果存放到寄存器R2；\n0x20C 的内容是 store 指令将R2中的数据存回数据段中的0x108地址中，这个地址也就是变量a内存中的地址；\n\n\n编译完成后，具体执行程序的时候，程序计数器会被设置为0x200地址，然后依此执行这4条指令。\n\n上面的例子中，(0x100,0x104,0x200,0x204,0x208,0x20C按4位增长，是因为在32位CPU下，一条指令占32位大小，4个字节，需要4个内存地址存放，因此间隔4)\n\n而数据的大小是根据你再程序中指定的变量类型，比如int类型的数据占4个字节，char类型的数据则占1个字节。\n\n\n指令\n上⾯的例⼦中，图中指令的内容我写的是简易的汇编代码，⽬的是为了⽅便理解指令的具体内容，事实上指令的内容是⼀串⼆进制数字的机器码，每条指令都有对应的机器码，CPU 通过解析机器码来知道指令的内容；不同的 CPU 有不同的指令集，也就是对应着不同的汇编语⾔和不同的机器码，接下来选⽤最简单的 MIPS指集，来看看机器码是如何⽣成的，这样也能明⽩⼆进制的机器码的具体含义。\n\n\nMIPS的指令是一个32位的整数，高6位代表着操作码，表示这条指令是一条什么样的指令，剩下的26位不同指令类型所表示的内容也就不相同，主要有三种类型R、I和J。\n\n\n\nR指令，用在算术和逻辑操作，里面有读取和写入数据的寄存器地址。如果是逻辑位移操作，后面还有位移操作的位移量，而最后的功能码则是在前面的操作码不够的时候，扩展操作码来表示对应的具体指令的。\nI指令，用在数据传输、条件分支等。这个类型的指令，就没有了位移量和操作码，也没有了第三个寄存器，而是把这三部分直接合并成了一个地址值或一个常数；\nJ指令，用在跳转，高6位之外的26位都是一个跳转后的地址；\n把add 指令将寄存器R0和R1的数据相加，并把结果放入到R2，翻译成机器码。\n\n\n\n加和运算add指令是属于R指令类型：\n\n\nadd 对应的MIPS指令里面的操作码是 000000，以及最末尾的功能码是100000，这些值是固定的，可参考MIPS指令集手册\nrs 代表第一个寄存器R0的编号，即00000；\nrt 代表第二个寄存器R1的编号，即00001；\nrd 代表目标的临时寄存器R2的编号，即00010；\n因为不是位移操作，所以位移量是00000\n把上面这些数字拼在一起就是一条32位的MIPS加法指令了，那么用16进制表示的机器码则是0x00011020\n\n\n编译器在编译程序的时候，会构造指令，这个过程叫做指令的编码。CPU执行程序的时候就会解析指令，这个过程叫做指令的界面。现代⼤多数 CPU 都使⽤来流⽔线的⽅式来执⾏指令，所谓的流⽔线就是把⼀个任务拆分成多个⼩任务，于是⼀条指令通常分为 4 个阶段，称为 4 级流⽔线，如下图：\n\n\n\n四个阶段的具体含义：\n\n\nCPU通过程序计数器读取对应内存地址的指令，这个部分称为 Fetch(取得指令) ；\nCPU对指令进行解码，这个部分称为 Decode(指令译码) ；\nCPU执行指令，这个部分称为 Execution(执行指令) ；\nCPU将计算结果存回寄存器或者将寄存器的值存入内存，这个部分称为 Store(数据回写) ；\n上面这4个阶段，我们称为指令周期（Instrution Cycle），CPU的工作就是一个周期接着一个周期，周而复始。\n\n\n\n取指令的阶段，我们的指令是存放在存储器里的， 实际上，通过程序计数器和指令寄存器取出指令的过程，是由控制器操作的；\n指令的译码过程，也是由控制器进行的；\n指令执行的过程，无论是进行算术操作、逻辑操作，还是进行数据传输、条件分支操作，都是由算术逻辑单元操作的，也就是由运算器处理的。但是如果是一个简单地无条件地址跳转，则是直接在控制器里面完成的，不需要用到运算器。\n\n指令的类型\n指令从功能的角度划分，可以分为5大类：\n\n\n数据传输类型的指令，比如store&#x2F;load 是寄存器与内存见数据传输的指令，mov是将一个内存地址的数据移动到另一个内存地址的指令；\n运算类型的指令，比如加减乘除、位运算、比较大小等等，他们最多只能储量两个寄存器中的数据；\n跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的if-else、switch-case、函数调用等。\n信号类型的指令，比如发生中断的指令 trap;\n闲置类型的指令，比如指令nop，执行后CPU悔空转一个周期；\n\n指令的速度\nCPU的硬件参数都会有GHz这个参数，比如一个1GHz的CPU，指的是时钟频率是1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。对于CPU来说，在一个时钟周期内，CPU仅能完成一个最基本的动作，时钟频率越高，时钟周期越短，工作速度越快；但是一个时钟周期内，大多数不一定能执行完一条指令。\n\n\n程序执行的时候，耗费的CPU时间少就说明程序是快的，对于CPU执行时间，我们可以拆解成CPU时钟周期数（CPU Cycles）和时钟周期时间（Cpu Cycle Time）的乘积。\n要想CPU跑的更快，可以缩短时钟周期时间，提升CPU主频，但是现在很难提升CPU主频，可以减少CPU时钟周期数提升性能。CPU时钟周期数可以拆解成指令数x每条指令的平均周期数（Cycles Per Instruction，简称CPI），于是程序的CPU执行时间&#x3D;指令数xCPIx时钟周期时间。\n因此，想要程序跑得快，优化这三者即可：\n指令数，表示执行程序需要多少条指令，以及哪些指令。这个层面基本靠编译器优化，同样代码，在不同编译器，编译出来的计算机指令会有各种不同的表示方式。\n每条指令的平均时钟周期数CPI，表示一条指令需要多少个时钟周期数，现代大多数COU通过流水线技术（Pipline），让一条指令需要的CPU时钟周期数尽可能的少。\n时钟周期时间，计算机主频，取决于计算机硬件。有的CPU支持超频技术，打开超频意味着把CPU内部的时钟给调快，CPU速度变快，但可能散热压力变大，CPU容易崩溃。\n\n\n\n总结\n64 位相⽐ 32 位 CPU 的优势在哪吗？64 位 CPU 的计算性能⼀定⽐ 32 位 CPU ⾼很多吗？\n\n\n64位可以一次计算超过32位的数字，而32位要通过多步执行，这样效率就没那么高，所以只有运算大数字的时候，64位CPU的优势才能体现出来，否则和32位CPU的计算性能相差不大。\n64位CPU可以寻址更大的内存空间（2^64）,32位CPU最大可以寻址（2^32），可以寻到4G，即使有8G内存，还是只能寻到4G。\n\n\n你知道软件的 32 位和 64 位之间的区别吗？再来 32 位的操作系统可以运⾏在 64 位的电脑上吗？64 位的操作系统可以运⾏在 32 位的电脑上吗？如果不⾏，原因是什么？\n\n\n64位和32位软件，实际上代表指令是64位还是32位的：\n32位指令在64位机器上执行，需要一套兼容机制就可以运行了，但是64位指令在32位指令机器上运行就比较困难，因为32位寄存器存不下64位的指令；\n操作系统实际也是程序，其代表意义就是操作系统中程序的指令是多少位，64位操作系统不能装在32机器上。\n总之，硬件的64位和32位指的是CPU的位宽，软件的64位和32位指的是指令的位宽。\n\n存储金字塔\n内存和硬盘都属于计算机的存储设备，断电后内存的数据会丢失，硬盘则不会，因为硬盘是持久化存储设备，同时也是一个I&#x2F;O设备。\n\n\nCPU内部也有存储数据的组件，比如寄存器、CPU L1&#x2F;L2&#x2F;L3 Cache也都是属于存储设备，只不过存储数据非常小，但是因为靠近CPU核心，所以访问速度非常快，快过硬盘几个数量级别\n\n\n机械硬盘、固态硬盘、内存这3个存储器到底和CPU L1&#x2F;L2&#x2F;L3 Cache相比速度差多少呢？\n\n存储器的层次结构\nCPU比喻成人体的大脑，大脑正在思考的东西好比 寄存器 ，处理速度最快，但是能存储的数据也是最少的；大脑中的记忆好比 CPU Cache ，中文称为CPU高速缓存，处理速度相对寄存器慢一点，但是能存储的数据也相对多一些；CPU Cache通常分为L1、L2、L3三层，其中L1 Cache通常分成数据缓存和指令缓存，L1是距离CPU最近的，因此比L2、L3的读写速度都快、存储空间都小，我们脑中的短期记忆好比L1 Cache，长期记忆好比L2、L3Cache。\n\n\n\n存储器通常可以分为这几个级别：\n\n寄存器\nCPU Cache\nL1-Cache\nL2-Cache\nL3-Cache\n\n\n内存\nSSD&#x2F;HDD 硬盘\n\n\n\n\n寄存器\n最靠近CPU的控制单元和逻辑计算单元的存储器，使用的材料速度最快，价格最贵，数量不多。\n\n\n存储器的数量通常在几十到几百之间，每个寄存器可以用来存储一定的字节（byte）的数据。\n\n\n32位CPU中大多数寄存器可以存储4个字节；\n\n64位CPU中大多数寄存器可以存储8个字节；\n寄存器的访问速度非常快，一般要求在半个CPU时钟周期内完成读写，CPU时钟周期跟CPU主频相关，比如2GHz主频的CPU，他的时钟周期就是1&#x2F;2G，也就是0.5ns。\n\n\nCPU Cache\nCPU Cache用的是一种叫SRAM(Static Random-Access Memory,静态随机存储器)的芯片，之所以叫静态存储器，是因为只要有电，数据就可以保持存在，一旦断电，数据就会丢失。\n\n\nSRAM里面，一个bit的数据，通常需要6个晶体管，所以SRAM的存储密度不高，同样的物理空间下，能存储数据有限，不过因为SRAM的电路简单，所以访问速度非常快。\n\n\nCPU的高速缓存，通常可以分为L1、L2、L3这样的三层高速缓存，也称为一级缓存、二级缓存、三级缓存。\n\n\nL1 Cache\nL1 高速缓存的访问速度和寄存器一样块，通常只需要2-4个时钟周期，而大小在几十KB到几百KB不等。\n\n   每个CPU核心都有一块属于自己的L1高速缓存，指令和数据在L1是分开存放的，所以L1高速缓存通常分成指令缓存和数据缓存。\n# 查看CPU信息# less /proc/cpuinfo |grep model model           : 85 model name      : Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz model           : 85 model name      : Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz #  # cat  /proc/cpuinfo processor       : 0 vendor_id       : GenuineIntel cpu family      : 6 model           : 85 model name      : Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz stepping        : 5 microcode       : 0x1 cpu MHz         : 2494.140 cache size      : 36608 KB physical id     : 0 siblings        : 2 core id         : 0 cpu cores       : 2 apicid          : 0 initial apicid  : 0 fpu             : yes fpu_exception   : yes cpuid level     : 13 wp              : yes flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single pti fsgsbase bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 arat avx512_vnni bugs            : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit bogomips        : 4988.28 clflush size    : 64 cache_alignment : 64 address sizes   : 46 bits physical, 48 bits virtual power management: processor       : 1 vendor_id       : GenuineIntel cpu family      : 6 model           : 85 model name      : Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz stepping        : 5 microcode       : 0x1 cpu MHz         : 2494.140 cache size      : 36608 KB physical id     : 0 siblings        : 2 core id         : 1 cpu cores       : 2 apicid          : 1 initial apicid  : 1 fpu             : yes fpu_exception   : yes cpuid level     : 13 wp              : yes flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single pti fsgsbase bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 arat avx512_vnni bugs            : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit bogomips        : 4988.28 clflush size    : 64 cache_alignment : 64 address sizes   : 46 bits physical, 48 bits virtual power management: # \n\n   在Linux系统可以通过这条命令查看CPU里面的L1 Cache数据缓存的容量大小：\n# cat /sys/devices/system/cpu/cpu0/cache/index0/size32K\n\n   查看L1 Cache指令缓存的容量大小\n# cat /sys/devices/system/cpu/cpu0/cache/index1/size32K\n\nL2 Cache\nL2 高速缓存同样每个CPU核心都有，但是L2高速缓存位置比L1高速缓存距离CPU核心更远，它大小比L1高速缓存更大，CPU型号不同大小也就不同，通常大小在几百KB到几MB不等，访问速度更慢，速度在10-20个时钟周期。\n\n   在Linux系统，我们可以通过这条命令，查看CPU⾥的L2 Cache的容量⼤⼩：\n# cat /sys/devices/system/cpu/cpu0/cache/index2/size4096K\n\nL3 Cache\nL3高速缓存通常是多个CPU核心共用的，位置比L2高速缓存距离CPU核心更远，大小也会更大些，通常大小在几MB到几十MB不等，具体值根据CPU型号而定。访问速度在20-60个时钟周期。\n\n   在Linux系统，我们可以通过这条命令，查看CPU⾥的L3 Cache的容量⼤⼩：\n# cat /sys/devices/system/cpu/cpu0/cache/index3/size36608K\n\n内存\n内存使用的芯片和CPU Cache有所不同，它使用的是一种叫做DRAM(Dynamic Random Access Memory,动态随机存取存储器的芯片)\n\n   相比SRAM，DRAM的密度更高，功耗更低，有更大的容量，而且造价比SRAM芯片便宜很多。\n   DRAM存储一个bit的数据，只需要一个晶体管和一个电容就能存储，但是因为数据被存储在电容里，电容会不断漏电，所以需要定时刷新电容，才能保证数据不会被丢失，这就是DRAM之所以被称为动态存储器的原因，只有不断属性，数据才能被存储起来。\n   DRAM的数据访问电路和数显电路比SRAM更复杂，所以访问速度会更慢，内存速度大概在200-300个时钟周期之间。\nSSD&#x2F;HDD硬盘\nSSD(Solid-state disk)固态硬盘，结构和内存类似，但是相比内存的优点是断电后数据还是存在的，而内存、寄存器、高速缓存断电后数据都会丢失。内存的读写速度比SSD大概快10-1000倍。\n\n\nHDD(Hard Disk Drive)机械硬盘，通过物理读写的方式来访问数据的，访问速比内存慢10W倍左右。\n\n存储器的层次关系\n每个存储器只和相邻的一层存储器设备打交道，并且存储设备为例追求更快的速度，所需材料成本必然是更高，正因为成本太高，所以CPU内部的寄存器、L1\\L2\\L3 Cache只好用较小的容量，相反内存、硬盘则可用更大的容量，这就是存储器层次机构。\n\n\n\nCPU需要访问内存中某个数据的时候，如果寄存器中有这个数据，CPU就直接从寄存器中获取，如果寄存器没有这个数据，CPU就会查询L1高速缓存，如果L1高速缓存没有，则查询L2高速缓存，L2高速缓存没有，就查询L3高速缓存，L3依然没有才去内存中查找数据。\n\n存储器之间的实际价格和性能差距\n总结\n各种存储器之间的关系，可以用在图书馆学习场景举例\n\n\nCPU相当于大脑，正在思考和处理知识的过程就好比寄存器处理数据的过程，速度极快，容量小；\nCPU中的L1-L3 Cache好比大脑中的短期记忆和长期记忆；\n图书馆中的桌子好比内存，放下更多的数据，寻找和查看要花费时间，比CPU Cache慢。\n图书馆的书架相当于硬盘，能放下更多的数据，但是寻找更慢。\n\n\n那机械硬盘、固态硬盘、内存这三个存储器，到底和 CPU L1 Cache 相⽐速度差多少倍呢?\nCPU L1 Cache随机访问延时是1纳秒，内存是100纳秒，SSD随机访问延时是150微秒；CPU L1 Cache比内存快100倍，比SSD快150000倍；\n\n\n\n如何写出让CPU跑的更快的代码\nCPU内部嵌入了CPU Cache（高速缓存），存储量小，离CPU核心很近，缓存读写速度极快，如果运算时从CPU Cache读取数据而不是内存，运算速度就会很快。\n\nCPU Cache有多快   CPU Cache 通常分为⼤⼩不等的三级缓存，分别是 L1 Cache、L2 Cache 和 L3 Cach，其中，L1 Cache通常会分为数据缓存和指令缓存，这意味着数据和指令在 L1 Cache 这⼀层是分开缓存的，上图中的 index0 也就是数据缓存，⽽ index1 则是指令缓存，它两的⼤⼩通常是⼀样的。另外，你也会注意到，L3 Cache ⽐ L1 Cache 和 L2 Cache ⼤很多，这是因为 L1 Cache 和 L2 Cache 都是每个CPU 核⼼独有的，⽽L3 Cache 是多个 CPU 核⼼共享的。程序执⾏时，会先将内存中的数据加载到共享的 L3 Cache 中，再加载到每个核⼼独有的 L2 Cache，最后进⼊到最快的 L1 Cache，之后才会被 CPU 读取。它们之间的层级关系，如下图\n\n\n   越靠近CPU访问越快，根据上图可以看出CPU 从L1 Cache读取数据的速度，相比从内存读取的速度，会快100多倍。\n# 查看L1 Cache数据缓存的大小# cat /sys/devices/system/cpu/cpu0/cache/index0/size32K# 查看L1 Cache指令缓存的大小# cat /sys/devices/system/cpu/cpu0/cache/index1/size32K# 查看L2 Cache的大小# cat /sys/devices/system/cpu/cpu0/cache/index2/size4096K# 查看L3 Cache的大小# cat /sys/devices/system/cpu/cpu0/cache/index3/size36608K\n\nCPU Cache的数据结构和读取过程是什么样的\nCPU Cache的数据是从内存中读取过来的，他是以一小块一小块读取数据的，而不是按照单个数组元素读取的，在CPU Cache中的，这样一小块一小块的数据称为 Cache Line(缓存块) 。\n\n   # 查看L1 Cache数据缓存一次载入数据的大小（字节）   # cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size 64\n\n\n比如有一个int array[100]的数组，当载入array[0]时，由于这个数组元素的大小在内存只占4字节，不足64字节，CPU就会顺序加载数组元素到array[15]，意味着array[0]~array[15]数组元素都会被缓存在CPU Cache中，因此当下次访问这些数组元素，会直接从CPU Cache读取，而不用从内存读取，大大提高了CPU读取数据的性能。\n事实上，CPU读取数据的时候，无论是否放到Cache中，CPU都是先访问Cache，只有当Cache中找不到数据是，才会去访问内存，并把内存中的数据读入到Cache中，CPU再从CPU Cache读取数据。\n那么CPU是怎么知道要访问的内存数据，是否在Cache里？如果在的话，如何找到Cache的数据呢？从最简单的直接映射 Cache（Direct Mapped Cache）说起。\n\n\n\nCPU访问内存数据时，是一小块一小块数据读取的，具体这一块数据的大小，取决于coherench_line_size的值，一般64字节。在内存中，这一块的数据称为内存块（Block），读取的时候我们要拿到数据所在内存块的地址。\n\n对于直接映射Cache采用的策略，就是把内存块的地址始终映射在一个CPU Line(缓存块)的地址，映射关系的实现方式采用取模运算，取模运算的结果就是内存块地址对应的CPU Line(缓存块)的地址。\n举个例⼦，内存共被划分为32个内存块，CPU Cache共有8个CPU Line，假设 CPU 想要访问第15号内存块，如果 15 号内存块中的数据已经缓存在CPU Line中的话，则是⼀定映射在7号CPU Line中，因为15 % 8的值是7。使⽤取模⽅式映射的话，就会出现多个内存块对应同⼀个CPU Line，⽐如上⾯的例⼦，除了 15 号内存块是映射在7号CPU Line中，还有7号、23号、31号内存块都是映射到7号CPU Line中。\n\n\n\n   为了区别不同的内存块，在对应的CPU Line中我们还会存储⼀个组标记（Tag）。这个组标记会记录当前 CPU Line 中存储的数据对应的内存块，我们可以⽤这个组标记来区分不同的内存块。   除了组标记信息外，CPU Line 还有两个信息：\n\n从内存加载过来的实际存放数据（Data）;\n\n有效位（Valid bie），标记对应CPU Line中的数据是否有效，如果是0，无论是否有数据，CPU都会直接访问内存，重新加载数据。\nCPU从CPU Line读取数据，不读取整个数据块，而是读取CPU需要的一个数据片段，这样的数据统称为一个字（Word）。可通过偏移量（Offset）在对应的CPU Line数据块中找到所需的字。\n因此，一个内存的访问地址包括组标记、CPU Line索引、偏移量这三种信息，于是CPU能通过这些信息，在CPU Cache中找到缓存的数据，对应CPU Cache里的数据结构，则是由索引+有效位+组标记+数据块组成。\n\n\n\n   如果内存中的数据已经在 CPU Cahe 中了，那 CPU 访问⼀个内存地址的时候，会经历这 4 个步骤：\n\n根据内存地址中索引信息，计算在 CPU Cahe 中的索引，也就是找出对应的 CPU Line 的地址；\n找到对应 CPU Line 后，判断 CPU Line 中的有效位，确认 CPU Line 中数据是否是有效的，如果是⽆效的，CPU 就会越过CPU Cache直接访问内存，并重新加载数据，如果数据有效，则往下执⾏；\n对⽐内存地址中组标记和 CPU Line 中的组标记，确认 CPU Line 中的数据是我们要访问的内存数据，如果不是的话，CPU 就会直接访问内存，并重新加载数据，如果是的话，则往下执⾏；\n根据内存地址中偏移量信息，从 CPU Line 的数据块中，读取对应的字\n\n如何写出让CPU跑的更快的代码\nCPU访问内存的速度比访问CPU Cache的速度慢近100多倍，如果CPU操作的数据在CPU Cache中的话，将会带来很大的性能提升。访问数据在CPU Cache中的话意味着缓存命中，缓存命中率越高，代码性能越好，CPU跑的越快。因此如何写出让CPU跑的更快的代码可以看做是如何写出让CPU缓存命中率高的代码？\n\n   L1 Cache通常分为数据缓存和指令缓存，如1+1&#x3D;2这个运算，+就是指令，会被存在指令缓存里，而输入数字1会被存在数据缓存里。因此要分开看数据缓存和指令缓存的命中率\n如何提升数据缓存的命中率？\n遍历二维数组有以下两种形式，代码执行结果一样，那种效率更高？\n\n\n通过下列代码可以发现arr[i][j]的执行时间要比arr[j][i]快好几倍，之所以有差距，是因为二维数组array所占用的内存是连续的，如果N&#x3D;2，内存中数组元素的布局顺序是这样的arr[0][0],arr[0][1],arr[1][0],arr[1][1]\n形式1用arr[i][j]访问数组元素的顺序和上述一致。当 CPU 访问array[0][0] 时，由于该数据不在 Cache 中，于是会「顺序」把跟随其后的 3 个元素从内存中加载到 CPUCache，这样当 CPU 访问后⾯的 3 个数组元素时，就能在 CPU Cache 中成功地找到数据，这意味着缓存命中率很⾼，缓存命中的数据不需要访问内存，这便⼤⼤提⾼了代码的性能。\n形式2用arr[j][i]访问数组的顺序是arr[0][0],arr[1][0],arr[0][1],arr[1][1]，访问方式是跳跃式的而不是顺序的，那么如果 N 的数值很⼤，那么操作 array[j][i] 时，是没办法把 array[j+1][i] 也读⼊到 CPU Cache 中的，既然 array[j+1][i] 没有读取到 CPU Cache，那么就需要从内存读取该数据元素了。很明显，这种不连续性、跳跃式访问数据元素的⽅式，可能不能充分利⽤到了 CPU Cache 的特性，从⽽代码的性能不⾼。\n那访问 array[0][0] 元素时， CPU 具体会⼀次从内存中加载多少元素到 CPU Cache 呢？这个问题，在前⾯我们也提到过，这跟 CPU Cache Line 有关，它表示 CPU Cache ⼀次性能加载数据的⼤⼩，可以在Linux ⾥通过 coherency_line_size 配置查看 它的⼤⼩，通常是 64 个字节。也就是说，当 CPU 访问内存数据时，如果数据不在 CPU Cache 中，则会⼀次性会连续加载 64 字节⼤⼩的数据到 CPU Cache，那么当访问array[0][0] 时，由于该元素不⾜ 64 字节，于是就会往后顺序读取array[0][0]~array[0][15] 到 CPU Cache 中。顺序访问的 array[i][j] 因为利⽤了这⼀特点，所以就会⽐跳跃式访问的 array[j][i] 要快。\n提升数据的缓存命中率的方式，是暗中内存布局顺序访问\n\n/** * 如何提升数据缓存的命中率 */#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;unistd.h&gt;void test1(int N)&#123;    int arr[N][N];    for (int i = 0; i &lt; N; i++)    &#123;        for (int j = 0; j &lt; N; j++)        &#123;            arr[i][j] = i * 10 + j;        &#125;    &#125;&#125;void test2(int N)&#123;    int arr[N][N];    for (int i = 0; i &lt; N; i++)    &#123;        for (int j = 0; j &lt; N; j++)        &#123;            arr[j][i] = j * 10 + i;        &#125;    &#125;&#125;int main()&#123;    clock_t start, end;    double cost;    int loop_size = 1000;    start = clock();    test1(loop_size);    end = clock();    cost = (double)(end - start) / CLOCKS_PER_SEC;    printf(&quot;CLOCKS_PER_SEC: %ld\\n&quot;, CLOCKS_PER_SEC);    printf(&quot;cost: %lf\\n&quot;, cost);    sleep(2);    start = clock();    test2(loop_size);    end = clock();    cost = (double)(end - start) / CLOCKS_PER_SEC;    printf(&quot;CLOCKS_PER_SEC: %ld\\n&quot;, CLOCKS_PER_SEC);    printf(&quot;cost: %lf\\n&quot;, cost);    return 0;&#125;# resultCLOCKS_PER_SEC: 1000000cost: 0.005171CLOCKS_PER_SEC: 1000000cost: 0.003415\n\n如何提升指令缓存的命中率？\n提升数据的缓存命中率的方式，是暗中内存布局顺序访问，那么针对指令缓存应该如何提升\n\n/** * 如何提升指令缓存的命中率 */#include &lt;stdio.h&gt;// #include &lt;algorithm&gt;#include &lt;time.h&gt;#include &lt;unistd.h&gt;void test3(int arr[], int N)&#123;    for (int i = 0; i &lt; N; i++)    &#123;        if (arr[i] &lt; 50)        &#123;            arr[i] = 0;        &#125;    &#125;&#125;// void test4(int arr[], int N)// &#123;//     sort(arr, arr + N);// &#125;int main()&#123;    clock_t start, end;    double cost;    int loop_size = 100;    // 指令缓存    int arr[loop_size];    for (int i = 0; i &lt; loop_size; i++)    &#123;        arr[i] = rand() % 100;    &#125;    start = clock();    test3(arr, loop_size);    end = clock();    cost = (double)(end - start) / CLOCKS_PER_SEC;    printf(&quot;CLOCKS_PER_SEC: %ld\\n&quot;, CLOCKS_PER_SEC);    printf(&quot;cost: %lf\\n&quot;, cost);    sleep(2);    // start = clock();    // test4(arr, loop_size);    // end = clock();    // cost = (double)(end - start) / CLOCKS_PER_SEC;    // printf(&quot;CLOCKS_PER_SEC: %ld\\n&quot;, CLOCKS_PER_SEC);    // printf(&quot;cost: %lf\\n&quot;, cost);    return 0;&#125;# resultCLOCKS_PER_SEC: 1000000cost: 0.000003\n\n   先遍历再排序速度快，还是先排序再遍历速度快呢？\n   在回答这个问题之前，我们先了解 CPU 的分⽀预测器。对于 if 条件语句，意味着此时⾄少可以选择跳转到两段不同的指令执⾏，也就是 if 还是 else 中的指令。那么， 如果分⽀预测可以预测到接下来要执⾏ if ⾥的指令，还是 else 指令的话，就可以「提前」把这些指令放在指令缓存中，这样 CPU 可以直接从 Cache读取到指令，于是执⾏速度就会很快。\n   当数组中的元素是随机的，分⽀预测就⽆法有效⼯作，⽽当数组元素都是是顺序的，分⽀预测器会动态地根据历史命中数据对未来进⾏预测，这样命中率就会很⾼。因此，先排序再遍历速度会更快，这是因为排序之后，数字是从⼩到⼤的，那么前⼏次循环命中 if &lt; 50的次数会⽐较多，于是分⽀预测就会缓存 if ⾥的 array[i] &#x3D; 0 指令到 Cache 中，后续 CPU 执⾏该指令就只需要从 Cache 读取就好了。\n如何提升多核CPU的缓存命中率\n单核CPU，虽然只执行一个进程，但是操作系统给每个进程分配一个时间片，时间片用完调度下一个进程，各个进程按时间片交替占用CPU，宏观上看各个进程同时执行。\n\n\n多核心CPU情况下，进程可能在不同CPU核心来回切换执行，虽然L3 Cache是多核之间共享的，但是L1、L2都是每个核心独有的，如果一个进程在不同核心来回切换，各个核心的缓存命中率就会受到影响，相反如果进程都在同一个核心上执行，那么L1、L2缓存命中率可以有效提高，减少访问内存的频率。\n\n\n当有多个同时执行计算密集型的线程，为防止因切换到不同核心，导致缓存命中率下降的问题，我们可以把线程绑定在某一个CPU核心上，这样性能可以得到非常可观的提升。\n\n\nLinux上提供了sched_setaffinity方法，来实现将线程绑定在某个CPU核心这一功能。\n\n# define _GNU_SOURCE# include &lt;sched.h&gt;int sched_setaffinity(pid_t pid,size_t cpusetsize,cpu_set_t * mask);\n\n总结   由于随着计算机技术的发展， CPU 与 内存的访问速度相差越来越多，如今差距已经⾼达好⼏百倍了，所以CPU 内部嵌⼊了 CPU Cache 组件，作为内存与 CPU 之间的缓存层， CPU Cache 由于离 CPU 核⼼很近，所以访问速度也是⾮常快的，但由于所需材料成本⽐较⾼，它不像内存动辄⼏个 GB ⼤⼩，⽽是仅有⼏⼗ KB 到 MB ⼤⼩。\n   当 CPU 访问数据的时候，先是访问 CPU Cache，如果缓存命中的话，则直接返回数据，就不⽤每次都从内存读取速度了。因此，缓存命中率越⾼，代码的性能越好。但需要注意的是，当 CPU 访问数据时，如果 CPU Cache 没有缓存该数据，则会从内存读取数据，但是并不是只读⼀个数据，⽽是⼀次性读取⼀块⼀块的数据存放到 CPU Cache 中，之后才会被 CPU 读取。\n   内存地址映射到 CPU Cache 地址⾥的策略有很多种，其中⽐较简单是直接映射 Cache，它巧妙的把内存地址拆分成索引 + 组标记 + 偏移量的⽅式，使得我们可以将很⼤的内存地址，映射到很⼩的 CPUCache 地址⾥。\n   要想写出让 CPU 跑得更快的代码，就需要写出缓存命中率⾼的代码， CPU L1 Cache 分为数据缓存和指令缓存，因⽽需要分别提⾼它们的缓存命中率：\n\n对于数据缓存，我们在遍历数据的时候，应该按照内存布局的顺序操作，这是因为 CPU Cache 是根据 CPU Cache Line 批量操作数据的，所以顺序地操作连续内存数据时，性能能得到有效的提升；\n\n对于指令缓存，有规律的条件分⽀语句能够让 CPU 的分⽀预测器发挥作⽤，进⼀步提⾼执⾏的效率；\n另外，对于多核 CPU 系统，线程可能在不同 CPU 核⼼来回切换，这样各个核⼼的缓存命中率就会受到影响，于是要想提⾼进程的缓存命中率，可以考虑把线程绑定 CPU 到某⼀个 CPU 核⼼。\n\n\nCPU 缓存的一致性CPU Cache的数据写入\n\nCPU Cache通常分为三级缓存：L1 Cache、L2 Cache、L3 Cache。L1离CPU核心最近，L3最远，每个核心有各自的L1&#x2F;L2Cache、L3 Cache所有核心共享。\n\n\nCPU Cache是由多个Cache Line(缓存块)组成的，CPU Line是CPU从内存读取数据的基本单位，而CPU Line是由各种标志（Tag）+数据块（Data Block）组成\n\n\n   数据除了读操作还要有写操作，如果数据写入Cache之后，内存与Cache相对应的数据将会不同，于是要讲Cache中的数据同步到内存里。以下是将Cache中的数据写入到内存中的方法。\n写直达（Write Through）\n保持内存与Cache一致性的最简单方法是，把数据同时写入内存和Cache中，这种方法称为写直达（Write Through）。\n\n\n   在这个⽅法⾥，写⼊前会先判断数据是否已经在 CPU Cache ⾥⾯了：\n\n如果数据已经在 Cache ⾥⾯，先将数据更新到 Cache ⾥⾯，再写⼊到内存⾥⾯；\n\n如果数据没有在 Cache ⾥⾯，就直接把数据更新到内存⾥⾯。\n写直达法很直观，也很简单，但是问题明显，⽆论数据在不在 Cache ⾥⾯，每次写操作都会写回到内存，这样写操作将会花费⼤量的时间，⽆疑性能会受到很⼤的影响。\n\n\n写回（Write Back）\n既然写直达由于每次写操作都会把数据写回到内存，而导致影响性能，为了减少数据写回内存的频率，出现了写回（Write Back）的方法。\n\n   \n   \n\n当发生写操作时，数据已经在CPU Cache里的话，就把数据更新到CPU Cache里，同时标记CPU Cache里的这个Cache Block为脏（Dirty）的，这个脏的标记代表这个时候CPU Cache里的Cache Block的数据和内存是不一致的，这种情况不用把数据写到内存里。\n当发生写操作时，数据对应的Cache Block里存放到是别的内存地址的数据的话，就要检测这个Cache Block里的数据有没有被标记为脏的，如果是脏的话，就要把这个Cache Block里的数据写回内存，然后把当前要写入的数据，写入到这个Cache Block里，同时把它也标记为脏的；如果Cache Block里面的数据，没有被标记为脏，则将数据直接写入到Cache Block里，然后再把这个CacheBlock标记为脏即可。\n写回：在把数据写入到Cache时，只有在缓存不命中，同时数据对应的Cache中的Cache Block标记为脏的情况下，才会将数据写到内存中；而缓存命中情况下，则在写入Cache后，只要把该数据对应的Cache Block标记为脏即可，而不用写到内存里。\n这样的好处是，如果大量的操作都能命中缓存，那么大部分时间里的CPU都不需要读写内存，自然性能要比写直达会高很多。\n\n缓存一致性问题\n多核CPU下，L1、L2 Cache是多个核心各自独有的，会带来多核心的缓存一致性（Cache Coherence）的问题，如果不能保证缓存一致性的问题，可能会造成结果错误。\n\n\n假设A核心和B核心同时运行2个线程，都操作共同变量i(初始值为0)这时如果 A 号核⼼执⾏i++ 语句的时候，为了考虑性能，使⽤了我们前⾯所说的写回策略，先把值为1 的执⾏结果写⼊到L1&#x2F;L2 Cache中，然后把 L1&#x2F;L2 Cache 中对应的Block 标记为脏的，这个时候数据其实没有被同步到内存中的，因为写回策略，只有在 A 号核⼼中的这个 Cache Block 要被替换的时候，数据才会写⼊到内存⾥。\n如果这时旁边的B 号核⼼尝试从内存读取 i 变量的值，则读到的将会是错误的值，因为刚才 A 号核⼼更新i 值还没写⼊到内存中，内存中的值还依然是 0。 这个就是所谓的缓存⼀致性问题， A 号核⼼和 B 号核⼼的缓存，在这个时候是不⼀致，从⽽会导致执⾏结果的错误。\n\n\n解决方法：\n\n\n\n某个CPU核心里的Cache数据更新是，必须要传播到其他核心的Cache，这个称为写传播（Write Propagation）;\n\n某个CPU核心里对数据的操作顺序，必须在其他核心看起来顺序是一致的，这个称为事务的串形化（Transaction Serialization）\n假设有一个含有4核心的CPU，4个核心都操作共同的变量i(初始值为0)。A核心先把值变为100，B核心先把值变为200，这两个修改都会传播到C核心和D核心。\n\n问题：\n\n\n\n如果C核心先收到A核心再收到B核心更新数据的事件，C核心看到的变量i先是变成100后变成200；\n如果D核心先收到B核心再收到C核心更新数据的事件，D核心看到的变量i先是变成200后变成100；\n虽然做到了写传播，但是各个Cache里的数据还是不一致的，所以要保证C核心和D核心看到相同顺序的数据变化，需要做到以下2点：\nCPU核心对于Cache中数据的操作，需要同步给其他CPU核心；\n要引入锁的概念，如果两个CPU核心里有相同数据的Cache，那么对于这个Cache数据的更新，只有拿到了锁，才能进行相应的数据更新。\n\n\n\n总线嗅探\n写传播的原则就是当某个CPU核心更新了Cache中的数据，要将该事件广播通知单其他核心。最常见的实现方式就是总线嗅探。\n\n   以前⾯的 i 变量例⼦来说明总线嗅探的⼯作机制，当 A 号 CPU 核⼼修改了 L1 Cache 中 i 变量的值，通过总线把这个事件⼴播通知给其他所有的核⼼，然后每个 CPU 核⼼都会监听总线上的⼴播事件，并检查是否有相同的数据在⾃⼰的 L1 Cache ⾥⾯，如果 B 号 CPU 核⼼的 L1 Cache 中有该数据，那么也需要把该数据更新到⾃⼰的 L1 Cache。\n   可以发现，总线嗅探⽅法很简单， CPU 需要每时每刻监听总线上的⼀切活动，但是不管别的核⼼的Cache 是否缓存相同的数据，都需要发出⼀个⼴播事件，这⽆疑会加重总线的负载。\n   另外，总线嗅探只是保证了某个 CPU 核⼼的 Cache 更新数据这个事件能被其他 CPU 核⼼知道，但是并不能保证事务串形化。于是，有⼀个协议基于总线嗅探机制实现了事务串形化，也⽤状态机机制降低了总线带宽压⼒，这个协议就是 MESI 协议，这个协议就做到了 CPU 缓存⼀致性。\nMSSI协议\nMESI协议其实是4个状态单词的开头字母的缩写，分别是：\n\n\nModified，已修改\nExclusive，独占\nShared，共享\nInvalidated，已失效\n\n\n「已修改」状态就是我们前⾯提到的脏标记，代表该 Cache Block 上的数据已经被更新过，但是还没有写到内存⾥。⽽「已失效」状态，表示的是这个 Cache Block ⾥的数据已经失效了，不可以读取该状态的数据。\n独占」和「共享」状态都代表 Cache Block ⾥的数据是⼲净的，也就是说，这个时候 Cache Block ⾥的数据和内存⾥⾯的数据是⼀致性的。\n「独占」和「共享」的差别在于，独占状态的时候，数据只存储在⼀个 CPU 核⼼的 Cache ⾥，⽽其他CPU 核⼼的 Cache 没有该数据。这个时候，如果要向独占的 Cache 写数据，就可以直接⾃由地写⼊，⽽不需要通知其他 CPU 核⼼，因为只有你这有这个数据，就不存在缓存⼀致性的问题了，于是就可以随便操作该数据。\n另外，在「独占」状态下的数据，如果有其他核⼼从内存读取了相同的数据到各⾃的 Cache ，那么这个时候，独占状态下的数据就会变成共享状态。\n那么，「共享」状态代表着相同的数据在多个 CPU 核⼼的 Cache ⾥都有，所以当我们要更新 Cache ⾥⾯的数据的时候，不能直接修改，⽽是要先向所有的其他 CPU 核⼼⼴播⼀个请求，要求先把其他核⼼的Cache 中对应的 Cache Line 标记为「⽆效」状态，然后再更新当前 Cache ⾥⾯的数据。\n\n\n举例：\n\n\n当 A 号 CPU 核⼼从内存读取变量 i 的值，数据被缓存在 A 号 CPU 核⼼⾃⼰的 Cache ⾥⾯，此时其他 CPU 核⼼的 Cache 没有缓存该数据，于是标记 Cache Line 状态为「独占」，此时其 Cache 中的数据与内存是⼀致的；\n\n然后 B 号 CPU 核⼼也从内存读取了变量 i 的值，此时会发送消息给其他 CPU 核⼼，由于 A 号 CPU核⼼已经缓存了该数据，所以会把数据返回给 B 号 CPU 核⼼。在这个时候， A 和 B 核⼼缓存了相同的数据， Cache Line 的状态就会变成「共享」，并且其 Cache 中的数据与内存也是⼀致的；\n\n当 A 号 CPU 核⼼要修改 Cache 中 i 变量的值，发现数据对应的 Cache Line 的状态是共享状态，则要向所有的其他 CPU 核⼼⼴播⼀个请求，要求先把其他核⼼的 Cache 中对应的 Cache Line 标记为「⽆效」状态，然后 A 号 CPU 核⼼才更新 Cache ⾥⾯的数据，同时标记 Cache Line 为「已修改」状态，此时 Cache 中的数据就与内存不⼀致了。\n\n如果 A 号 CPU 核⼼「继续」修改 Cache 中 i 变量的值，由于此时的 Cache Line 是「已修改」状态，因此不需要给其他 CPU 核⼼发送消息，直接更新数据即可。\n\n如果 A 号 CPU 核⼼的 Cache ⾥的 i 变量对应的 Cache Line 要被「替换」，发现 Cache Line 状态是「已修改」状态，就会在替换前先把数据同步到内存。\n所以，可以发现当 Cache Line 状态是「已修改」或者「独占」状态时，修改更新其数据不需要发送⼴播给其他 CPU 核⼼，这在⼀定程度上减少了总线带宽压⼒。\n\n\n\n总结\nCPU 在读写数据的时候，都是在 CPU Cache 读写数据的，原因是 Cache 离 CPU 很近，读写性能相⽐内存⾼出很多。对于 Cache ⾥没有缓存 CPU 所需要读取的数据的这种情况， CPU 则会从内存读取数据，并将数据缓存到 Cache ⾥⾯，最后 CPU 再从 Cache 读取数据。\n\n⽽对于数据的写⼊， CPU 都会先写⼊到 Cache ⾥⾯，然后再在找个合适的时机写⼊到内存，那就有「写直达」和「写回」这两种策略来保证 Cache 与内存的数据⼀致性：\n\n写直达，只要有数据写⼊，都会直接把数据写⼊到内存⾥⾯，这种⽅式简单直观，但是性能就会受限于内存的访问速度；\n写回，对于已经缓存在 Cache 的数据的写⼊，只需要更新其数据就可以，不⽤写⼊到内存，只有在需要把缓存⾥⾯的脏数据交换出去的时候，才把数据同步到内存⾥，这种⽅式在缓存命中率⾼的情况，性能会更好；\n\n\n当今 CPU 都是多核的，每个核⼼都有各⾃独⽴的 L1&#x2F;L2 Cache，只有 L3 Cache 是多个核⼼之间共享的。所以，我们要确保多核缓存是⼀致性的，否则会出现错误的结果。要想实现缓存⼀致性，关键是要满⾜ 2 点：\n\n第⼀点是写传播，也就是当某个 CPU 核⼼发⽣写⼊操作时，需要把该事件⼴播通知给其他核⼼；\n第⼆点是事物的串⾏化，这个很重要，只有保证了这个，才能保障我们的数据是真正⼀致的，我们的程序在各个不同的核⼼上运⾏的结果也是⼀致的；\n\n\n基于总线嗅探机制的 MESI 协议，就满⾜上⾯了这两点，因此它是保障缓存⼀致性的协议。\n\nMESI 协议，是已修改、独占、共享、已实现这四个状态的英⽂缩写的组合。整个 MSI 状态的变更，则是根据来⾃本地 CPU 核⼼的请求，或者来⾃其他 CPU 核⼼通过总线传输过来的请求，从⽽构成⼀个流动的状态机。另外，对于在「已修改」或者「独占」状态的 Cache Line，修改更新其数据不需要发送⼴播给其他 CPU 核⼼。\n\n\nCPU是如何执行任务的CPU如何读写数据CPU架构\n只有先了解CPU架构，才能了解CPU如何读写数据，现代CPU架构如下\n\n\n\n一个CPU里包含多个核心，每个核心都有自己的L1&#x2F;L2 Cache，L1 Cache又分为dCache(数据缓存)和iCache（指令缓存），L3 Cache则是多个核心共享的，这就是CPU典型的缓存层次。\n上面提到的都是CPU内部的Cache，外面还有内存和硬盘，这些存储设备共同构成了金字塔存储层次。如下图所示：\n\n\n\n从上图也可以看到，从上往下，存储设备容量越大，访问速度越慢。至于每个设备的存储延时，参考下图：\n\n\nCPU读写单位\n\nCPU从内存读取数据到Cache的时候，并不是一个字节一个字节读取，而是一块一块的方式来读取数据的，这一块一块的数据称为CPU Line(缓存行)，所以CPU Line是CPU总内存读取数据到Cache的单位。\n至于CPU Line的大小，在Linux系统可以用以下命令查到，L1 Cache Line大小是64字节，也就意味着L1 Cache一次载入数据的大小是64字节。\n\n# 查看L1 Cache数据缓存一次载入数据的大小# cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size64\n\n\n对数组的加载，CPU会加载数组里面连续多个数据到Cache里，因此我们应该按照物理内存地址分布的顺序去访问元素，Cache命中率就会很高，于是能减少从内存读取数据的频率，从而提高内存的性能。\n不使用数组，使用单独的变量的时候，则会有Cache伪共享的问题，Cache伪共享问题是一个性能杀手，要尽量规避。\n\nCPU伪共享问题\n现在假设有⼀个双核⼼的 CPU，这两个 CPU 核⼼并⾏运⾏着两个不同的线程，它们同时从内存中读取两个不同的数据，分别是类型为 long 的变量 A 和 B，这个两个数据的地址在物理内存上是连续的，如果Cahce Line 的⼤⼩是 64 字节，并且变量 A 在 Cahce Line 的开头位置，那么这两个数据是位于同⼀个Cache Line 中，⼜因为 CPU Line 是 CPU 从内存读取数据到 Cache 的单位，所以这两个数据会被同时读⼊到了两个 CPU 核⼼中各⾃ Cache 中。\n\n\n\n如果这两个不同核⼼的线程分别修改不同的数据，⽐如 1 号 CPU 核⼼的线程只修改了 变量 A，或 2 号 CPU 核⼼的线程的线程只修改了变量 B，会发⽣什么呢？\n这种因为多个线程同时读写同⼀个 Cache Line 的不同变量时，⽽导致 CPU Cache 失效的现象称为伪共享（False Sharing）。\n\n避免伪共享方法\n在Linux内核中存在_cacheline_aligned_in_smp宏定义，用于解决伪共享的问题\n\n#ifdef CONFIG_SMP#define __cacheline_aligned_in_smp __cacheline__aligned#else#define __cacheline_aligned_in_smp#endif\n\n\n从上面的宏定义可以看到：\n\n如果在多核（MP）系统里，该宏定义是__cacheline_aligned，也就是Cache Line的大小；\n如果在单核系统里，该宏定义是空的。因此，针对同一个CacheLine中的共享的数据，在多核之间竞争比较严重，为了防止伪共享现象的发生，可以采用上面的宏定义使得变量在CacheLine里是对齐的。\n\n\n举例：有如下结构体，结构体里面的2个成员变量a和b在物理内存地址上是连续的，可能会位于同一个Cache line中\n\n\nstruct test&#123;    int a;    int b;&#125;\n\n   \n\n为了防止前面提到的Cache伪共享问题，可以使用上面定义的宏定义，将b的地址设为对其地址：\n\nstruct test&#123;    int a;    int b __cacheline_aligned_in_smp;&#125;\n\n\n\n所以，避免Cache伪共享实际上是用空间换时间的思想，浪费一部分Cache空间，从而换来性能的提升。\n\nCPU如何选择线程进程与线程\nLinux内核中，进程和线程都是用task_struct结构体来表示，区别在于线程的tark_struct结构体里部分资源是共享了进程已创建的资源，比如内存地址空间、代码段、文件描述符等，所有Linux中的线程也被称为轻量级进程，因为线程的tark_struct相比进程的tark_struct承载的资源比较少，因此以轻得名。\n\n   一般来说，没有创建线程的进程是只有单个执行流，被称是主线程。如果想让进程处理更多的事情，可以创建多个线程分别去处理，无论怎样，对应到内核里都是tark_struct。\n\n   所以，Linux内核里的调度器，调度的对象就是tark_struct，接下来把这个数据结构统称为任务。\n普通任务与实时任务   Linux系统中，根据任务优先级和响应要求，主要分为两种，优先级数值越小，优先级越高：\n\n实时任务，对系统的响应要求很高，尽可能快的执行任务，优先级在0-99范围内的就算实时任务；\n普通任务，响应时间没有很高的要求，优先级在100-139范围内都是普通任务级别；\n\n调度类\n由于任务有优先级之分，Linux系统为了保障高优先级的任务尽可能早的被执行，分了以下调度：\n\n\n\n\n调度类\n调度器\n调度策略\n运行队列\n\n\n\nDeadline\nDeadline调度器\nSCHED_DEANLINE\ndl_rq\n\n\nRealtime\nRT调度器\nSCHED_FIFOS SCHED_RR\nrt_rq\n\n\nFair\nCFS调度器\nSHCED_NORMAL SCHED_BATCH\ncfs_rq\n\n\n   Deadline和Realtime这两个调度类都是应用于实时任务的，这两个调度类的调度策略合起来有这3种\n\nSCHED_DEADLINE：按照deadline进行调度，距离当前时间点最近的deadline的任务会被优先调度\nSCHED_FIFO：对于相同优先级的任务，按照先来先服务的原则，但是优先级更高的任务可以抢占低优先级的任务，也就是高优先级的任务可以插队。\nSCHED_RR：对于相同优先级的任务，轮流运行，每个任务都有一定的时间片，当用完时间片的任务通常会被放到队列尾部，以保证相同优先级任务的公平性，但是高优先级的任务依然可以抢占低优先级的任务；\n\n完全公平调度\n平日遇到的基本都是普通任务，对于普通任务来说公平性最重要，在Linux里，实现了基于CFS的调度算法，也就是完全公平调度（Completely Fair Scheduling）。这个算法理念是想让分配给每个任务的CPU时间是一样，为每个任务安排一个虚拟运行时间vruntime，如果一个任务在运行，运行时间越久，该任务的runtime自然越大，没有被运行的任务，vruntime不会变化。所以在CFS算法调度的时候会优先选择vruntime少的任务，以保证每个任务的公平性。\n\n   这就好⽐，让你把⼀桶的奶茶平均分到 10 杯奶茶杯⾥，你看着哪杯奶茶少，就多倒⼀些；哪个多了，就先不倒，这样经过多轮操作，虽然不能保证每杯奶茶完全⼀样多，但⾄少是公平的。当然，上⾯提到的例⼦没有考虑到优先级的问题，虽然是普通任务，但是普通任务之间还是有优先级区分的，所以在计算虚拟运⾏时间 vruntime 还要考虑普通任务的权重值，注意权重值并不是优先级的值，内核中会有⼀个 nice 级别与权重值的转换表， nice 级别越低的权重值就越⼤，⾄于 nice 值是什么，我们后⾯会提到。于是就有了以下这个公式：\n   虚拟运行时间vruntime +&#x3D; 实际运行时间delta_exec * NICE_0_LOAD&#x2F;权重\n   NICE_0_LOAD 可以认为它是⼀个常量，那么在「同样的实际运⾏时间」⾥，⾼权重任务的 vruntime ⽐低权重任务的 vruntime 少，你可能会奇怪为什么是少的？你还记得 CFS 调度吗，它是会优先选择 vruntime 少的任务进⾏调度，所以⾼权重的任务就会被优先调度了，于是⾼权重的获得的实际运⾏时间⾃然就多了。\nCPU运行队列\n一个系统通常都会运行着很多任务，多任务的数量基本都是远超CPU核心数量，因此这时候就需要排队。\n\n   事实上，每个CPU都有自己的运行队列（Run Queue，rq），用于描述在此CPU上运行的所有进程，其队列包含三个运行队列，Deadline运行队列dl_rq、实时任务运行队列rt_rq和CFS（完全公平）运行队列cfs_rq，其中cfs_rq使用红黑树来描述的，按vruntime大小来排序的，最左侧叶子节点，就是下次会被调度的任务。\n\n   这几种调度类是由优先级的，Deadline &gt; Realtime &gt; Fair，这意味着Linux选择下一个任务执行的时候，会按照优先级顺序进行选择，也就是从dl_rq里选择任务，然后从rt_rq里选择任务，最后从cfs_rq里选择任务，因此，实施任务总是会比普通任务优先被执行。\n调整优先级   如果我们启动任务的时候，没有特意去只有优先级的话，默认情况下都是普通任务，普通任务的调度类Fair，由CFS调度器来进行管理。CFS调度器的目的是实现任务运行的公平性，也就是保障每个任务的运行时间是差不多的。\n   如果想让某个普通任务有更多的执行时间，可以调整任务的nice值，从而让优先级高一些的任务执行更多时间。nice值能设置的范围是 -20~19，值越低，表明优先级越高，默认优先级是0。\n   nice 值并不是表示优先级，⽽是表示优先级的修正数值，它与优先级（priority）的关系是这样的： priority(new) &#x3D; priority(old) + nice。内核中， priority 的范围是0139，值越低，优先级越⾼，其中前⾯的 099 范围是提供给实时任务使⽤的，⽽ nice 值是映射到100~139，这个范围是提供给普通任务⽤的，因此 nice 值调整的是普通任务的优先级。\n# 启动任务指定nice的值，比如将msqld以-3优先级$ nice -n 3 /usr/sbin/mysqld# 修改已经运行中的任务的优先级，renice调整nice值$ renice -10 -p &lt;进程ID&gt;# nice 调整的是普通任务的优先级，所以不管怎么缩⼩ nice 值，任务永远都是普通任务，如果某些任务要求实时性⽐较⾼，那么你可以考虑改变任务的优先级以及调度策略，使得它变成实时任务，⽐如# 修改调度策略为 SCHED_FIFO, 并且优先级为1$ chrf -f 1 -p 1996\n\n总结   理解 CPU 是如何读写数据的前提，是要理解 CPU 的架构， CPU 内部的多个 Cache + 外部的内存和磁盘都就构成了⾦字塔的存储器结构，在这个⾦字塔中，越往下，存储器的容量就越⼤，但访问速度就会⼩。\n   CPU 读写数据的时候，并不是按⼀个⼀个字节为单位来进⾏读写，⽽是以 CPU Line ⼤⼩为单位， CPULine ⼤⼩⼀般是 64 个字节，也就意味着 CPU 读写数据的时候，每⼀次都是以 64 字节⼤⼩为⼀块进⾏操作。\n   因此，如果我们操作的数据是数组，那么访问数组元素的时候，按内存分布的地址顺序进⾏访问，这样能充分利⽤到 Cache，程序的性能得到提升。但如果操作的数据不是数组，⽽是普通的变量，并在多核 CPU的情况下，我们还需要避免 Cache Line 伪共享的问题。\n   所谓的 Cache Line 伪共享问题就是，多个线程同时读写同⼀个 Cache Line 的不同变量时，⽽导致 CPU Cache 失效的现象。那么对于多个线程共享的热点数据，即经常会修改的数据，应该避免这些数据刚好在同⼀个 Cache Line 中，避免的⽅式⼀般有 Cache Line ⼤⼩字节对⻬，以及字节填充等⽅法。\n   系统中需要运⾏的多线程数⼀般都会⼤于 CPU 核⼼，这样就会导致线程排队等待 CPU，这可能会产⽣⼀定的延时，如果我们的任务对延时容忍度很低，则可以通过⼀些⼈为⼿段⼲预 Linux 的默认调度策略和优先级。\n软终断中断是什么\n在计算机中，中断是系统用来 响应硬件设备请求 的一种 机制 ，操作系统收到硬件的中断请求 ，会打断正在执行的进程 ，然后 调用内核中的中断处理程序 来响应请求。\n\n\n中断是一种异步的时间处理机制，可以提高系统的并发处理能力。操作系统接收到中断请求，会打断其他进程的运行，所以 中断请求的响应程序，也就是中断处理程序，要尽可能快的执行完，这样可以减少对正常进程运行调度地影响。\n中断处理程序在响应中断时，还可能会 临时关闭中断 ，意味着当前中断处理程序没有执行完之前，系统中其他的中断请求都无法被响应，也就是说中断可能会丢失，所以中断处理程序要快。\n\n什么是软中断\nLinux系统 为了解决中断处理程序执行过长和中断丢失的问题，将中断过程分成了两个阶段，分别是上半部和下半部分 。\n\n\n上半部分用来快速处理中断 ，一般会暂时关闭中断请求，主要负责处理跟硬件紧密相关或者时间敏感的事情。\n\n下半部分用来延迟处理上半部未完成的工作 ，一般以 内核线程 的方式运行。\n举例：⽹卡收到⽹络包后，会通过 硬件中断 通知 内核 有新的数据到了，于是内核就会调⽤ 对应的中断处理程序 来 响应 该事件，这个事件的处理也是会分成上半部和下半部。 上部分要做到快速处理 ，所以只要把⽹卡的数据读到内存中，然后更新⼀下硬件寄存器的状态，⽐如把状态更新为表示数据已经读到内存中的状态值。接着， 内核会触发⼀个软中断 ，把⼀些处理 ⽐较耗时且复杂的事情 ，交给 软中断处理程序 去做，也就是中断的下半部，其主要是需要从内存中找到⽹络数据，再按照⽹络协议栈，对⽹络数据进⾏逐层解析和处理，最后把数据送给应⽤程序。\n也可以理解为：\n\n上半部直接处理硬件请求，也就是硬中断，主要是负责耗时短的工作，特点是快速执行；\n\n下半部是由内核触发，也就是软中断，主要是负责上半部未完成的工作，通常是耗时比较长的事情，特点是延迟执行。\n还有⼀个区别，硬中断（上半部）是会打断 CPU 正在执⾏的任务，然后⽴即执⾏中断处理程序，⽽软中断（下半部）是以内核线程的⽅式执⾏，并且 每⼀个 CPU 都对应⼀个软中断内核线程，名字通常为「ksoftirqd&#x2F;CPU 编号」，⽐如 0 号 CPU 对应的软中断内核线程的名字是 ksoftirqd&#x2F;0 。\n\n\n系统里有哪些软中断\n在linux系统里，可以通过&#x2F;proc&#x2F;softirqs的内容来知晓软中断的运行情况，以及&#x2F;proc&#x2F;interrupts的内容来知晓硬中断的运行情况\n\n# 软中断# cat /proc/softirqs                CPU0       CPU1         HI:          0          1   TIMER:    2941251    3669555  NET_TX:         13         30  NET_RX:     751341     633127   BLOCK:      31171     319516IRQ_POLL:          0          0 TASKLET:       6189       4299   SCHED:    2889645    3612050 HRTIMER:        844        621     RCU:    2475791    2558127#  \n\n\n每一个CPU都有自己对应软中断的 累计运行次数 ，有以下几点需要注意：\n\n\n第一列代表软中断的类型；\nNET_TX 网络发送中断\nNET_RX 网络接收中断\nTIMEER 定时中断\nRCU RCU锁中断\nSCHED 内核调度中断\n\n\n通用类型的软中断在不同CPU的累计次数应该相差不多。\n上述数值是系统运行依赖累计中断次数，数值大小没什么参考意义，但是 系统的中断次数的变化速率 才是关注的，可以用 watch -d cat &#x2F;proc&#x2F;softirqs 来查看中断次数的变化速率。\n\n\n   软中断是以内核线程的方式执行的，我们可以用ps命令查到，内核线程的名字外面都有中括号，这说明 ps 无法获取他们的命令行参数，所以一般来书，命令在中括号里的，都可以认为是内核线程。\n# ps -aux | grep softirqroot           4  0.0  0.0   3532   712 ?        S    06:11   0:00 [ksoftirtqd/0]root        3828  0.0  0.0   3532   712 pts/0    S+   06:11   0:00 grep softirq\n\n# 硬中断# cat /proc/interrupts           CPU0       CPU1     1:          0          9   IO-APIC   1-edge      i8042  4:          8          0   IO-APIC   4-edge      ttyS0  6:          0          3   IO-APIC   6-edge      floppy  8:          0          0   IO-APIC   8-edge      rtc0  9:          0          0   IO-APIC   9-fasteoi   acpi 11:          0          0   IO-APIC  11-fasteoi   virtio2, uhci_hcd:usb1 12:         15          0   IO-APIC  12-edge      i8042 14:      60895          0   IO-APIC  14-edge      ata_piix 15:          0          0   IO-APIC  15-edge      ata_piix 24:          0          0   PCI-MSI 98304-edge      virtio1-config 25:          0     325982   PCI-MSI 98305-edge      virtio1-req.0 26:          0          0   PCI-MSI 81920-edge      virtio0-config 27:     271563          0   PCI-MSI 81921-edge      virtio0-input.0 28:     319446          1   PCI-MSI 81922-edge      virtio0-output.0 29:          1     222760   PCI-MSI 81923-edge      virtio0-input.1 30:          0     252507   PCI-MSI 81924-edge      virtio0-output.1NMI:          0          0   Non-maskable interruptsLOC:   16335881   17020127   Local timer interruptsSPU:          0          0   Spurious interruptsPMI:          0          0   Performance monitoring interruptsIWI:        822         44   IRQ work interruptsRTR:          0          0   APIC ICR read retriesRES:    6347318    6209295   Rescheduling interruptsCAL:     165150     168811   Function call interruptsTLB:     381312     379175   TLB shootdownsTRM:          0          0   Thermal event interruptsTHR:          0          0   Threshold APIC interruptsDFR:          0          0   Deferred Error APIC interruptsMCE:          0          0   Machine check exceptionsMCP:        196        196   Machine check pollsHYP:          0          0   Hypervisor callback interruptsHRE:          0          0   Hyper-V reenlightenment interruptsHVS:          0          0   Hyper-V stimer0 interruptsERR:          0MIS:          0PIN:          0          0   Posted-interrupt notification eventNPI:          0          0   Nested posted-interrupt eventPIW:          0          0   Posted-interrupt wakeup event# \n\n如何定位软中断CPU使用率过高的问题\n要想知道当前系统的软中断情况，可以使用top命令查看，\n\n# top 运行后按数字1，即可显示所有CPU核心$ toptop - 06:19:49 up 17:16,  0 users,  load average: 0.00, 0.01, 0.00Tasks:   6 total,   1 running,   5 sleeping,   0 stopped,   0 zombie%Cpu0  :  0.7 us,  0.7 sy,  0.0 ni, 98.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st%Cpu1  :  4.7 us,  0.7 sy,  0.0 ni, 94.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   3936.1 total,    140.9 free,   2247.1 used,   1548.2 buff/cacheMiB Swap:      0.0 total,      0.0 free,      0.0 used.   1422.4 avail Mem     PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                              1 root      20   0    2608    532    464 S   0.0   0.0   0:00.32 sh                                                   7 root      20   0  860320 108440  16812 S   0.0   2.7   0:47.39 jupyter-lab                                         67 root      20   0    2608   1680   1576 S   0.0   0.0   0:00.55 sh                                                  95 root      20   0  768984  59680  14136 S   0.0   1.5   0:02.84 python3                                             98 root      20   0  769116  59816  13968 S   0.0   1.5   0:02.98 python3                                           4005 root      20   0    6352   3408   2872 R   0.0   0.1   0:00.00 top \n\n\n上述%Cpu0&#x2F;%Cpu1两行中倒数第二列0.0 si，就是CPU在软中断上的使用率\n如果要知道那种软中断类型开销最大，可以使用 watch -d cat &#x2F;proc&#x2F;softirqs 命令来查看每个软中断类型的中断次数的变化速率。\n\nEvery 2.0s: cat /proc/softirqs            8cefcdab7b74: Thu Feb  2 06:26:04 2023                    CPU0       CPU1          HI:          0          1       TIMER:    3054275    3769281      NET_TX:         13         30      NET_RX:     799145     645134       BLOCK:      32037     326075    IRQ_POLL:          0          0     TASKLET:       6191       4341       SCHED:    3002391    3711619     HRTIMER:        844        621         RCU:    2559520    2637886\n\n   一般对于网络I&#x2F;O较高的Web服务器，NET_RX网络接收中断的变化速率相比其他中断类型快很多。如果发现NET_RX网络接收中断次数的变化速率过快，可以使用 sar -n DEV 查看网卡的网络包接收速率情况，然后分析是那个网卡有大量的网络包进来。接着又 tcpdump 抓包分析包的来源。\n总结   为了避免由于中断处理程序执⾏时间过⻓，⽽影响正常进程的调度， Linux 将中断处理程序分为上半部和下半部：\n\n上半部，对应硬中断，由硬件触发中断，⽤来快速处理中断；\n\n下半部，对应软中断，由内核触发中断，⽤来异步处理上半部未完成的⼯作；\nLinux 中的软中断包括⽹络收发、定时、调度、 RCU 锁等各种类型，可以通过查看 &#x2F;proc&#x2F;softirqs 来观察软中断的累计中断次数情况，如果要实时查看中断次数的变化率，可以使⽤ watch -d cat &#x2F;proc&#x2F;softirqs 命令。\n每⼀个 CPU 都有各⾃的软中断内核线程，我们还可以⽤ ps 命令来查看内核线程，⼀般名字在中括号⾥⾯到，都认为是内核线程。\n如果在 top 命令发现， CPU 在软中断上的使⽤率 (si) ⽐较⾼，⽽且 CPU 使⽤率最⾼的进程也是软中断 ksoftirqd 的时候，这种⼀般可以认为系统的开销被软中断占据了。\n这时我们就可以分析是哪种软中断类型导致的，⼀般来说都是因为⽹络接收软中断导致的，如果是的话，可以⽤ sar 命令查看是哪个⽹卡的有⼤量的⽹络包接收，再⽤ tcpdump 抓⽹络包，做进⼀步分析该⽹络包的源头是不是⾮法地址，如果是就需要考虑防⽕墙增加规则，如果不是，则考虑硬件升级等。\n\n\n为什么0.1+0.2不等于0.3总结\n为什么负数要用补码来表示？负数之所以用补码表示，主要是为了统一和整数的加减法操作一样，毕竟数字的加减法是很常用的一个操作，尽量以统一方式运作。\n十进制怎么转换成二进制？十进制整数转换成二进制使用的是除2取余法，十进制小数使用的是乘2取整法。\n计算机怎么存小数？以浮点数的形式存储小数，大多数计算机都是IEEE754标准定义的浮点数格式，包含三个部分：\n\n\n符号位：表示数字是正数还是负数，0表示正数，1表示负数\n\n指数位：指定了⼩数点在数据中的位置，指数可以是负数，也可以是正数，指数位的⻓度越⻓则数值的表达范围就越⼤；\n\n尾数位：⼩数点右侧的数字，也就是⼩数部分，⽐如⼆进制 1.0011 x 2^(-2)，尾数部分就是 0011，⽽且尾数的⻓度决定了这个数的精度，因此如果要表示精度更⾼的⼩数，则就要提⾼尾数位的⻓度；\n⽤ 32 位来表示的浮点数，则称为单精度浮点数，也就是我们编程语⾔中的 float 变量，⽽⽤ 64 位来表示的浮点数，称为双精度浮点数，也就是 double 变量。\n\n\n\n0.1+0.2&#x3D;&#x3D;0.3吗？不是的， 0.1 和 0.2 这两个数字⽤⼆进制表达会是⼀个⼀直循环的⼆进制数，⽐如 0.1 的⼆进制表示为 0.00011 0011 0011… （0011 ⽆限循环)，对于计算机⽽⾔， 0.1 ⽆法精确表达，这是浮点数计算造成精度损失的根源。因此， IEEE 754 标准定义的浮点数只能根据精度舍⼊，然后⽤「近似值」来表示该⼆进制，那么意味着计算机存放的⼩数可能不是⼀个真实值。0.1 + 0.2 并不等于完整的 0.3，这主要是因为这两个⼩数⽆法⽤「完整」的⼆进制来表示，只能根据精度舍⼊，所以计算机⾥只能采⽤近似数的⽅式来保存，那两个近似数相加，得到的必然也是⼀个近似数。\n\n操作系统结构Linux内核Windows内核\n计算机是由各种外部硬件组成的，比如CPU、内存、硬盘等，如果每个应用都要和这些硬件设备对接通信协议，过于麻烦，所以需要内核作为中间人来负责，内核作为应用连接硬件设备的桥梁，应用程序只关心与内核的交互，不用关系硬件的细节。\n\n   \n   内核有哪些能力呢？\n\n管理进程、线程，决定那个进程、线程使用CPU，也就是进程调度的能力；\n\n管理内存，决定内存的分配与回收，也就是内存管理的能力；\n\n管理硬件设备，为进程与硬件设备之间提供通信能力，也就是硬件通信能力；\n\n提供系统调用，如果应用程序要运行更高权限的服务，那么就需要有系统调用，他是用户程序与操作系统之间的接口。\n内核是怎么工作的？\n\n\n\n内核具有很高的权限，可以控制CPU，内存，硬盘等硬件，而应用程序具有的权限很小，因此大多数系统把内存分成了两个区域：\n\n\n内核空间：这个内存空间只可以内核程序可以访问；\n\n用户空间：这个内存空间专门给应用程序使用；\n\n用户空间的代码智能访问一个局部的内存空间，而内核空间的代码可以访问所有内存空间。因此当程序使用用户空间时，我们常说程序在 用户态 执行，而程序使用内核空间时，程序则在 内核态 执行。\n\n内核程序执⾏在内核态，⽤户程序执⾏在⽤户态。当应⽤程序使⽤系统调⽤时，会产⽣⼀个中断。发⽣中断后， CPU 会中断当前在执⾏的⽤户程序，转⽽跳转到中断处理程序，也就是开始执⾏内核程序。内核处理完后，主动触发中断，把 CPU 执⾏权限交回给⽤户程序，回到⽤户态继续⼯作。\n\n\nLinux的设计\nLinux内核设计的理念主要有以下几点\n\n\nMultiTask，多任务\nSMP，对称多处理\nELF，可执行文件链接格式\nMonolithic Kernel，宏内核\n\n\nMultiTask\nMultiTask的意思就是 多任务，代表Linux是一个多任务的系统，多任务意味着可以有多个任务同时执行，这里的 同时 可以是 并发或并行；\n\n\n\n对于单核CPU，可以让每个任务执行一小段时间，时间就切换到另外一个任务，宏观角度看，一段时间内执行多个任务，这被称为 并发。\n对于多核CPU，多个任务可以同时被不同核心的CPU同时执行，这被称为 并行。\n\n\nSMP\nSMP的意思是 对称多处理，代表每个CPU的地位是相等的，对资源的使用权限也是相同的，多个CPU共享同一个内存，每个CPU都可以访问完整的内存和硬件资源。这个特点决定Linxu操作系统不会有某个CPU单独服务应用程序或内核程序，而是每个程序都可以被分配到任意一个CPU上被执行。\n\nELF\nELF的意思是 可执行文件链接格式，他是Linux操作系统中可执行文件的存储格式，可以看到它的结构如下：\n\nELF文件有2种索引，Program header table中记录了 运行时所需的段，而Section header table记录了二进制文件中各个 段的首地址。\nELF文件怎么生成的呢？\n\n\n\n编写的代码首先通过 编译器 编译成汇编代码，接着通过 汇编器 变成目标代码，也就是目标文件，最后通过 链接器 把多个目标文件及调用的各种函数库链接起来，形成一个可执行文件，也就是ELF文件。\nELF文件怎么被执行？\n\n执行ELF文件的时候，通过 装载器 把ELF文件装载到内存里，CPU读取内存中的指令和数据，于是程序就被执行起来了。\n\n\n\nMonolithic Kernel\nMonolithic Kernel的意思是 宏内核 ，Linux内核架构就是宏内核，意味着Linux的内核是一个完整的可执行程序，且拥有最高的权限。\n宏内核的特征是系统内核的所有模块，比如进程调度、内存管理、文件系统、设备驱动等都运行在内核态。不过Linux也实现了动态加载内核模块的功能，例如大部分设备驱动是以可加载模块的形式存在的，与内核其他模块解耦。\n与宏内核相反的是 微内核，微内核架构的内核只保留最基本的能力，比如进程调度、虚拟机内存、中断等，把一些应用放在了用户空间，比如驱动程序、文件系统等。这样服务与服务之间是隔离的，单个服务出现问题不会影响其他，提高了操作系统的稳定性和可靠性。微内核内核功能少，可移植性⾼，相⽐宏内核有⼀点不好的地⽅在于，由于驱动程序不在内核中，⽽且驱动程序⼀般会频繁调⽤底层能⼒的，于是驱动和硬件设备交互就需要频繁切换到内核态，这样会带来性能损耗。华为的鸿蒙操作系统的内核架构就是微内核。\n还有⼀种内核叫混合类型内核，它的架构有点像微内核，内核⾥⾯会有⼀个最⼩版本的内核，然后其他模块会在这个基础上搭建，然后实现的时候会跟宏内核类似，也就是把整个内核做成⼀个完整的程序，⼤部分服务都在内核中，这就像是宏内核的⽅式包裹着⼀个微内核。\n\n\n内存管理虚拟内存虚拟内存\n单片机没有操作系统，每次写完代码，要借助工具将程序烧录进去， 单片机的CPU是直接操作内存的物理地址 。在这种情况下，要想在内存中同时运⾏两个程序是不可能的。如果第⼀个程序在 2000 的位置写⼊⼀个新的值，将会擦掉第⼆个程序存放在相同位置上的所有内容，所以同时运⾏两个程序是根本⾏不通的，这两个程序会⽴刻崩溃。\n\n\n操作系统如何解决这个问题？\n\n   上述问题的关键是两个程序都引用了绝对物理地址，而这是需要避免的\n   可以把进程所使用的的地址 隔离 开来，让操作系统为每个进程分配独立有的一套 虚拟地址，每隔进程都有，互不干涉。前提是每隔进程都不能访问物理地址。\n\n   操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。\n   如果程序要访问虚拟地址，由操作系统转换成不同的物理地址，这样不同进程运行的时候，写入不同的物理地址，不会冲突。\n\n程序使用的地址叫虚拟内存地址（Virtual Memory Address）；\n\n实际存在硬件里的空间地址叫物理内存地址（Physical Memory Address）\n操作系统引入虚拟内存，进程持有的虚拟地址会通过CPU芯片中的 内存管理单元（MMU） 的映射关系来转变成物理地址，然后在通过物理地址访问内存。\n\n\n\n\n操作系统是如何管理虚拟地址和物理地址之间的关系？\n\n   主要有两种方式，分别是 内存分段和内存页\n内存分段\n程序有若干个逻辑分段组成，如可由代码分段、数据分段、栈段、堆段组成。 不同的段是由不同的属性的，所以就用分段（Segementation）的形式把这些段分离出来。\n\n\n分段机制下，虚拟地址和物理地址是如何映射的？\n\n   分段机制下的虚拟地址由两部分组成， 段选择子和段内偏移量 。\n\n\n段选择子 就保存在段寄存器里面。段选择子里面最重要的就是 段号，用作段表的 索引 ，段表 里面保存的是这个 段的基地址、段的界限和特权等级等。\n\n虚拟地址中的 段内偏移量 应该位于0和段界限之间，如果 段内偏移量 是合法的，就将 段基地址加上段内偏移量 得到 物理内存地址。\n在上面知道 虚拟地址 是通过 段表 与 物理地址 进行映射的，分段机制把程序的虚拟地址分成4个段，每个段在段表中有一个项，在这一项找到段的基地址，再加上偏移量，于是就能找到物理内存中的地址。\n\n\n\n   如果访问段3中偏移量500的虚拟地址，我们可以计算出物理地址为，段3基地址7000+偏移量500&#x3D;7500。\n   分段的办法很好，解决程序本省不需要关系具体的物理内存地址的问题，但也有一些不足之处：\n\n内存碎片的问题\n内存交换的效率低的问题。\n\n\n分段为什么会产生内存碎片的问题？\n\n   假设有1G物理内存，用户执行多个程序，其中游戏占用512MB内存，浏览器占用128MB内存，音乐占用256MB内存。\n   这个时候关闭浏览器，空闲内存还有1024-512-256&#x3D;256MB，如果这个256MB不是连续的，被分成了2段128MB内存，这就会导致没有内存再打开一个200MB的程序。\n\n   这里的内存碎片问题共有2处地方：\n\n外部内存碎片，也就是产生多个不连续的小物理内存，导致新的程序无法被加载；\n\n内部内存碎片，程序所有的内存都被装载到了物理内存，但是这个程序有部分的内存可能并不是很常使用，这也会导致内存的浪费。\n针对上面两种内存碎片的问题，解决外部内部碎片的问题就是 内存交换。\n\n\n\n分段为什么会导致内存交换效率低的问题？\n\n   对于多进程的系统来说，用分段的方式，内存碎片是很容易产生的，产生了内存碎片，不得不重新 swap 内存区域，这个过程会产生性能瓶颈。因为硬盘的访问速度要比内存慢太多，每一次内存交换都需要把一大段连续内存数据写到硬盘上，所以， 如果内存交换的时候，交换的是一个占内存空间很大的程序，这样整个机器都会显得卡顿。为解决内存分段的内存碎片和内存交换效率低的问题，就出现了内存分页。\n内存分页\n分段的好处是能产生连续的内存空间，但是会出现内存碎片和内存交换空间太大的问题。要解决这些问题，就要想出能少出现内存碎片的办法，另外当需要进行内存交换的时候，让需要交换写入或从磁盘装载的数据更少一点，这样就可以解决问题了。这就是内存分页。 内存分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小。这样一个连续并且尺寸固定的内存空间叫做 页（Page）。在Linux下，每一页的大小为 4KB 。\n\n   虚拟地址与物理地址之间通过 页表 来映射，如下图：\n\n   页表是存储在内存里面的，内存管理单元（MMU） 就做虚拟内存地址转换成物理地址的工作。当进程访问的虚拟地址页在页表中查不到是，系统就会产生一个 缺页异常，进入系统内核空间分配物理内存、更新进程页表、最后再返回用户空间，恢复进程的运行。\n\n分页是怎么解决分段的内存碎片、内存交换效率低的问题？\n\n\n由于内存空间都是预先规划分好的不会想分段会产生间隙非常小的内存，这正是分队会产生内存碎片的原因， 采用分页，那么释放的内存都是以页为单位释放的，也就不会产生无法给进程使用的小内存。\n如果内存空间不够，操作系统会把其他正运行的进程中的 最近没被使用 的内存页面给释放掉，也就是暂时写在硬盘上，称为 换出（Swap Out），一旦需要的时候再加载进来，称为 换入（Swap In）。所以一次写入磁盘的也只有少数的一个或几个页，不会花太多时间， 内存交换效率就相对高。\n\n\n\n另外，分页的方式使得我们在加载程序的时候，不再需要一次性的吧程序都加载到物理内存中， **只有在程序运行中，需要用到对应虚拟内存夜里面的指令和数据是，再加载到物理内存里面去。\n\n\n分页机制下，虚拟地址和物理地址是如何映射的？\n\n   在分页机制下，虚拟地址分为两部分，页号和页内偏移。 页号作为页表的索引 ，页表包含物理页每页所在 物理内存的基地址 ，这个基地址与页内偏移的组合就形成了物理内存地址，见下图\n\n\n内存地址转换，其实就是以下步骤：\n\n\n把虚拟内存地址，切分成页号和偏移量；\n根据页号，从页表里面，查询到对应的物理页号；\n用物理页号加上从虚拟内存地址切分出的偏移量，就得到了物理内存地址。\n\n\n举例：虚拟内存中的页通过页表映射为了物理内存中的页，如下图：\n\n\n\n上述分页看起来没问题，放到实际操作系统，这么简单的分页肯定会有问题的，存在什么缺陷呢？\n\n\n空间上存在缺陷。操作系统可以同时运行非常多的进程，意味着页表会非常庞大。在32位环境下，虚拟地址空间有4GB，假设一个页是4KB(2^12)，那么大概就需要100万（2^20）个页，每个 页表项 需要4个字节大小存储，那么整个4GB空间的映射就需要4MB内存来存储页表。但是每个进程都是有自己的虚拟地址空间的也就是页表，那么100个进程的话，就需要400MB的内存来存储页表，这占用过多内存\n\n多级页表\n解决上述问题可以采用 多级页表（Multi-Level Page Table） 的解决方案。\n对于单⻚表的实现⽅式，在 32 位和⻚⼤⼩ 4KB 的环境下，⼀个进程的⻚表需要装下 100 多万个「⻚表项」，并且每个⻚表项是占⽤ 4 字节⼤⼩的，于是相当于每个⻚表需占⽤ 4MB ⼤⼩的空间。我们把这个 100 多万个「⻚表项」的单级⻚表再分⻚，将⻚表（⼀级⻚表）分为 1024 个⻚表（⼆级⻚表），每个表（⼆级⻚表）中包含 1024 个「⻚表项」，形成⼆级分⻚。如下图所示：\n\n\n\n\n分了⼆级表，映射 4GB 地址空间就需要 4KB（⼀级⻚表） + 4MB（⼆级⻚表）的内存，这样占⽤空间不是更⼤了吗？\n\n   如果使⽤了⼆级分⻚，⼀级⻚表就可以覆盖整个 4GB 虚拟地址空间，但 如果某个⼀级⻚表的⻚表项没有被⽤到，也就不需要创建这个⻚表项对应的⼆级⻚表了，即可以在需要时才创建⼆级⻚表 。做个简单的计算，假设只有 20% 的⼀级⻚表项被⽤到了，那么⻚表占⽤的内存空间就只有 4KB（⼀级⻚表） + 20% *4MB（⼆级⻚表） &#x3D; 0.804MB ，这对⽐单级⻚表的 4MB 是不是⼀个巨⼤的节约\n\n对于64位的系统，两级分页肯定不够，就变成了四级目录，分别是：\n\n\n全局页目录项PGD(Page Global Directory)\n上层页目录项PUD(Page Upper Directory)\n中间页目录项PMD(Page Middle Directory)\n页表项PTD(Page Table Entry)\n\n\n   多级⻚表虽然解决了空间上的问题，但是虚拟地址到物理地址的转换就多了⼏道转换的⼯序，这显然就降低了这俩地址转换的速度，也就是带来了时间上的开销。程序是有局部性的，即在⼀段时间内，整个程序的执⾏仅限于程序中的某⼀部分。相应地，执⾏所访问的存储空间也局限于某个内存区域。\n\n   我们可以利用这一特性，把最常访问的几个页表项存储到访问速度更快的硬件，于是CPU芯片中加入了一个 专门存放程序最常访问的页表项的Cache，这个Cache就是TLB（Transaction Lookaside Buffer），通常称为页表缓存、转址旁路缓存、快表等 。\n\n   在CPU芯片里面，封装了内存管理单元（Memory Management Unit）芯片，它用来完成地址转换和TLB的访问与交互，有了TLB后，CPU寻址时会先查TLB，如果没找到，才会继续查常规的页表。TLB因为经常访问的页不多，所以命中率很高。\n段页式内存管理\n内存分段和内存分页并不是对立的，他们是可以组合起来在同一个系统中使用的，组合起来后称为段页式管理。\n\n\n   段页式管理的实现方式：\n\n先将程序划分多个有逻辑意义的段，也就是分段机制；\n\n接着把每个段划分成多个页，也就是对分段划分出来的连续空间，再划分固定大小的页\n这样，地址结构就由 段号、段内页号和页内位移 三部分组成。用于段页式地址变换的数据结构是一个程序一张段表，每个段又建立一张页表，段表中的地址是页表起始地址，而页表中的地址则为某页的物理页号，如图所示：\n\n\n\n\n段页式地址变换中要得到物理地址必须经过三层内存访问：\n\n\n第一次访问段表，得到页表起始地址；\n\n第二次访问页表，得到物理页号；\n\n第三次将物理页号与页内位移组合，得到物理地址。\n可用软、硬件结合的方式实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率。\n\n\nLinux内存管理   Linux内存主要采用的是页式内存管理，但同时也不可避免地涉及了段机制。\n   Linux系统中的每个段地址都是从0地址开始的整个4GB虚拟空间（32位环境下），也就是所有的段的起始地址都是一样的。这意味着Linux系统中的代码，包括操作系统本身的代码和应用程序代码，所面对的地址空间都是线性地址空间（虚拟地址），这种做法相当于屏蔽了处理器中的逻辑地址概念，段只被用于访问控制和内存保护。\n\nLinux的虚拟地址空间是如何分布的？\n\n   Linux操作系统中，虚拟地址空间内部又被分为 内核空间和用户空间 两部分，不同位数的系统，地址空间的额范围也不同。比如最常见的32位和64位系统，如下所示：\n\n   通过这⾥可以看出：32 位系统的内核空间占⽤ 1G ，位于最⾼处，剩下的 3G 是⽤户空间；64 位系统的内核空间和⽤户空间都是 128T ，分别占据整个内存空间的最⾼和最低处，剩下的中间部分是未定义的。再来说说，内核空间与⽤户空间的区别：   进程在⽤户态时，只能访问⽤户空间内存；只有进⼊内核态后，才可以访问内核空间的内存；虽然每个进程都各⾃有独⽴的虚拟内存，但是 每个虚拟内存中的内核地址，其实关联的都是相同的物理内存 。这样，进程切换到内核态后，就可以很⽅便地访问内核空间内存。\n\n32位内存空间解析：\n\n\n   通过上述图可以看到用户内存空间，从低到高分别是7中不同的内存段：\n\n程序文件段，包括二进制可执行代码；\n\n已初始化的数据段，包括静态常量；\n\n未初始化数据段，包括未初始化的静态变量；\n\n堆段，包括动态分配的内存，从低地址开始向上增长；\n\n文件映射段，包括动态库、共享内存库等，从低地址开始向上增长（跟硬件和内核版本有关）；\n\n栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 8MB ，也可以自定义大小。\n在这些内存段中，堆和文件映射段的内存是动态分配的。比如说，使用C标准库的malloc()或者mmap()，就可以分别在堆和文件映射段动态分配内存。\n\n\n总结   为了在多进程环境下，使得进程之间的内存地址不受影响，相互隔离，于是操作系统就为每个进程独⽴分配⼀套 虚拟地址空间 ，每个程序只关⼼⾃⼰的虚拟地址就可以，实际上⼤家的虚拟地址都是⼀样的，但分布到物理地址内存是不⼀样的。作为程序，也不⽤关⼼物理地址的事情。\n   每个进程都有⾃⼰的虚拟空间，⽽物理内存只有⼀个，所以当启⽤了⼤量的进程，物理内存必然会很紧张，于是操作系统会通过 内存交换技术 ，把不常使⽤的内存暂时存放到硬盘（换出），在需要的时候再装载回物理内存（换⼊）。\n   那既然有了虚拟地址空间，那必然要把虚拟地址「映射」到物理地址，这个事情通常由操作系统来维护。那么对于虚拟地址与物理地址的映射关系，可以有 分段和分⻚ 的⽅式，同时两者结合都是可以的。内存分段是根据程序的逻辑⻆度，分成了栈段、堆段、数据段、代码段等，这样可以分离出不同属性的段，同时是⼀块连续的空间。但是每个段的⼤⼩都不是统⼀的，这就会导致内存碎⽚和内存交换效率低的问题。\n   于是，就出现了内存分⻚，把虚拟空间和物理空间分成⼤⼩固定的⻚，如在 Linux 系统中，每⼀⻚的⼤⼩为 4KB 。由于分了⻚后，就不会产⽣细⼩的内存碎⽚。同时在内存交换的时候，写⼊硬盘也就⼀个⻚或⼏个⻚，这就⼤⼤提⾼了内存交换的效率。\n   再来，为了解决简单分⻚产⽣的⻚表过⼤的问题，就有了 多级⻚表 ，它解决了空间上的问题，但这就会导致 CPU 在寻址的过程中，需要有很多层表参与，加⼤了时间上的开销。于是根据程序的 局部性原理 ，在CPU 芯⽚中加⼊了 TLB ，负责缓存最近常被访问的⻚表项，⼤⼤提⾼了地址的转换速度。\n   Linux 系统主要采⽤了分⻚管理，但是由于 Intel 处理器的发展史， Linux 系统⽆法避免分段管理 。于是Linux 就把所有段的基地址设为 0 ，也就意味着所有程序的地址空间都是线性地址空间（虚拟地址），相当于屏蔽了 CPU 逻辑地址的概念，所以段只被⽤于访问控制和内存保护。\n   另外， Linxu 系统中虚拟空间分布可分为 ⽤户态和内核态 两部分，其中⽤户态的分布：代码段、全局变量、BSS、函数栈、堆内存、映射区。\n进程与线程进程线程基础知识进程进程的概念\n我们编写的代码知识一个存储在硬盘的静态文件，变异后生成二进制可执行文件，当我们运行这个可执行文件后，他会被载到内存中，接着CP会执行程序中的每一条指令，那么这个 运行中的程序就被称为进程（Process）。\n\n   假设有一个会读取硬盘文件的程序被执行，当进程要从硬盘读取数据时，CPU不需要阻塞等待数据的返回，而是去执行另外的进程。当硬盘数据返回是，CPU会收到个 中断，于是CPU再继续运行这个进程。\n\n   这种 多个程序，交替执行 的思想，就是CPU管理多个进程的初步想法。对于一个支持多进程的系统，CPU会从一个进程快速切换至另一个进程，其间每个进程各运行几十或几百个毫秒。虽然单核CPU在某一个瞬间，智能运行一个进程，但在1秒钟其间，他可能会运行多个进程，这样产生 并行的错觉 ，实际上这是 并发。\n\n并发和并行有什么区别？\n\n\n\n进程与程序关系的类比\n\n   晚饭时间，男生尝试给女生做法，在网上找到菜谱后，按着菜谱买了原料，然后边学菜谱边做菜。\n\n   突然女生想喝饮料了，那么男生只好把做菜的事情暂停一下，并在手机菜谱上标记做到哪一个步骤，把状态信息记录下来，然后听从女生的指令跑去楼下买一瓶冰可乐后，又回到厨房继续做菜。\n\n这体现了，CPU可以从一个进程（做菜）切换到另外一个进程（买可乐），在切换前必须要记录当前进程中运行的状态信息，以备下次切换回来的时候可以恢复执行。所以，可以发现进程有着 运行-暂停-运行 的活动规律。\n\n进程的状态\n在知道运行-暂停-运行的互动规律后。一般来说，一个进程并不是自始至终连续不停的运行的。他与并发执行中的其他进程的执行是相互制约的。他有事处于运行状态，有时由于某种原因而暂停处于等待状态，当使他暂停的原因消失后它又进入准备运行的状态。\n\n   所以 一个进程的活动其间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态 。\n\n   上图中各个状态的意义：\n\n运行状态（Running）：该时刻进程占用CPU;\n\n就绪状态（Ready）：可运行，因调度选择另一个进程进入到就绪状态，当调度选择运行此进程时，会从就绪状态进入到运行状态。\n\n阻塞状态（Blocked）：该进程正在等待某一事件发生（如等待输入&#x2F;输出操作的完成）而暂时停止运行，这时即使给他CPU控制权，它也无法运行；某个进程因为等待事件而进入阻塞状态；导致某个进程进入阻塞状态的事件完成后，该进程会进入到就绪状态；\n\n创建状态（new）：进程正在被创建时的状态；\n\n结束状态（Exit）：进程正在从系统中消失时的状态；\n于是一个完整的进程状态的变迁如下图：\n\n\n\n   再来详细的说明一下进程的状态变迁：\n\n\n\n第一状态\n第二状态\n发生原因\n\n\n\nNULL\n创建状态\n一个新进程被创建时的第一个状态\n\n\n创建状态\n就绪状态\n进入就绪队列；当进程被创建完成并被初始化后，一切准备就绪并运行是，变为就绪状态，这个过程很快\n\n\n就绪状态\n运行状态\n被调度；处于就绪状态的进程被操作系统的进程调度器选中后，就分配给CPU正式运行该进程；\n\n\n运行状态\n就绪状态\n时间片用完；处于运行状态的进程在运行过程中，由于分配给它的时间片用完，操作系统会把该进程变为就绪态，接着从就绪态选中另外一个进程运行（由于外部原因导致进程切换状态）\n\n\n运行状态\n阻塞状态\n等待事件；当进程请求某个事件且必须等待时，例如请求I&#x2F;O事件（由于进程自身内部原因导致进程切换状态）\n\n\n阻塞状态\n就绪状态\n事件完成；当进程要等待的时间完成是，它从阻塞状态变为就绪状态；\n\n\n运行状态\n结束状态\n结束；当进程已经运行完成或出错时，会被操作系统结束状态处理\n\n\n   如果有大量处于阻塞状态的进程，进程可能会占用着物理内存空间，所以在 虚拟内存管理的操作系统中。通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存 。\n\n   那么就需要一个新的状态，来 描述进程没有占用实际的物理内存空间的情况，这个状态就是挂起状态 。这跟阻塞状态是不一样，阻塞状态是等待某个事件的返回。另外，挂起状态可以分为两种：\n\n阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；\n\n就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻执行；\n新的状态图如下所示：\n\n\n\n导致进程挂起的原因不只是因为 进程所用的内存空间不在物理内存 ，还包括如下情况：\n\n通过sleep让进程间歇性挂起，其工作原理是设置一个定时器，到期后唤醒进程。\n用户希望挂起一个程序的执行，比如在Linux中用 Ctrl+Z 挂起进程。\n\n进程的控制结构\n在操作系统中，用 进程控制块（process control block,PCB） 数据结构来描述进程的。PCB是进程存在的唯一标识，这意味着一个进程的存在，必然会有一个PCB。\n\n\nPCB具体包含什么信息呢？\n\n\n进程描述信息：\n进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；\n用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；\n\n\n进程控制和管理信息：\n进程当前状态，如new、ready、running、waiting、block\n进车优先级：进程抢占CPU时的优先级；\n\n\n资源分配清单：\n有关内存地址克难攻坚或虚拟地址空间的信息，锁打开文件的雷暴和所使用的的I&#x2F;O设备信息。\n\n\nCPU相关信息：\nCPU中各个寄存器的值，当进程被切换时，CPU的状态信息都会被保存在相应的PCB中，以便进程重新执行时，能从断点处继续执行。\n\n\n\n\n每个PCB是如何组织的呢？\n\n   通常是通过 链表 的方式，进行组织，把具有 相同转态的进程链在一起，组成各种队列 。比如：\n\n   除了链表的组织方式，还有索引方式，它的工作原理：将同一状态的进程组织在一个索引表中，索引表项指向相同的PCB，不同转态对应不同的索引表。一般会选择链表，因为可能会面临进程创建，销毁等调度导致进程状态发生变化，所以链表能更加灵活的插入和删除。\n进程的控制\n知道了进程的状态变迁和进程的数据结构PCB后，再来看看进程的 创建、终止、阻塞、唤醒 的过程，这些过程也就是进程的控制。\n\n\n创建进程\n操作系统允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源，当子进程被终止时，其在父进程所继承的资源应还给父进程。同时，终止父进程时也会终止其所有的子进程。\n\n\n\n为新进程分配一个唯一的进程标识号，并申请一个空白的PCB，PCB是有限的，若申请失败则创建失败；\n为进程分配资源，如果此处资源不足，进程就会进入等待状态，以等待资源；\n初始化PCB\n如果进程的调度队列能够接纳新进程，那就将进程插入到就绪队列，等待调度运行；\n\n\n终止进程\n进程可以由3种终止方式：正常结束、异常结束以及外界干越（信号Kill掉）\n\n\n\n查找需要终止的进程的PCB\n如果处于执行状态，则立即终止该进程的执行，然后将CPU资源分配给其他进程\n如果其还有子进程，则应将其所有子进程终止；\n将该进程所有用的全部资源都归还给父进程或操作系统；\n将其从PCB所在的队列 中删除。\n\n\n阻塞进程\n当进程需要等待某一事件完成时，他可以调用阻塞语句把自己阻塞等待。而一旦被阻塞等待，他只能由另一个进程唤醒。\n阻塞进程的过程如下：\n\n\n\n找到要被阻塞进程标识号对应的PCB;\n如果该进程为运行状态，则保护其现场，将其状态转换为阻塞状态，停止运行；\n奖盖PCB插入到阻塞队列中去。\n\n\n唤醒进程\n进程由 运行 转变为 阻塞 状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程是绝对不可能叫醒自己的。如果某进程正在等待I&#x2F;O事件，需由别的进程发消息给他，则只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。\n唤醒进程的过程如下：\n\n\n\n在该事件的阻塞队列中找到相应进程的PCB;\n\n将其从阻塞队列中移出，并致其状态Wie就绪状态；\n\n把该PCB插入到就绪队列中，等迪奥调度程序调度；\n进程的阻塞和唤醒是一对功能相反的语句，如果某个进程调用了阻塞语句，则必由一个与之对应的唤醒语句。\n\n\n进程的上下文切换\n各个进程之间是共享CPU资源的，在不同的时候，进程之间需要切换，让不同进程可以在CPU执行，那么这样 一个进程切换到另一个进程运行，称为进程的上下文切换。\n\n\n在详细说进程上下文切换前，先看下CPU上下文切换\n\n   大多数操作系统都是多任务系统，通常支持大于CPU数量的任务同时运行。实际上这些任务并不是同时运行的，知识因为系统在很短时间内，让各个任务分别在CPU运行，于是就造成同时运行的错觉。\n   任务交给CPU运行，在每个任务运行前，需要知道任务从哪里加载，又从哪里开始运行。\n   所以，操作系统需要事先帮CPU设置好 CPU寄存器和程序计数器 。\n   CPU寄存器是CPU内部一个容量小，但是速度极快的内存（缓存），程序计数器则是用来存储CPU正在执行的或者即将执行的下一条指令位置。所以说， CPU寄存器和程序计数器是CPU在运行任何任务前所必须依赖的环境，这个环境就叫做 CPU上下文 。\n   CPU上下文切换就是先把前一个任务的CPU上下文（CPU寄存器和程序计数器）保存起来，然后加载新的任务的上下文到这些寄存器和程序计数器，最后再跳到程序计数器所指的新位置，运行新任务。\n   系统内核会存储保持下来的上下文信息，当次任务再次被分配给CPU运行时，CPU会重新加载这些上下文，这样就能保证原来的状态不受影响，让任务看起来还是继续运行。\n   上面所说的任务，主要包含进程，线程和中断，所以，可以根据任务的不同，把CPU上下文切换分成：进程上下文切换，线程上下文切换和中断上下文切换。通常会把交换的信息保存在进程的PCB，当要运行另外一个进程的时候，需要从这个进程的PCB取出上下文，然后恢复到CPU中，这使得这个进程可以继续执行，如下图所示：\n\n  进程上下文开销很关键，越小越好，避免耗费开销在上下文切换上。\n\n发生进程的上下文切换场景有哪些？\n\n\n为保证所有进程可以得到公平调度，CPU时间被划为一段段时间片，轮流分配给每个进程，当某个进程时间片耗尽，进程就从运行态转变为就绪态，系统从就绪态队列选择另外一个进程执行；\n进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；\n当进程通过睡眠函数sleep这样的方法，将自己主动挂起时，自然也会重新调度；\n当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；\n当发生硬件中断时，CPU上的进程会被中断挂起，转而执行内核中的中断服务程序。\n\n线程   早期操作系统中都是以进程作为独立运行的基本单位，后来又提出了更小的能独立运行的基本单位，也就是线程。\n为什么使用线程   如果编写一个视频播放器软件，该软件功能的核心模块有三个：\n\n从视频文件中读取数据；\n\n对读取的数据进行解压缩\n\n把解压缩后的数据播放出来；\n对于单进程的实现方式，会以以下方式运行：\n\n\n\n   对于单进程的这种方式，存在以下问题：\n\n播放出来画面和声音不连贯，CPU能力不强是，Read的时候进程可能会卡住；\n\n各个函数之间不是并发执行，影响资源的使用效率；\n改成多进程的方式：\n\n\n\n   依然会存在问题：\n\n进程之间如何通信，共享数据？\n\n维护进程的系统开销比较大，创建进程时，分配资源，建立PCB；终止进程时，回收资源、撤销PCB；进程切换时保护当前进程的状态信息；\n如何解决以上问题？需要一种新的实体，满足以下特性：\n\n实体之间可以并发运行；\n\n实体之间共享相同的地址空间；\n这个新的实体就是 线程（Thread） ，线程之间可以并发运行且共享相同的地址空间。\n\n\n什么是线程\n线程是进程当中的一条执行流程。\n\n   同一个进程多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流都是相对独立的。\n\n\n线程的优缺点？\n\n   线程的优点\n\n一个进程中可以同时存在多个线程；\n\n各个线程之间可以并发执行；\n\n各个线程之间可以共享地址空间和文件等资源\n线程的缺点\n\n当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃\n\n\n线程与进程的比较   进程与线程的比较：\n\n进程时资源（包括内存、打开的文件等）分配的单位，线程是CPU调度的单位；\n\n进程拥有一个完整的资源平台，而现场制度相必不可少的资源，如寄存器和栈；\n\n线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系。\n\n线程能减少并发执行的时间和空间开销；\n对于线程能比进程减少开销，体现在：\n\n线程的创建时间比进程块，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息，文件管理嘻嘻，而线程在创建的过程中，不会涉及到这些资源管理信息，而是共享他们；\n\n线程的终止时间比进程快，因为线程释放的资源相比进程少很多；\n\n同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表切换掉，而页表的切换过程开销是比较大的。\n\n由于同一进程的各个线程共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了。\n所以不管是时间效率，还是空间效率，线程都比进程要高。\n\n\n线程的上下文切换\n线程和进程的最大区别在于：线程是调度的基本单位，而进程则是资源拥有的基本单位。\n\n   所以，所谓操作系统的任务调度，实际上调度对象是线程，而进程只是给线程提供了虚拟内存、全局变量等资源。\n\n当进程只有一个线程时，可以认为进程就等于线程\n\n当进程拥有多个线程时，这些线程就会共享相同的虚拟内存和全局变量等资源，这些资源在上下文切换时是不需要修改的；\n另外线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的。\n\n\n\n线程上下文切换的是什么？\n\n\n当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；\n当两线程属于同一个进程，因为虚拟内存是共享的，，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据，寄存器等不共享的数据；\n\n线程的实现\n用户线程（User Thread）：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；\n\n内核线程（Kernel Thread）：在内核中实现的线程，是由内核管理的线程；\n\n轻量级线程（LightWeight Process）：在内核中来支持用户线程；\n用户线程和和内核线程的关系：\n\n多对一的关系，多个用户线程对应同一个内核线程：\n\n一对一的关系，一个用户线程对应一个内核线程；\n\n多对多的关系，多个用户线程对应到多个内核线程；\n\n\n\n\n用户线程如何理解？有什么优势和缺陷？\n\n   用户线程是基于用户态的线程管理库来实现的，那么 线程控制块（Thread Control Block,TCB） 也是在库里面来实现的，对于操作系统而言是看不到这个TCB的，他只能看到整个进程的PCB。\n   所以，用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等。\n   用户级线程的模型，也就类似前面提到的 多对一 关系，即多个用户线程对应同一个内核线程，如下图所示\n\n   用户线程的优点：\n\n每个进程都需要有它私有的线程控制块（TCB）列表，用来跟踪记录它各个线程的状态信息（PC、栈指针、寄存器），TCB由用户级线程函数来维护，可用于支持线程技术的操作系统；\n\n用户线程的切换也是由线程函数库来完成的，无需用户与内核态的切换，所以速度特别快；\n用户线程的缺点：\n\n由于操作系统不参与线程的调度，如果一个线程发起了系统调用而阻塞，那进程所包含的用户线程都不能执行了。\n\n当一个线程开始运行后，除非他主动交出CPU的使用权，否则他所在进程当中的其他线程无法运行，因为用户态的线程没法打断他、当前运行中的线程，他没有这个特权，只有操作系统才由，但是用户线程不是由操作系统管理的。\n\n由于时间片分配给进程，故与其他进程比，在多线程执行时，每个线程得到的时间片比较少，执行会比较慢；\n\n\n\n内核线程如何理解？存在什么优势和缺陷？\n\n   内核线程都是由操作系统管理的，线程对应的TCB自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。内核线程的模型，也就类似前面提到的 一对一 关系，即一个用户对应一个内核线程，如下图所示：\n\n   内核线程的优点：\n\n在一个进程中，如果某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行；\n\n分配给线程，多线程的进程获得更多的CPU运行时间；\n内核线程的缺点：\n\n在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如PCB和TCB;\n\n线程的创建、终止和切换都是通过系统调用的方式来运行，因此对应系统来说，系统开销比较大；\n\n\n\n轻量级进程如何理解？\n\n   轻量级进程（Light-weight process,LWP）是内核支持的用户线程，一个进程可以有一个或多个LWP，每个LWP是跟内核线程一对一映射的，也就是LWP都是有一个内核线程支持。\n   大多数系统中，LWP与普通进程的区别在于它只有一个最小的执行上下文和调度程序所需的统计信息。⼀般来说，⼀个进程代表程序的⼀个实例，⽽ LWP 代表程序的执⾏线程，因为⼀个执⾏线程不像进程那样需要那么多状态信息，所以 LWP 也不带有这样的信息。\n   在LWP之上也是可以用户线程的，那么LWP与用户线程的对应关系就由三种：\n\n1:1，即一个LWP对应一个用户线程；\nN:1，即N个LWP对应一个用户线程；\nM:N，即M个LWP对应N个用户线程；\n\n\n\n1:1模式\n⼀个线程对应到⼀个 LWP 再对应到⼀个内核线程，如上图的进程 4，属于此模型。\n\n优点：实现并⾏，当⼀个 LWP 阻塞，不会影响其他 LWP；\n\n缺点：每⼀个⽤户线程，就产⽣⼀个内核线程，创建线程的开销较⼤\n\nN:1模式\n多个⽤户线程对应⼀个 LWP 再对应⼀个内核线程，如上图的进程 2，线程管理是在⽤户空间完成的，此模式中⽤户的线程对操作系统不可⻅。.\n\n优点：⽤户线程要开⼏个都没问题，且上下⽂切换发⽣⽤户空间，切换的效率较⾼；\n\n缺点：⼀个⽤户线程如果阻塞了，则整个进程都将会阻塞，另外在多核 CPU 中，是没办法充分利⽤CPU 的。\n\nM:N模式\n根据前⾯的两个模型混搭⼀起，就形成 M:N 模型，该模型提供了两级控制，⾸先多个⽤户线程对应到多个 LWP， LWP 再⼀⼀对应到内核线程，如上图的进程 3。\n\n优点：综合了前两种优点，⼤部分的线程上下⽂发⽣在⽤户空间，且多个线程⼜可以充分利⽤多核CPU 的资源。\n\n组合模式\n如上图的进程 5，此进程结合 1:1 模型和 M:N 模型。开发⼈员可以针对不同的应⽤特点调节内核线程的数⽬来达到物理并⾏性和逻辑并⾏性的最佳⽅案。\n\n\n调度\n进程希望自己能占用CPU进行工作，一旦操作系统把进程切换到运行状态，也就意味着该进程占用CPU在执行，但是当操作系统把进程切换到其他状态时，那就不在CPU中执行了，于是操作系统会选择下一个要运行的进程。选择一个进程运行这一功能是在操作系统中完成的，通常称为调度程序（scheduler）。\n\n调度时机\n在进程的声明周期中，当进程从一个运行状态到另一状态变化的时候，其实会触发一次调度。\n\n   比如，以下状态的变化都会触发操作系统的调度\n\n从就绪态 -&gt; 运行态\n\n从运行态 -&gt; 阻塞态\n\n从运行态 -&gt; 结束态\n另外，如果硬件时钟提供某个频率的周期性中断，那么可以根据如何处理时钟中断，把调度算法分为两类：\n\n非抢占式调度算法 挑选一个进程，然后让该进程运行直到被阻塞，或者直到该进程退出，才会调用另外一个进程，也就是说不会理时钟中断这个事情。\n\n抢占式调度算法 挑选一个进程，然后让该进程只运行某段时间，如果在该时段结束时，该进程任然在运行，则会把它挂起，接着调度程序会从就绪队列挑选另外一个进程。这种抢占式调度处理，需要在时间间隔的末端发生 时钟中断，以便把CPU控制返回给调度程序进行调度，也就是常说的 时间片机制。\n\n\n调度原则\n如果运行的程序，发生了I&#x2F;O时间的请求，那CPU使用率必然会很低，因为此时进程在阻塞等待硬盘的数据返回。这样的过程，势必会造成CPU突然的空闲。所以，为了提高CPU利用率，在这种发送I&#x2F;O事件致使CPU空闲的情况下，调度程序需要从就绪队列中选择一个进程来运行。\n\n有的程序执行某个任务花费的时间会比较长，如果这个程序一直占着CPU，会造成系统吞吐量（CPU在单位时间内完成的进程数量）的降低。所以，要提高系统的吞吐率，调度程序要权衡长任务和短任务进程的运行完成数量。\n\n从进程开始到结束的过程中，实际上是包含两个时间，分别是进程运行时间和进程等待时间，这两个时间总和就称为周转时间。进程的周转时间越小越好，**如果进程的等待时间很长而运行时间很短，那周转时间就很长，这不是我们所期望的，调度程序应避免这种情况发生。\n\n处于就绪队列的进程，也不能等太久，当然希望这个等待的时间越短越好，这样可以使得进程更快的在CPU中执行。所以 就绪队列中进程的等待时间也是调度程序所需要考虑的原则。\n\n对于鼠标、键盘这种交互式比较强的应用，希望它的响应时间越快越好，否则影响用户体验。所以，对于交互式比较强的应用，响应时间也是调度程序需要考虑的原则。\n针对以上五种调度原则，总结如下：\n\n\n\nCPU利用率：调度程序应确保CPU是始终匆忙的状态，这可提高CPU的利用率；\n系统吞吐率：吞吐量表示的是单位时间内CPU完成进程的数量，长作业的进程会占用较长的CPU资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量；\n周转时间：周转时间是进程运行和阻塞时间中能总和，一个进程的周转时间越小越好；\n等待时间：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待时间越长，用户越不满意。\n响应时间：用户提交请求到系统第一次产生响应所花费时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准。\n\n调度算法单核CPU系统中常见的调度算法\n1.先来先服务调度算法\n\n   最简单的一个调度算法，就是非抢占式的 先来先服务（First Come First Served,FCFS） 算法；\n\n   先来后到， 每次从就绪队列宗选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行 。\n\n2.最短作业优先调度算法\n\n   最短作业优先（Shortest Job First,SJF）调度算法，优先选择运行时间最短的进程来运行，有助于提高系统吞吐量。\n\n   这显然对长作业不利，很容易造成一种极端现象，如果一个长作业在就绪队列等待运行，而这个就绪队列有非常多的短作业，那么就会使得长作业不断的往后推，致使长作业长期不会被运行。\n\n3.高响应比优先调度算法\n\n   之前的先来先服务调度算法和最短作业优先调度算法，都没有很好的权衡短作业和长作业，那么高响应比优先（Highest Response Ratio Next,HRRN）调度算法，主要是权衡了短作业和长作业。每次进行进程调度时，先计算 响应比优先级 ，然后把 响应比优先级 最高的进程投入运行，响应比优先级的计算公式：优先权&#x3D;（等待时间+要求服务时间）&#x2F;要求服务时间。\n   从上面公式可以发现：\n\n如果两个进程的 等待时间相同 时，要求的 服务时间越短，响应比就越高 ，这样 短作业的进程容易被选中运行 。\n如果两个进程 要求服务时间相同时 ，等待时间越长，响应比越高 ，这就 兼顾到了长作业进程 ，因为进程的响应比可以随着时间等待的增加而提高，当其等待时间足够长是，其响应时间便可以升到很高，从而获得运行的机会；\n\n\n4.时间片轮转调度算法\n\n   最简单、最公平且使用最广泛的算法就是 **时间片轮转（Round Robin,RR）调度算法。\n\n   每个进程被分配一个时间段，称为时间片（Quantun）即允许该进程在该时间段中运行。\n\n如果时间片用完，进程还在运行，将把此进程从CPU释放出来，并把CPU分配给另外一个进程；\n\n如果该进程在时间片结束前阻塞或结束，则CPU立即进行切换；\n另外，时间片的长度就是一个很关键的点：\n\n如果时间片设的太短会导致过多的进程上下文切换，降低了CPU效率；\n\n如果时间片设的太长又可能引起对短作业进程的响应时间边长。\n\n一般来说，时间片设为 20ms-50ms 通常是一个比较合理的折中值。\n\n\n\n5.最高优先级调度算法\n\n   时间片轮转算法做了个假设，揖让所有进程同等重要，谁也不偏袒，大家的运行时间都一样。但是，对于多用户计算机系统就有不同的看法了，他们希望调度是有优先级的，即希望调度能 从就绪队列中选择最高优先级的进程进行运行，这称为最高优先级（Highest Priority First,HPF）调度算法 。进程的优先级可以分为，静态优先级和动态优先级：\n\n静态优先级：创建进程的时候，就已经确定了优先级，然后整个运行时间，优先级都不会变化。\n\n动态优先级：根据进程的动态变化调整优先级，比如如果进程时间增加，则将低优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是 随着时间的推移增加等待进程的优先级。\n该算法也有两种处理优先级高的方法，非抢占式和抢占式：\n\n非抢占式：当就绪队列中出现优先级高的进程，运行完当前进程，在选择优先级高的进程。\n\n抢占式：当就绪队列中出现优先级高德进程，当前线程挂起，调度优先级高的进程运行。\n但是依然有缺点，可能会导致低优先级的进程永远不会运行。\n\n\n\n多级反馈调度算法\n\n   多级反馈队列（Multilevel Feedback）调度算法 是时间片轮转算法 和 最高优先级算法 的综合和发展。\n\n多级 表示有多个队列，每个队列的优先级从高到低，同时优先级越高时间片越短。\n反馈 表示如果有新的进程加入优先级高的队列是，立刻停止当前正在运行的进程，转而去运行优先级高的队列。\n\n\n\n设置多个队列，赋予每个队列不同的优先级，每个 队列优先级从高到低，同时优先级越高，时间片越短；\n\n新的进程会被放入到第一级队列的末尾，按照先来先服务的原则等待被调度，如果在第一级队列规定的时间片没运行完成，则停止当前运行的进程，并将其转入到第二队列的末尾，以此类推，直至完成；\n\n当较⾼优先级的队列为空，才调度较低优先级的队列中的进程运⾏。如果进程运⾏时，有新进程进⼊较⾼优先级的队列，则停⽌当前运⾏的进程并将其移⼊到原队列末尾，接着让较⾼优先级的进程运⾏；\n可以发现，对于短作业可能可以在第⼀级队列很快被处理完。对于⻓作业，如果在第⼀级队列处理不完，可以移⼊下次队列等待被执⾏，虽然等待的时间变⻓了，但是运⾏时间也变更⻓了，所以该算法很好的 兼顾了⻓短作业，同时有较好的响应时间。\n\n\n进程间通信   每个进程的用户地址空间都是独立的，一般而言是不能互相访问的，但内核空间每个进程都是共享的，所以进程之间要通信必须通过内核。\n\n管道$ ps auxf | grep mysql\n\n\nLinux中的 ** | ** 管道，就是将前一个命令（ps auxf）的输出作为后一个命令（grep mysql）的输入，从这可以看出，管道传输数据是单向的，如果想互相通信需要建立两个管道。上面这种管道是没有名字的，所以 | 表示的管道称为 匿名管道 ，用完就销毁。管道还有另外一个类型是 命名管道 ，也被叫做 FIFO ，因为数据是先进先出的传输方式。在使用命名管道前，先需通过 mkfifo 命令来创建，并且指定管道名字：\n\n$ mkfifo myPipe\n\n   myPipe就是这个管道的名称，基于Linux一切皆文件的理念，所以管道也是以文件的方式存在，我们可以用ls来看一下这个文件的类型是p，也就是pipe（管道）的意思：\n$ ls -l$ prw-r--r--   1 root root    0 Feb  9 02:52 myPipe\n\n   接下来，我们往myPipe这个管道写入数据，操作完后发现命令行停在这里，这是因为管道里的内容没有被读取，只有当管道里的数据被读完后，命令才可以正常退出。于是，可以执行另一个命令来读取管道里的数据。可以看到 管道这样的通信方式效率低，不适合进程间频繁的交换数据。\n$ echo &quot;hello&quot; &gt; myPipe^C/usr/bin/sh: 43: cannot create myPipe: Interrupted system call$ cat &lt; myPipe // 读取管道⾥的数据hello\n\n消息队列\n消息队列的通信模式可以解决管道效率低的问题。⽐如， A 进程要给 B 进程发送消息， A 进程把数据放在对应的消息队列后就可以正常返回了， B 进程需要的时候再去读取数据就可以了。同理， B 进程要给 A 进程发送消息也是如此。\n\n   消息队列是保存在内核中的消息链表，在发送数据时，会分成一个一个独立的数据单元，也就是消息体（数据块），消息体是用户自定义的数据类型，消息的发送方和接收方要约定好消息体的数据类型，所以每个消息体都是固定⼤⼩的存储块，不像管道是⽆格式的字节流数据。如果进程从消息队列中读取了消息体，内核就会把这个消息体删除。\n   消息队列⽣命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列会⼀直存在，⽽前⾯提到的匿名管道的⽣命周期，是随进程的创建⽽建⽴，随进程的结束⽽销毁。\n   消息这种模型，两个进程之间的通信就像平时发邮件⼀样，你来⼀封，我回⼀封，可以频繁沟通了。但邮件的通信⽅式存在不⾜的地⽅有两点， ⼀是通信不及时，⼆是附件也有⼤⼩限制 ，这同样也是消息队列通信不⾜的点。\n   消息队列不适合⽐较⼤数据的传输，因为在内核中每个消息体都有⼀个最⼤⻓度的限制，同时所有队列所包含的全部消息体的总⻓度也是有上限。在 Linux 内核中，会有两个宏定义 MSGMAX和MSGMNB，它们 以字节为单位，分别定义了 ⼀条消息的最⼤⻓度和⼀个队列的最⼤⻓度。\n   消息队列通信过程中，存在⽤户态与内核态之间的数据拷⻉开销，因为进程写⼊数据到内核中的消息队列时，会发⽣从⽤户态拷⻉数据到内核态的过程，同理另⼀进程读取内核中的消息数据时，会发⽣从内核态拷⻉数据到⽤户态的过程。\n共享内存\n消息队列的读取和写入的过程，都会有用户态与内核态之间的消息拷贝过程。那 共享内存 的方式，就很好的解决了这一问题。\n\n   共享内存机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中。这样这个进程写入的东西，另外一个进程马上就能看到，不需要拷贝，传输，大大提高了进程间通信的速度。\n\n信号量   用了共享内存通信方式，带来新的问题，就是如果多个进程同时修改同一个贡献内存，很有可能就会冲突。例如两个进程都同时写一个地址，先写的那个进程发现内容被别人覆盖了。\n   为了防止多进程竞争共享资源，而造成数据错了，所以需要保护机制，使得贡献的资源，在任意时刻只能被一个进程访问。正好，信号量就实现了这一保护机制。\n   信号量其实是一个整形的计数器，主要用于实现进程间的互斥与同步，而不是用户缓存进程间通信的数据。\n   信号量表示资源的数量，控制信号量的方式有两种原子操作：\n\n一个是 P操作 ，这个操作会把 信号量减去1 ，相减后如果信号量&lt;0，则表明资源以备占用，进程需阻塞等待；相减后如果信号量&gt;&#x3D;0，则表明还有资源可使用，进程可正常继续执行。\n\n一个是 V操作 ，这个操作会把 信号量加上1 ，相加后如果信号量&lt;&#x3D;0，则表明当前有阻塞中的进程，于是会把该进程唤醒运行；相加后如果信号量&gt;0，则表明当前没有阻塞中的进程；\nP操做是用在进入共享资源之前，V操作是用在离开共享资源之后，这两个操作必须是成对出现的。\n举例：如果使得两个进程互斥访问共享内存，我们可以初始化信号量为1。\n\n\n\n   具体的过程如下：\n\n进程 A 在访问共享内存前，先执⾏了 P 操作，由于信号量的初始值为 1，故在进程 A 执⾏ P 操作后信号量变为 0，表示共享资源可⽤，于是进程 A 就可以访问共享内存。\n\n若此时，进程 B 也想访问共享内存，执⾏了 P 操作，结果信号量变为了 -1，这就意味着临界资源已被占⽤，因此进程 B 被阻塞。\n\n直到进程 A 访问完共享内存，才会执⾏ V 操作，使得信号量恢复为 0，接着就会唤醒阻塞中的线程B，使得进程 B 可以访问共享内存，最后完成共享内存的访问后，执⾏ V 操作，使信号量恢复到初始值 1。\n可以发现，信号初始化为 1 ，就代表着是互斥信号量，它可以保证共享内存在任何时刻只有⼀个进程在访问，这就很好的保护了共享内存。\n另外在多进程里，每个进程并不一定是顺序执行的，他们基本是是各自独立的、不可预知的速度向前推进，又希望多个进程能紧密合作，实现共同任务；\n例如，进程 A 是负责⽣产数据，⽽进程 B 是负责读取数据，这两个进程是相互合作、相互依赖的，进程 A必须先⽣产了数据，进程 B 才能读取到数据，所以执⾏是有前后顺序的。\n\n\n\n   具体过程：\n\n如果B比进程A先执行，那么执行到P操作是，由于信号量初始值为0，故信号量变为-1，表示进程A还没产生数据，于是B阻塞等待；\n\n接着，当进程A生产完数据后，执行V操作，就会使得信号变为0，于是就会唤醒阻塞在P操作的进程B;\n\n最后，进程B被唤醒后，意味着进程A已经生产了数据，于是进程B就可以正常读数据了。\n可以发现，信号初始化为0，就代表着是同步信号量，可以保证进程A应在进程B之前运行。\n\n\n信号\n上面说的进程间通信，都是常规状态下的工作模式。对于 异常情况下的工作模式，就需要用信号的方式来通知进程。信号跟信号量虽然名字相似，但是两者用途完全不一样，就像Java和JavaScript的区别。\n\n   在linux操作系统中，为了相应各种各样的时间，提供了几十种信号，分别代表不同的意义，我们可以通过kill -l命令，查看所有信号：\n$ kill -l 1) SIGHUP\t 2) SIGINT\t 3) SIGQUIT\t 4) SIGILL\t 5) SIGTRAP 6) SIGABRT\t 7) SIGBUS\t 8) SIGFPE\t 9) SIGKILL\t10) SIGUSR111) SIGSEGV\t12) SIGUSR2\t13) SIGPIPE\t14) SIGALRM\t15) SIGTERM16) SIGSTKFLT\t17) SIGCHLD\t18) SIGCONT\t19) SIGSTOP\t20) SIGTSTP21) SIGTTIN\t22) SIGTTOU\t23) SIGURG\t24) SIGXCPU\t25) SIGXFSZ26) SIGVTALRM\t27) SIGPROF\t28) SIGWINCH\t29) SIGIO\t30) SIGPWR31) SIGSYS\t34) SIGRTMIN\t35) SIGRTMIN+1\t36) SIGRTMIN+2\t37) SIGRTMIN+338) SIGRTMIN+4\t39) SIGRTMIN+5\t40) SIGRTMIN+6\t41) SIGRTMIN+7\t42) SIGRTMIN+843) SIGRTMIN+9\t44) SIGRTMIN+10\t45) SIGRTMIN+11\t46) SIGRTMIN+12\t47) SIGRTMIN+1348) SIGRTMIN+14\t49) SIGRTMIN+15\t50) SIGRTMAX-14\t51) SIGRTMAX-13\t52) SIGRTMAX-1253) SIGRTMAX-11\t54) SIGRTMAX-10\t55) SIGRTMAX-9\t56) SIGRTMAX-8\t57) SIGRTMAX-758) SIGRTMAX-6\t59) SIGRTMAX-5\t60) SIGRTMAX-4\t61) SIGRTMAX-3\t62) SIGRTMAX-263) SIGRTMAX-1\t64) SIGRTMAX\n\n   运行在shell中断的进程，我们可以通过键盘输入某些组合键的时候，给进程发送信号。例如：\n\nCtrl + C 产生 SIGINT 信号，表示终止该进程；\n\nCtrl + Z 产生 SIGSTP 信号，表示停止该进程，但还未结束；\n如果进程在后台运行，可以通过kill命令的方式给进程发送信号，但前提需要知道运行中的进程PID号，例如：\n\n\n# 给PID为1050的进程发送 SIGKILL信号，用来立即结束该进程$ kill -9 1050\n\n   所以，信号事件的来源主要有硬件来源（如键盘Ctrl+C）和软件来源（如kill命令）。\n   信号是进程间通信机制中 唯一的异步通信机制，因为可以在任何时候发送信号给某一线程，一旦有信号产生，我们就有下面这几种，用户进程对信号的处理方式。\n\n执行默认操作。Linux对每种信号都规定了默认操作，例如上面列表中的SIGTERM信号，就是终止进程的意思。\n捕捉信号。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。\n忽略信号。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即 SIGKILL(kill)和SIGSTOP ，他们用于在任何时候中断或结束某一进程。\n\nSocket   前面提到的管道、消息队列、共享内存、信号量和信号都是在同一台主机上进行进程间通信，那要想 跨网络与不同主机上的进程之间通信，就需要socket通信了。\n   实际上，socket通信不仅可以跨网络与不同主机的进程间通信，还可以在同主机上进程间通信。我们来看socket的系统调用：\nint socket(int domain,int type,int protocal)\n\n   三个参数分别代表：\n\ndomain参数用来指定协议族，比如AF_INET用于IPV4、AF_INET6用于IPV6、AF_LOCAL&#x2F;AF_UNIX用于本机；\n\ntype参数用来指定通信特性，比如SOCK_STAERM表示的是字节流，对应TCP;SOCK_DREAM表示的是数据报，对应UDP；SOCK_RAW表示的是原始套接字；\n\nprotocol参数原本是用来指定通信协议的，但现在基本废弃。因为协议已经通过前面两个参数指定完成，protocol目前一般写成0即可；\n根据创建socket类型的不同，通信的方式也就不同：\n\n实现TCP字节流通信：socket类型是AF_INET和SOCK_STREAM;\n\n实现UDP数据报通信：socket类型是AF_INET和SOCK_DGRAM;\n\n实现本地进程间通信：socket类型是AF_LOCAL和SOCK_STREAM，AF_LOCAL和SOCKET_DGRAM。另外AF_UNIX和AF_LOCAL是等价的，所以AF_UNIX也属于本地SOCKT;\n\n\n\n针对TCP协议通信的socket编程模型\n\n\n\n服务端和客户端初始化socket，得到文件描述符；\n\n服务端调用bind，将绑定在ip地址和端口；\n\n服务端调用listen，进行监听；\n\n服务端调用accept，等待客户端连接；\n\n客户端调用connect，向服务器端的地址和端口发起连接请求；\n\n服务端accept返回用于传输的socket的文件等描述符；\n\n客户端调用write写入数据；服务调用read读取数据；\n\n客户端断开连接时，调用close，那么服务端read读取数据的时候，就会读取到EOF，待处理完数据后，服务端调用close，表示连接关闭。\n\n这里需要注意的是，服务端调用accept时，连接成功了会返回一个已完成连接的socket，后续用来传输数据。\n所以监听的socket和真正用来传输数据的socket，是 2个socket，一个叫做 监听socket ，一个叫做 已完成连接socket 。\n\n\n\n针对UDP协议通信的socket编程模型\n\n\n   UDP是没有连接的，所以不需要三次握手，也就不需要像TCP调用listen和connect，但是UDP的交互任然需要IP地址和端口号，因此也需要bind。对于UDP来说不需要维护连接，也就没有所谓的发送方和接收方，甚至都不需要客户端和接收端的概念，只要有一个socket多台机器就可以任意通信，因此每一个UDP的socket都需要bind。另外每次通信时调用sendto和recvfrom，都要传入目标主机的IP和端口。\n\n针对本地进程间通信的socket编程模型\n\n   本地socket 被用于在 同一台主机上进程间通信 的场景\n\n本地socket的编程接口和IPV4、IPV6套接字编程接口是一致的，可以支持 字节流 和 数据报 两种协议；\n\n本地socket的实现效率高于IPV4、IPV6的字节流、数据报socket实现。\n对于本地字节流 socket，其 socket 类型是 AF_LOCAL 和 SOCK_STREAM。对于本地数据报 socket，其 socket 类型是 AF_LOCAL 和 SOCK_DGRAM。\n本地字节流socket和本地数据报socket在bind的时候，不像TCP和UDP要绑定IP地址和端口，而是 绑定一个本地文件，这也就是他们之间的最大区别。\n\n\n总结   由于每个进程的⽤户空间都是独⽴的，不能相互访问，这时就需要借助内核空间来实现进程间通信，原因很简单，每个进程都是共享⼀个内核空间。   Linux 内核提供了不少进程间通信的⽅式，其中最简单的⽅式就是管道，管道分为「匿名管道」和「命名管道」。\n   匿名管道顾名思义，它没有名字标识，匿名管道是特殊⽂件只存在于内存，没有存在于⽂件系统中， shell命令中的「 | 」竖线就是匿名管道，通信的数据是⽆格式的流并且⼤⼩受限，通信的⽅式是单向的，数据只能在⼀个⽅向上流动，如果要双向通信，需要创建两个管道，再来匿名管道是只能⽤于存在⽗⼦关系的进程间通信，匿名管道的⽣命周期随着进程创建⽽建⽴，随着进程终⽌⽽消失。\n   命名管道突破了匿名管道只能在亲缘关系进程间的通信限制，因为使⽤命名管道的前提，需要在⽂件系统创建⼀个类型为 p 的设备⽂件，那么毫⽆关系的进程就可以通过这个设备⽂件进⾏通信。另外，不管是匿名管道还是命名管道，进程写⼊的数据都是缓存在内核中，另⼀个进程读取数据时候⾃然也是从内核中获取，同时通信数据都遵循先进先出原则，不⽀持 lseek 之类的⽂件定位操作。\n   消息队列克服了管道通信的数据是⽆格式的字节流的问题，消息队列实际上是保存在内核的「消息链表」，消息队列的消息体是可以⽤户⾃定义的数据类型，发送数据时，会被分成⼀个⼀个独⽴的消息体，当然接收数据时，也要与发送⽅发送的消息体的数据类型保持⼀致，这样才能保证读取的数据是正确的。消息队列通信的速度不是最及时的，毕竟每次数据的写⼊和读取都需要经过⽤户态与内核态之间的拷⻉过程。\n   共享内存可以解决消息队列通信中⽤户态与内核态之间数据拷⻉过程带来的开销， 它直接分配⼀个共享空间，每个进程都可以直接访问，就像访问进程⾃⼰的空间⼀样快捷⽅便，不需要陷⼊内核态或者系统调⽤，⼤⼤提⾼了通信的速度，享有最快的进程间通信⽅式之名。但是便捷⾼效的共享内存通信， 带来新的问题，多进程竞争同个共享资源会造成数据的错乱。\n   那么，就需要信号量来保护共享资源，以确保任何时刻只能有⼀个进程访问共享资源，这种⽅式就是互斥访问。 信号量不仅可以实现访问的互斥性，还可以实现进程间的同步，信号量其实是⼀个计数器，表示的是资源个数，其值可以通过两个原⼦操作来控制，分别是 P 操作和 V 操作。\n   与信号量名字很相似的叫信号，它俩名字虽然相似，但功能⼀点⼉都不⼀样。信号是进程间通信机制中唯⼀的异步通信机制，信号可以在应⽤进程和内核之间直接交互，内核也可以利⽤信号来通知⽤户空间的进程发⽣了哪些系统事件，信号事件的来源主要有硬件来源（如键盘 Cltr+C ）和软件来源（如 kill 命令），⼀旦有信号发⽣， 进程有三种⽅式响应信号 1. 执⾏默认操作、 2. 捕捉信号、 3. 忽略信号。有两个信号是应⽤进程⽆法捕捉和忽略的，即 SIGKILL 和 SEGSTOP ，这是为了⽅便我们能在任何时候结束或停⽌某个进程。\n   前⾯说到的通信机制，都是⼯作于同⼀台主机，如果要与不同主机的进程间通信，那么就需要 Socket 通信了。 Socket 实际上不仅⽤于不同的主机进程间通信，还可以⽤于本地主机进程间通信，可根据创建Socket 的类型不同，分为三种常⻅的通信⽅式，⼀个是基于 TCP 协议的通信⽅式，⼀个是基于 UDP 协议的通信⽅式，⼀个是本地进程间通信⽅式。\n   以上，就是进程间通信的主要机制了。你可能会问了，那线程通信间的⽅式呢？\n   同个进程下的线程之间都是共享进程的资源，只要是共享变量都可以做到线程间通信，⽐如全局变量，所以对于线程间关注的不是通信⽅式，⽽是关注多线程竞争共享资源的问题，信号量也同样可以在线程间实现互斥与同步：\n\n互斥的⽅式，可保证任意时刻只有⼀个线程访问共享资源；\n同步的⽅式，可保证线程 A 应在线程 B 之前执⾏；\n\n多线程同步竞争与协作\n在单核 CPU 系统⾥，为了实现多个程序同时运⾏的假象，操作系统通常以时间⽚调度的⽅式，让每个进程执⾏每次执⾏⼀个时间⽚，时间⽚⽤完了，就切换下⼀个进程运⾏，由于这个时间⽚的时间很短，于是就造成了「并发」的现象。\n\n\n   另外，操作系统也为每个进程创建巨⼤、私有的虚拟内存的假象，这种地址空间的抽象让每个程序好像拥有⾃⼰的内存，⽽实际上操作系统在背后秘密地让多个地址空间「复⽤」物理内存或者磁盘\n\n   如果⼀个程序只有⼀个执⾏流程，也代表它是单线程的。当然⼀个程序可以有多个执⾏流程，也就是所谓的多线程程序，线程是调度的基本单位，进程则是资源分配的基本单位。所以，线程之间是可以共享进程的资源，⽐如代码段、堆空间、数据段、打开的⽂件等资源，但每个线程都有⾃⼰独⽴的栈空间。\n\n互斥的概念\n\n上面的情况为竞争条件（race condition），当多线程相互竞争操作共享变量时，由于运气不好，在执行过程中发生了上下文切换得到了错误结果，事实上，每次运行都可能得到不同的结果，因此输出的结果存在 不确定性（indeterminate）。由于多线程执行操作共享变量的这段代码可能会导致竞争状态，因此我们将这段代码称为 临界区（critical section），他是访问共享资源的代码片段，一定不能给多线程同时运行。我们希望这段代码是 互斥（mutualexclusion）的，也就说保证一个线程在临界区执行是，其他线程应该被阻止进入临界区，就是说这段代码执行过程中，最多只能出现一个线程。另外，互斥也不是只针对多线程。在多进程竞争共享资源的时候，也同样是可以使用互斥的方式来避免资源竞争造成的资源混乱。\n\n\n同步的概念\n同步就是并发线程&#x2F;进程在一些关键点上可能需要互相等待与互通消息，这种相互制约的等待与互通消息称为进程&#x2F;线程同步。\n\n   同步和互斥是两种不同的概念：\n\n同步：操作A应在操作B之前执行，操作C必须在操作A和操作B都完成之后才能执行等；\n互斥：操作A和操作B不能在同一时刻执行；\n\n互斥与同步的实现\n在进程&#x2F;线程并发执行的过程中，进程&#x2F;线程之间存在写作的关系，例如有互斥、同步的关系。为了实现进程&#x2F;线程间的正确的写作，操作系统必须提供实现进程写作的措施和方法，主要的方法有两种，这两个都可以方便的实现进程&#x2F;线程互斥，信号量比所得功能要更强一些，它还可以方便的实现进程&#x2F;线程同步。\n\n\n锁：加锁，解锁操作；\n信号量：P、V操作；\n\n锁\n使用加锁操作和解锁操作可以解决并发线程&#x2F;进程的互斥问题。\n\n   任何想进入临界区的线程，必须先加锁操作。若加锁顺利通过，则线程可进入临界区；在完成对临界资源的访问后再进行解锁操作，以释放该临界资源。根据锁的实现不同，可以分为 忙等待锁 和 无忙等待锁。\n\n\n忙等待锁的实现\n\n   在说明 忙等待锁 的实现之前，先介绍现代CPU体系结构提供的特殊 源自操作指令–测试和置位（Test-and-Set）指令。\n   如果用C代码表示Test-and-Set指令，形式如下：\nint TestAndSet(int *old_ptr,int new)&#123;    int old = *old_ptr;    *old_ptr = new;    return old;&#125;\n\n\n把old_ptr更新为new的值；\n\n返回old_ptr的旧值；\n这些代码是原子执行，因为既可以测试旧值又可以设置新值，所以把这条指令叫做 测试并设置 。原子操作要么全部执行，要么都不执行，不能出现执行到一半的中间状态。\n可以用Test-and-Set指令来实现 忙等待锁，代码如下：\n\n\ntypedef struct lock_t&#123;    int flag;&#125; lock_t;void init(lock_t *lock)&#123;    lock-&gt;flag = 0;&#125;void lock(lock_t *lock)&#123;    while (TestAndSet(&amp;lock-&gt;flag, 1) == 1)    &#123;        /* code */    &#125;&#125;void unlock(lock_t *lock)&#123;    lock-&gt;flag = 0;&#125;\n\n   为什么这个锁能工作：\n\n第一个场景，假设一个线程正在运行，调用lock()，没有其他线程持有锁，所以flag是0，当调用TestAndSet(flag,1)方法，返回0，线程会跳出while循环，获取锁。同时也会原子的设置flag为1，标志锁已经被持有。当线程离开临界区，调用unlock()，家flag清理为0；\n\n第二个场景，当某一个线程已经持有锁（即flag为1）。本线程调用lock()，然后调用TestAndSet(flag,1)，这一次返回1。只要另一个线程一致持有锁，TestAndSet()会重复返回1，本线程会一直 忙等。当flag重要被改为0，本线程会调用TestAndSet()，返回0并且原子的设置为1，从而获得锁，进入临界区。\n当获取不到锁时，线程就会一直while选好，不做任何事情，所以被称为 忙等待锁，也被称为 自旋锁（spin lock）。\n这是最简单的⼀种锁，⼀直⾃旋，利⽤ CPU 周期，直到锁可⽤。在单处理器上，需要抢占式的调度器（即不断通过时钟中断⼀个线程，运⾏其他线程）。否则，⾃旋锁在单 CPU 上⽆法使⽤，因为⼀个⾃旋的线程永远不会放弃 CPU。\n\n\n\n无等待锁的实现（获取不到锁的时候，不用自旋）\n\ntypedef struct lock_t&#123;    int flag;    // 等待队列    queue_t *q;&#125; lock_t;void init(lock_t *lock)&#123;    lock-&gt;flag = 0;    queue_init(lock-&gt;q);&#125;void lock(lock_t *lock)&#123;    while (TestAndSet(&amp;lock-&gt;flag, 1) == 1)    &#123;        // 保存现在运行线程 TCB;        // 将现在运行的线程 TCB 插入到等待队列；        // 设置该线程为等待状态；        // 调度程序；    &#125;&#125;void unlock(lock_t *lock)&#123;    if (lock-&gt;q != NULL)    &#123;        // 移出等待队列的队头元素；        // 将该线程的TCB插入到就绪队列；        // 设置该线程为就绪状态；    &#125;    lock-&gt;flag = 0;&#125;\n\n信号量\n信号量是操作系统提供的一种协调共享资源访问的方法。通常 信号量表示资源的数量 ，对应的变量是一个整形（sem）变量。另外还有 两个原子操作的系统调用函数来控制信号量的，分别是；\n\n\nP操作：将sem减1，相减后，如果 sem&lt;0，则进程&#x2F;线程进入阻塞等待，否则继续，表明操作可能会阻塞；\nV操作：将sem加1，相加后，如果 sem&lt;0，唤醒一个等待中的进程&#x2F;线程，表明V操作不会阻塞；\nP操作是用在进入临界区之前，V操作是用在离开临界区之后，这两个操作是必须成对出现的。\nPV操作的函数是由操作系统管理和实现的，所以操作系统已经使得执行PV函数是具有原子性的\n\n// 信号量数据结构typedef struct sem_t&#123;    // 资源个数    int sem;    // 等待队列    queue_t *q;&#125; sem_t;// 初始化信号量void init(sem_t *s, int sem)&#123;    s-&gt;sem = sem;    queue_init(s-&gt;q);&#125;// P操作void P(sem_t *s)&#123;    s-&gt;sem--;    if (s-&gt;sem &lt; 0)    &#123;        // 1. 保留调用线程 CPU 现场；        // 2. 将该线程的 TCB 插入到 s 的等待队列；        // 3. 设置该线程为等待状态；        // 4. 执行调度程序；    &#125;  &#125;// V操作void V(sem_t *s)&#123;    s-&gt;sem++;    if (s-&gt;sem&lt;=0)    &#123;        // 1. 移出 s 等待队列首元素；        // 2. 将该线程的 TCB 插入就绪队列；        // 3. 设置该线程为 就绪状态；    &#125;  &#125;\n\n\nPV操作如何使用的呢？\n\n   信号量不仅可以实现临界区的互斥访问控制，还可以线程间的事件同步。\n\n使用信号量实现临界区的互斥访问。\n为每类共享资源设置⼀个信号量 s ，其初值为 1 ，表示该临界资源未被占⽤。只要把进⼊临界区的操作置于 P(s) 和 V(s) 之间，即可实现进程&#x2F;线程互斥：\n\n\n\n   此时，任何想进⼊临界区的线程，必先在互斥信号量上执⾏ P 操作，在完成对临界资源的访问后再执⾏ V操作。由于互斥信号量的初始值为 1，故在第⼀个线程执⾏ P 操作后 s 值变为 0，表示临界资源为空闲，可分配给该线程，使之进⼊临界区。\n   若此时⼜有第⼆个线程想进⼊临界区，也应先执⾏ P 操作，结果使 s 变为负值，这就意味着临界资源已被占⽤，因此，第⼆个线程被阻塞。\n   并且，直到第⼀个线程执⾏ V 操作，释放临界资源⽽恢复 s 值为 0 后，才唤醒第⼆个线程，使之进⼊临界区，待它完成临界资源的访问后，⼜执⾏ V 操作，使 s 恢复到初始值 1。\n   对于两个并发线程，互斥信号量的值仅取 1、 0 和 -1 三个值，分别表示：\n\n如果互斥信号量为 1，表示没有线程进⼊临界区；\n\n如果互斥信号量为 0，表示有⼀个线程进⼊临界区；\n\n如果互斥信号量为 -1，表示⼀个线程进⼊临界区，另⼀个线程等待进⼊。\n通过互斥信号量的⽅式，就能保证临界区任何时刻只有⼀个线程在执⾏，就达到了互斥的效果。\n\n\n\n使用 信号量实现事件同步。\n同步的⽅式是设置⼀个信号量，其初值为 0 。我们把前⾯的「吃饭-做饭」同步的例⼦，⽤代码的⽅式实现⼀下\n\n\n// 表示不需要吃饭semaphoer s1 = 0;// 表示饭还没做完semaphore s2 = 0;// 儿子线程函数void son()&#123;    while (TRUE)    &#123;        肚子饿；        // 叫妈妈做饭        V(S1);        // 等待妈妈做完饭        P(S2);        吃饭；    &#125;&#125;// 妈妈线程函数void mon()&#123;    while (TRUE)    &#123;        // 询问需不需要做饭        P(S1);        做饭;        // 做完饭，通知儿子吃饭        V(S2);    &#125;  &#125;\n\n   妈妈⼀开始询问⼉⼦要不要做饭时，执⾏的是 P(s1) ，相当于询问⼉⼦需不需要吃饭，由于 s1 初始值为 0，此时 s1 变成 -1，表明⼉⼦不需要吃饭，所以妈妈线程就进⼊等待状态。\n   当⼉⼦肚⼦饿时，执⾏了 V(s1) ，使得 s1 信号量从 -1 变成 0，表明此时⼉⼦需要吃饭了，于是就唤醒了阻塞中的妈妈线程，妈妈线程就开始做饭。接着，⼉⼦线程执⾏了 P(s2) ，相当于询问妈妈饭做完了吗，由于 s2 初始值是 0，则此时 s2 变成-1，说明妈妈还没做完饭，⼉⼦线程就等待状态。\n   最后，妈妈终于做完饭了，于是执⾏ V(s2) ， s2 信号量从 -1 变回了 0，于是就唤醒等待中的⼉⼦线程，唤醒后，⼉⼦线程就可以进⾏吃饭了。\n生产者-消费者问题\n   生产者消费者问题描述：\n\n生产者在生成数据后，放在一个缓冲区中；\n\n消费者从缓冲区去除数据处理；\n\n任何时刻，只能有个生产者或消费者可以访问缓冲区\n我们对问题的分析可以得出：\n\n任何时刻只能有一个线程操作缓冲区，说明操作缓冲区是临界代码，需要互斥；\n\n缓冲区空时，消费者必须等待生产者生成数据；缓冲区满是，生产者必须等待消费者取出数据。说明生产者和消费者需要同步；\n那么我们需要三个信号量，分别是：\n\n互斥信号量 mutex ：用于互斥访问缓冲区，初始值为1；\n\n资源信号量 fullBuffers ：用户消费者询问缓冲区是否有数据，有数据则读取数据，初始值为0（表明缓冲区一开始为空）；\n\n资源信号量 emptyBuffers ：用于生产者询问缓冲是否有空位，有空位则生成数据，初始化值为n（缓冲区大小）；\n具体的实现代码：\n\n\n#define N 100// 互斥信号量，用于临界区的互斥访问semaphore mutex = 1;// 表示缓冲区空槽的个数semaphore emptyBuffers = N;// 表示缓冲区满槽的个数semaphore fullBuffers = 0;// 生产者线程函数void producer()&#123;    while (TRUE)    &#123;        // 将空槽的个数-1        P(emptyBuffers);        // 进入临界区        P(mutex);        将生成的数据放到缓冲区中；        // 离开缓冲区        V(mutex);        // 将满槽的个数+1        V(fullBuffers);    &#125;  &#125;// 消费者线程函数void consumer()&#123;    while (TRUE)    &#123;        // 将满槽的个数-1        P(fullBuffers);        // 进入临界区        P(mutex);        从缓冲里读取数据；        // 离开临界区        V(mutex);        // 将空槽的个数+1        V(emptyBuffers);    &#125;  &#125;\n\n   如果消费者线程⼀开始执⾏ P(fullBuffers) ，由于信号量 fullBuffers 初始值为 0，则此时 fullBuffers 的值从 0 变为 -1，说明缓冲区⾥没有数据，消费者只能等待。接着，轮到⽣产者执⾏ P(emptyBuffers) ，表示减少 1 个空槽，如果当前没有其他⽣产者线程在临界区执⾏代码，那么该⽣产者线程就可以把数据放到缓冲区，放完后，执⾏ V(fullBuffers) ，信号量 fullBuffers从 -1 变成 0，表明有「消费者」线程正在阻塞等待数据，于是阻塞等待的消费者线程会被唤醒。消费者线程被唤醒后，如果此时没有其他消费者线程在读数据，那么就可以直接进⼊临界区，从缓冲区读取数据。最后，离开临界区后，把空槽的个数 + 1。\n经典同步问题哲学家就餐问题\n5个哲学家围绕餐桌吃面，桌上只有5支叉子，每两个哲学家之间放一只叉子；哲学家要两只叉子才可以吃面，也就是需要拿到左右两边的叉子才进餐；那么如何保证哲学家的动作有序进行，而不会出现有人永远拿不到叉子呢？\n\n\n\n方案1 用信号量的方式，也就是PV操作来尝试解决，代码如下：\n\n// 哲学家个数#define N 5// 信号量初值为1，也就是叉子的个数semaphore fork[5];// i为哲学家编号0-4void smart_person(int i)&#123;    while (TRUE)    &#123;        // 哲学家思考        think();        // 去拿左边的叉子        P(fork[i]);        // 去拿右边的叉子        P(fork[(i + 1) % N]);        // 进餐        eat();        // 放下左边的叉子        V(fork[i]);        // 放下右边的叉子        V(fork[(i + 1) % N]);    &#125;&#125;\n\n   不过这种方法存在一个极端的问题：假设5人同时拿起左边的叉子，桌面上就没叉子了，这样就没有人能够拿起他们右边的叉子，也就说每一个都会在P(fork[(i+1)%N])这条语句阻塞，发生死锁现象。\n\n\n既然方案1 会放生同时竞争左边叉子导致死锁现象，那我们在拿叉子前，加个互斥信号量，代码如下：\n\n// 哲学家个数#define N 5// 信号量初值为1，也就是叉子的个数semaphore fork[5];// 互斥信号量，初始值为1semaphore mutex;// i为哲学家编号0-4void smart_person(int i)&#123;    while (TRUE)    &#123;        // 哲学家思考        think();        // 进入临界区        P(mutex);        // 去拿左边的叉子        P(fork[i]);        // 去拿右边的叉子        P(fork[(i + 1) % N]);        // 进餐        eat();        // 放下左边的叉子        V(fork[i]);        // 放下右边的叉子        V(fork[(i + 1) % N]);        // 退出临界区        V(mutex);    &#125;&#125;\n\n   上面程序的互斥信号量的作用在于，只要有一个哲学家进入了 临界区 ，也就是准备拿起叉子时，其他哲学家都不能懂，只有这位哲学家用完叉子了，才能轮到下一个哲学家进餐。\n\n   方案2虽然能让哲学家按顺序吃饭，但是每次只能一位，桌面上有5把叉子，最多可以有2位同时进餐。\n\n方案2使用互斥信号量会导致只能允许一个哲学家就餐，那么就不用它。另外，⽅案⼀的问题在于，会出现所有哲学家同时拿左边⼑叉的可能性，那我们就避免哲学家可以同时拿左边的⼑叉，采⽤分⽀结构，根据哲学家的编号的不同，⽽采取不同的动作。\n**即让偶数编号的哲学家「先拿左边的叉⼦后拿右边的叉⼦」，奇数编号的哲学家「先拿右边的叉⼦后拿左边的叉⼦」。\n\n\n// 哲学家个数#define N 5// 信号量初值为1，也就是叉子的个数semaphore fork[5];// 互斥信号量，初始值为1semaphore mutex;// i为哲学家编号0-4void smart_person(int i)&#123;    while (TRUE)    &#123;        // 哲学家思考        think();        if (i % 2 == 0)        &#123;            // 去拿左边的叉子            P(fork[i]);            // 去拿右边的叉子            P(fork[(i + 1) % N]);        &#125;        else        &#123;            // 去拿右边的叉子            P(fork[(i + 1) % N]);            // 去拿左边的叉子            P(fork[i]);        &#125;        // 进餐        eat();        // 放下左边的叉子        V(fork[i]);        // 放下右边的叉子        V(fork[(i + 1) % N]);        // 退出临界区        V(mutex);    &#125;&#125;\n\n   上面的程序，在P操作时，根据哲学家的编号不同，拿起左右两边叉子的顺序不同。另外V操作是不需要分支的，因为V操作时不会阻塞的。\n\n读者-写者问题\n读者只会读取数据，不会修改数据，而写者既可以读也可以修改数据。读者-写者的问题描述：\n\n\n读-读 允许：同一时刻，允许多个读者同时读\n读-写 互斥：没有写者时读者才能读，没有读者时，写者才能写；\n写-写 互斥：没有其他写者时，写者才能写。\n\n死锁死锁的概念\n当两个线程为了保护两个不同的共享资源而使用两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成 两个线程都在等待对方释放锁 ，在没有外力的作用下这些线程会一直相互等待，就没法继续运行，这种情况就是发生了 死锁。\n\n   死锁只有同时满足以下四个条件才会发生：\n\n互斥条件\n持有并等待条件\n不可剥夺条件\n环路等条件\n\n\n互斥条件是指 多个线程不能同时使用同一个资源 。\n\n   如果线程 A 已经持有的资源，不能再同时被线程 B 持有，如果线程 B 请求获取线程 A 已经占⽤的资源，那线程 B 只能等待，直到线程 A 释放了资源。\n\n\n持有并等待条件\n\n   持有并等待条件是指，当线程 A 已经持有了资源 1，⼜想申请资源 2，⽽资源 2 已经被线程 C 持有了，所以线程 A 就会处于等待状态，但是线程 A 在等待资源 2 的同时并不会释放⾃⼰已经持有的资源 1。\n   \n\n不可剥夺条件\n\n   不可剥夺条件是指，当线程已经持有了资源 ，在⾃⼰使⽤完之前不能被其他线程获取，线程 B 如果也想使⽤此资源，则只能在线程 A 使⽤完并释放后才能获取。\n\n\n环路等待条件\n\n   环路等待条件指的是，在死锁发生的时候，两个线程获取资源的数据构成了环形链。⽐如，线程 A 已经持有资源 2，⽽想请求资源 1， 线程 B 已经获取了资源 1，⽽想请求资源 2，这就形成资源请求等待的环形图。\n\n模拟死锁问题的产生/** * 死锁 */#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;pthread.h&gt;pthread_mutex_t mutex_A = PTHREAD_MUTEX_INITIALIZER;pthread_mutex_t mutex_B = PTHREAD_MUTEX_INITIALIZER;/** * 线程函数A * * 先获取互斥锁A，休眠1秒 * 再获取互斥锁B， * 释放互斥锁B * 最后释放互斥锁A */void *threadA_func(void *data)&#123;    printf(&quot;threadA waitting get ResourceA\\n&quot;);    pthread_mutex_lock(&amp;mutex_A);    printf(&quot;threadA got ResourceA\\n&quot;);    sleep(1);    printf(&quot;threadA waitting get ResourceB\\n&quot;);    pthread_mutex_lock(&amp;mutex_B);    printf(&quot;threadA got ResourceB\\n&quot;);    pthread_mutex_unlock(&amp;mutex_B);    pthread_mutex_unlock(&amp;mutex_A);    return (void *)0;&#125;/** * 线程函数B * 先获取互斥锁B，休眠1秒 * 再获取互斥锁A， * 释放互斥锁A * 最后释放互斥锁B */void *threadB_func(void *data)&#123;    printf(&quot;threadB waitting get ResourceB\\n&quot;);    pthread_mutex_lock(&amp;mutex_B);    printf(&quot;threadB got ResourceB\\n&quot;);    sleep(1);    printf(&quot;threadB waitting get ResourceA\\n&quot;);    pthread_mutex_lock(&amp;mutex_A);    printf(&quot;threadB got ResourceA\\n&quot;);    pthread_mutex_unlock(&amp;mutex_A);    pthread_mutex_unlock(&amp;mutex_B);    return (void *)0;&#125;int main()&#123;    pthread_t tidA, tidB;    // 创建两个线程    if (pthread_create(&amp;tidA, NULL, threadA_func, NULL) != 0)    &#123;        perror(&quot;ERROE CREATE TIDA\\n&quot;);    &#125;    else    &#123;        printf(&quot;PASS CREATE TIDA\\n&quot;);    &#125;    if (pthread_create(&amp;tidB, NULL, threadA_func, NULL) != 0)    &#123;        perror(&quot;ERROE CREATE TIDB\\n&quot;);    &#125;    else    &#123;        printf(&quot;PASS CREATE TIDB\\n&quot;);    &#125;    pthread_join(&amp;tidA, NULL);    pthread_join(&amp;tidB, NULL);    printf(&quot;TEST PASS\\n&quot;);    return 0;&#125;# RESULTPASS CREATE TIDAthread A waitting get ResourceAthread A got ResourceAPASS CREATE TIDBthread B waitting get ResourceBthread B got ResourceBthread A waitting get ResourceBthread B waitting get ResourceA\n\n   可以看到线程B在等待互斥锁A的释放，线程A在等待互斥锁B的释放，双方都在等待对方资源释放，很明显产生了死锁问题\n避免死锁问题产生\n产生死锁的四个必要条件是：互斥条件、只有并等待条件、不可剥夺条件、环路等待条件。避免死锁的问题只需要破坏其中一个条件就可以，最常见的并且可行的就是 使用资源有序分配法，来破坏环路等待条件 。\n\n   如上述代码，线程A是先获取互斥锁A后获取互斥锁B。只需要将线程B改成以相同的顺序获取资源就可以打破死锁了。\n/** * 死锁 * * 将线程改成以相同顺序获取资源，而取消死锁 */#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;pthread.h&gt;pthread_mutex_t mutex_A = PTHREAD_MUTEX_INITIALIZER;pthread_mutex_t mutex_B = PTHREAD_MUTEX_INITIALIZER;/** * 线程函数A * * 先获取互斥锁A，休眠1秒 * 再获取互斥锁B， * 释放互斥锁B * 最后释放互斥锁A */void *threadA_func(void *data)&#123;    printf(&quot;thread A waitting get ResourceA\\n&quot;);    pthread_mutex_lock(&amp;mutex_A);    printf(&quot;thread A got ResourceA\\n&quot;);    sleep(1);    printf(&quot;thread A waitting get ResourceB\\n&quot;);    pthread_mutex_lock(&amp;mutex_B);    printf(&quot;thread A got ResourceB\\n&quot;);    pthread_mutex_unlock(&amp;mutex_B);    printf(&quot;thread A released Resource B\\n&quot;);    pthread_mutex_unlock(&amp;mutex_A);    printf(&quot;thread A released Resource A\\n&quot;);    return (void *)0;&#125;/** * 线程函数B * 先获取互斥锁A，休眠1秒 * 再获取互斥锁B， * 释放互斥锁B * 最后释放互斥锁A */void *threadB_func(void *data)&#123;    printf(&quot;thread B waitting get ResourceA\\n&quot;);    pthread_mutex_lock(&amp;mutex_A);    printf(&quot;thread B got ResourceA\\n&quot;);    sleep(1);    printf(&quot;thread B waitting get ResourceB\\n&quot;);    pthread_mutex_lock(&amp;mutex_B);    printf(&quot;thread B got ResourceB\\n&quot;);    pthread_mutex_unlock(&amp;mutex_B);    printf(&quot;thread B released Resource B\\n&quot;);    pthread_mutex_unlock(&amp;mutex_A);    printf(&quot;thread B released Resource A\\n&quot;);    return (void *)0;&#125;int main()&#123;    pthread_t tidA, tidB;    // 创建两个线程    if (pthread_create(&amp;tidA, NULL, threadA_func, NULL) != 0)    &#123;        perror(&quot;ERROE CREATE TIDA\\n&quot;);    &#125;    else    &#123;        printf(&quot;PASS CREATE TIDA\\n&quot;);    &#125;    if (pthread_create(&amp;tidB, NULL, threadB_func, NULL) != 0)    &#123;        perror(&quot;ERROE CREATE TIDB\\n&quot;);    &#125;    else    &#123;        printf(&quot;PASS CREATE TIDB\\n&quot;);    &#125;    pthread_join(tidA, NULL);    pthread_join(tidB, NULL);    printf(&quot;TEST PASS\\n&quot;);    return 0;&#125;# RESULTPASS CREATE TIDAthread A waitting get ResourceAthread A got ResourceAPASS CREATE TIDBthread B waitting get ResourceAthread A waitting get ResourceBthread A got ResourceBthread A released Resource Bthread A released Resource Athread B got ResourceAthread B waitting get ResourceBthread B got ResourceBthread B released Resource Bthread B released Resource ATEST PASS\n\n总结   死锁问题的产⽣是由两个或者以上线程并⾏执⾏的时候，争夺资源⽽互相等待造成的。死锁只有同时满⾜互斥、持有并等待、不可剥夺、环路等待这四个条件的时候才会发⽣。所以要避免死锁问题，就是要破坏其中⼀个条件即可，最常⽤的⽅法就是使⽤资源有序分配法来破坏环路等待条件。\n悲观锁与乐观锁互斥锁与自旋锁：谁更轻松自如\n最底层的两种就是 互斥锁和自旋锁 ，很多高级锁都是基于他们实现的。加锁的目的就是保证贡献资源在任意时间里，只有一个线程访问，这样就可以避免多线程共享数据错乱的问题。\n\n   当有一个线程加锁后，其他线程加锁就会失败，互斥锁和自旋锁对于加锁失败后的处理方式是不一样的：\n\n互斥锁 加锁失败后，线程会 释放CPU，给其他线程；\n\n自旋锁 加锁失败后，线程会 忙等待，直到它拿到锁；\n互斥锁是一种 独占锁，比如当线程A加锁成功后，此时互斥锁已经被线程A独占了，只要线程A没有释放手中的锁，线程B加锁就会失败，于是会释放CPU给其他线程， 既然线程B释放掉了CPU，自然线程B加锁的代码就会被阻塞。\n对于互斥锁加锁失败而阻塞的现象，是由操作系统内核实现的。当加锁失败是，内核会将线程置为 睡眠 状态，等到锁被释放后，内核会在合适的时机唤醒线程，当这个线程获取到锁后，于是可以继续执行。如下图：\n\n\n\n   所以，互斥锁加锁失败时，会从用户态陷入到内核态，让内核帮我们切换线程，虽然简化了使用锁的难度，但是存在一定的性能开销成本。那么这个开销成本是什么？ 两次线程上下文切换的成本；\n   线程上下文切换的是什么？当两个线程属于同一个进程时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。上下文切换的耗时大概在几十纳秒到几微秒之间，如果锁住的代码时间比较短，那么可能上下文切换的时间都比锁住代码的执行时间还要长。所以，如果能确定被锁住的代码执行时间很短，就不应该用互斥锁，而应该选用自旋锁，否则使用互斥锁。\n   自旋锁是通过CPU提供的 CAS函数（Compare And Swap），在用户态完成加锁和解锁操作，不会主动产生线程上下文切换，所以相比互斥锁来说，会快一点，开销也小一点。\n   一般加锁的过程，包含2个步骤：\n\n查看锁的状态，如果锁是空闲的，则执行第二步；\n\n将锁设置为当前线程持有；\nCAS函数就把这两个步骤合并成一条硬件级指令，形成 原子指令，这样就保证了这两个步骤是不可分割的，要么一次性执行完2个步骤，要门两个步骤都不执行。\n使用自旋锁的时候，当发生多线程竞争锁的情况，加锁失败的线程会 忙等待 ，直到它拿到锁。这里的忙等待，可以用while循环等实现，不过最好使用CPU提供的 PAUSE 指令来实现 忙等待，因为可以减少循环等待时的耗电量。\n自旋锁是最比较简单的一种锁，一致自旋，利用CPU周期，直到锁可用。需要注意，在单核CPU上，需要抢占式的调度器（即不断通过时钟中断一个线程，运行其他线程）。否则，自旋锁在单CPU上无法使用，因为一个自旋的线程永远不会放弃CPU。\n自旋锁开销少，在多核系统下一般不会主动产生线程切换，适合异步、协程等在用户态切换请求的编程方式，但如果被锁住的代码执行时间过长，自旋锁的线程会长时间占用CPU资源，所以 自旋的时间 和 被锁住的代码执行时间 是成 正比 的关系。\n自旋锁与互斥锁使用层面比较相似，但实现层面上完全不同：**当加锁失败时，互斥锁用 线程切换 来赢多，自旋锁则用 忙等待 来应对。\n互斥锁和自旋锁是锁的最基本的处理凡是，更高级的锁都会选择其中一个来实现，比如读写锁既可以选择互斥锁来实现，也可以基于自旋锁来实现。\n\n\n读写锁：读和写还有优先级区分吗？\n读写锁由 读锁 和 写锁 两部分构成，如果只读取共享资源，用 读锁 加锁，如果要修改共享资源则用 写锁 加锁。所以，读写锁适用于明确区分读操作和写操作的场景。\n\n   读写锁的工作原理是：\n\n当 写锁 没有被线程持有时，多个线程能并发的持有 读锁，这大大提供了共享资源的额访问效率，因为 读锁 是用于读取共享资源的场景，所以多个线程同时持有读锁也不会破坏共享资源的数据。\n\n但是，一旦 写锁 被线程持有后，读线程获取读锁的操作会被阻塞，而其他写线程的获取写锁的操作也会被阻塞。\n所以说 写锁是独占锁 ，因为任何时刻只能有一个线程持有写锁，类似互斥锁和自旋锁，而 读锁是共享锁 ，因为读锁可以被多个线程同时持有\n根据实现的不同，读写锁可以分为 读优先锁 和 写优先锁。读优先锁期望的是，读锁能被跟多的线程持有，以便提高读线程的并发性，它的工作方式是：当读线程A先持有了读锁，写线程B在获取写锁的时候会被阻塞，并且在阻塞过程中，后续来的读线程C任然可以成功获取读锁，最后直到读线程A和C释放读锁后，写线程B才可以成功获取写锁。如下图：\n\n\n\n   写优先锁是优先服务写线程，其工作方式是：当读线程A先持有了读锁，写线程B在获取写锁的时候，会被阻塞，并且在阻塞过程中，后续来的读线程C获取读锁时会失败，于是读线程C将被阻塞在获取读锁的操作，这样只要读线程A释放读锁后，写线程B就可以成功获取读锁。如下图：\n\n   读优先锁对应读线程并发性更好，但也不是没有问题，如果一直有读线程获取读锁，那么写线程将永远获取不到写锁，这就造成了 线程饥饿 的现象。写优先锁可以保证写线程不会饿死，但是如果一直有写线程获取写锁，读线程也会被饿死。既然不管读优先锁还是写优先锁双方都可能出现饿死问题，所以希望出现 公平读写锁\n   公平读写锁比较简单的一种方式是：用队列把获取所得线程排队，不管是写线程还是读线程，都按照先进先出的原则加锁即可，这样读线程仍然可以并发，也不会出现 饥饿 的现象。互斥锁和自旋锁都是最基本的锁，读写锁可以根据场景来选择这两种锁的其中一个来实现。\n悲观锁与乐观锁：做事心态有何不同？\n互斥锁、自旋锁、读写锁都属于悲观锁。悲观锁做事比较悲观，他认为 多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，都要先上锁。那相反，如果多线程同时修改共享资源概率比较低，就可以使用乐观锁。乐观锁做事比较乐观，它假定冲突的概率很低，它的工作方式是：先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现其他线程已经修改过这个资源就放弃本次操作。放弃后如何充实，这跟业务场景相关，虽然重试成本高，但是冲突概率足够低的话，还是可以接受的。可见 乐观锁全程并没有加锁，所以也叫它无锁编程。\n\n   实际上，我们常见的SVN和Git也是用了乐观锁的思想，先让用户编辑代码，然后提交的时候通过版本号来判断是否发生了冲突，发生了冲突的地方，需要我们修改后，再重新提交。\n   乐观锁，虽然去除了加锁解锁的操作，但是一旦发生冲突，重试的成本非常高，所以 只有在冲突概率非常低，且加锁成本非常高的场景是，才考虑使用乐观锁。\n总结   开发过程中，最常⻅的就是互斥锁的了，互斥锁加锁失败时，会⽤「线程切换」来应对，当加锁失败的线程再次加锁成功后的这⼀过程，会有两次线程上下⽂切换的成本，性能损耗⽐较⼤。\n   如果我们明确知道被锁住的代码的执⾏时间很短，那我们应该选择开销⽐较⼩的⾃旋锁，因为⾃旋锁加锁失败时，并不会主动产⽣线程切换，⽽是⼀直忙等待，直到获取到锁，那么如果被锁住的代码执⾏时间很短，那这个忙等待的时间相对应也很短。\n   如果能区分读操作和写操作的场景，那读写锁就更合适了，它允许多个读线程可以同时持有读锁，提⾼了读的并发性。根据偏袒读⽅还是写⽅，可以分为读优先锁和写优先锁，读优先锁并发性很强，但是写线程会被饿死，⽽写优先锁会优先服务写线程，读线程也可能会被饿死，那为了避免饥饿的问题，于是就有了公平读写锁，它是⽤队列把请求锁的线程排队，并保证先⼊先出的原则来对线程加锁，这样便保证了某种线程不会被饿死，通⽤性也更好点。\n   互斥锁和⾃旋锁都是最基本的锁，读写锁可以根据场景来选择这两种锁其中的⼀个进⾏实现。\n   另外，互斥锁、⾃旋锁、读写锁都属于悲观锁，悲观锁认为并发访问共享资源时，冲突概率可能⾮常⾼，所以在访问共享资源前，都需要先加锁。\n   相反的，如果并发访问共享资源时，冲突概率⾮常低的话，就可以使⽤乐观锁，它的⼯作⽅式是，在访问共享资源时，不⽤先加锁，修改完共享资源后，再验证这段时间内有没有发⽣冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作。\n   但是，⼀旦冲突概率上升，就不适合使⽤乐观锁了，因为它解决冲突的重试成本⾮常⾼。不管使⽤的哪种锁，我们的加锁的代码范围应该尽可能的⼩，也就是加锁的粒度要⼩，这样执⾏速度会⽐较快。再来，使⽤上了合适的锁，就会快上加快了。\n调度算法进程调度算法内存页面置换算法磁盘调度算法扫描算法文件系统文件系统的组成\n文件系统是操作系统中负责管理持久数据的子系统，就是把用户的文件存到磁盘硬件中，即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。文件的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，组织的方式不同就会形成不同的文件系统。\n\n   Linux最经典的一句话就是 一切皆文件，不仅普通的文件和目录，就连块设备、管道、socket等，也都是统一交给文件系统管理的。\n   Linux文件系统会为没饿文件分配两个数据结构：索引节点（index node）和目录项（directory entry），他们主要用来记录文件的元信息和目录层级结构。\n\n索引节点，也就是inode，用来记录文件的元信息，比如inode编号、文件大小、访问权限、创建时间、修改时间、 数据在磁盘的位置 等等。索引节点是文件的 唯一 标识，他们之间一一对应，也同样都会被存储在硬盘中，所以 索引节点同样占用磁盘空间 。\n\n目录项，也就是entry，用来记录文件的名字、 索引节点指针 以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但他与索引节点不同的是， 目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存。\n由于索引节点唯一标识一个文件，而目录项记着文件的名，所以目录项和索引节点的关系是多对一，也就是说，一个文件可以有多个别字。比如，硬链接的实现就是，多个目录项中的索引节点指向同一个文件。\n注意：目录也是文件，也是索引节点唯一标识，和普通文件不同额是，普通文件在磁盘里面保存的是文件数据，而目录文件在磁盘里面保存子目录或文件。\n\n\n\n目录项和目录是一个东西吗？\n\n   虽然名字很相近，但是两者不是一个东西，目录是个文件，持久化存储在磁盘，而目录项是内核一个数据结构，缓存在内存。如果查询目录频繁从磁盘读，效率会很低，所以内核会把已经度过的目录用目录项这个数据结构缓存在内存，下次再读到相同目录时，只需从内存读就可以，大大提高了文件系统的效率。\n\n那文件数据是如何存储在磁盘的呢？\n\n   磁盘读写的最小单位是 扇区，扇区的大小只有 512B，很明显，如果每次读写都以这么小为单位，那这读写的效率会非常低。所以文件系统把多个扇区组成了一个 逻辑块，每次读写的最小单位就是逻辑块（数据块），Linux中的逻辑块大小是4GB，也就是一次读写8个扇区（512B X 8 &#x3D; 4096B &#x3D; 4KB(1KB &#x3D; 1024B)）这将大大提高了磁盘的读写的效率。\n   索引节点、目录项、以及文件数据的关系如下所示：\n\n   索引节点是村吃在硬盘上的数据，为了加速文件的访问，通常会把索引节点加载到内存中。另外，磁盘进行格式化的时候，会被分成三个存储区域，分别是 超级块、索引节点和数据块区。\n\n超级块，用来存储文件系统的详细信息，比如快个数、块大小、空闲块等等。\n\n索引节点区，用来存储索引节点；\n\n数据块区，用来存储文件或目录数据；\n不可能把超级块和索引节点区全部加载到内存，内存无法支撑，所以只有当需要使用的时候，才将其加载进内存，他们加载进内存的时候不同的：\n\n超级块：当文件系统挂载时进入内存；\n\n索引节点区：当文件被访问时进入内存；\n\n\n虚拟文件系统   文件系统种类太多，而操作系统希望 对用户提供一个统一的接口，于是在用户层与文件系统层引入了中间层，这个中间层就称为 虚拟文件系统（Virtual File System,VFS），VFS定义了一组所有文件系统都要支持的数据结构和标准接口，只需要了解VFS提供的统一接口即可。在Linux文件系统中，用户空间、系统调用、虚拟机文件系统、缓存、文件系统以及存储之间的关系如下图：\n\n   Linux支持的文件系统也不少，根据存储的位置不同，可以把文件系统分为三类：\n\n磁盘的文件系统，它是直接把数据存储在磁盘中，比如Ext2&#x2F;3&#x2F;4、XFS等都是这类文件系统\n\n内存的文件系统，这类文件系统的数据不是存储在硬盘的，而是占用内存空间，我们经常用到的&#x2F;proc和&#x2F;sys文件都属于这一类，读写这类文件，实际上是读写内核中相关的数据。\n\n网络的文件系统，用来访问其他的计算机主机数据的文件系统，比如NFS、SMB等等。\n文件系统首先要先挂载到某个目录才可以正常使用，比如Linux系统在启动是，会把文件系统挂载到根目录。\n\n\n文件的使用\n\n首先用 open 系统调用打开文件，open的参数包括文件的路径名和文件名 ；\n\n使用 write 写数据，其中write使用open所返回的 文件描述符 ，并不使用文件名作为参数；\n\n使用完文件后，要用 close 系统调用关闭文件，避免资源的泄露。\n我们打开一个文件后，操作系统会跟踪进程打开的所有文件，所谓的跟踪就是操作系统为每个进程维护一个打开的文件表，文件表里的每一项代表 文件描述符，所以说文件描述符是打开文件的标识。\n\n\n\n   操作系统在打开文件表中维护这打开文件的状态和信息：\n\n文件指针：系统跟踪上次读写位置作为当前文件位置指针，这种指针对打开文件的某个进程来说是唯一的；\n\n文件打开计数器：文件关闭时，操作系统必须重用其打开文件表条目，否则表内空间不够用。因为多个进程可能打开同一个文件，所以系统在删除打开文件条目之前，必须等待最后一个进程关闭文件，该计数器跟踪打开和关闭的数量，当该计数为0时，系统关闭文件，删除该条目；\n\n文件磁盘位置：绝大多数文件操作都要求修改文件数据，该信息保存在内存中，以免每个操作都从磁盘中读取；\n\n访问权限：每个进程打开文件都需要一个访问模式（创建、只读、读写、添加等），该信息保存在进程的打开文件列表中，以便操作系统能允许或拒绝之后的I&#x2F;O请求。\n在用户视角里，文件就是一个持久化的数据结构，但操作系统不会关系你想存在磁盘上的任何数据结构，操作系统的视角是以数据块来读写文件，屏蔽掉这种差异的工作就是文件系统了。\n读文件和写文件的过程：\n\n当用户进程从文件读取1个字节大小的数据时，文件系统需要获取字节块所在的数据块，再返回数据块对应的用户进程需要的数据部分。\n\n当用户进程把1个字节大小的数据写进文件时，文件系统则找到需要写入数据块的位置，然后修改数据块中对应的部分。\n\n所以说，文件系统的基本操作单位是数据块\n\n\n文件的存储\n文件的数据时存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种：\n\n\n连续空间存放方式\n非连续空间存放方式\n链表方式\n索引方式\n\n\n\n连续空间存储\n连续空间存放的方式顾名思义， 文件存放在磁盘 连续 的物理空间中。这种模式下，文件的数据都是紧密相连，读写效率很高，因为一次磁盘寻道就可以独处整个文件。\n\n   使用连续存放的方式有一个前提，必须先知道 一个文件的大小，这样文件系统才会根据文件的大小在磁盘上找到一块连续的空间分配给文件。\n   所以，文件头里需要指定 起始块的位置 和 长度 ，有了这两个信息就可以很好的表示文件的存放方式是一块连续的磁盘空间。（此处说的文件头就类似与Linux的inode）\n\n   连续空间存放的方式虽然读写效率高，但是有 磁盘空间碎片 和 文件长度不易扩展 的缺陷。\n非连续空间存储链表方式\n链表的方式存放是 离散的，不用连续的，于是就可以 消除磁盘碎片，可以大大提高空间的利用率，同时 文件的长度是可以动态扩展。根据实现的方式不同，链表可以分为 隐式链表 和 显示链接两种形式。\n\n   文件要以 隐式链表 的方式存放的话，实现的方式是文件头要包含第一块和最后一块的位置，并且每个数据块里留出一个指针空间，用来存放下一个数据块的位置，这样一个数据块连着一个数据块，从链头开始就可以顺着指针找到所有的数据块，所以存放的方式可以是不连续的。\n\n   隐式链表的存放方式的 缺点在于无法直接访问数据块，智能通过指针方式顺序访问文件，以及数据块指针消耗了一定的存储空间。隐式链表分配的 稳定性较差，系统在运行过称中，由于软件或硬件错误 导致链表中的指针丢失或损坏，会导致文件数据的丢失。\n   如果取出每个磁盘块的指针，把它放在内存的一个表中，就可以解决上述隐式链表中的两个不足。那么这种实现方式是 显示链接，他指 把用于链接文件各数据块的指针，显示的存放在内存的一张链表中 ，该表在整个磁盘仅设置一张，每个表项中存放的链接指针，指向下一个数据块号。\n   对于显式链接的⼯作⽅式，我们举个例⼦，⽂件 A 依次使⽤了磁盘块 4、 7、 2、 10 和 12 ，⽂件 B 依次使⽤了磁盘块 6、 3、 11 和 14 。利⽤下图中的表，可以从第 4 块开始，顺着链⾛到最后，找到⽂件 A 的全部磁盘块。同样，从第 6 块开始，顺着链⾛到最后，也能够找出⽂件 B 的全部磁盘块。最后，这两个链都以⼀个不属于有效磁盘编号的特殊标记（如 -1 ）结束。内存中的这样⼀个表格称为 ⽂件分配表（FileAllocation Table， FAT）。\n\n   由于查找记录的过程是在内存中进行的，因而不仅显著地 提高了检索速度，而且 大大减少了访问磁盘的次数。但也正是整个表都存放在内存中的关系， 它的主要缺点是 不适用于大磁盘。\n索引方式\n链表的方式解决了连续分配的磁盘碎片和文件动态扩展的问题，但是不能有效支持直接访问（FAT除外），索引的方式可以解决这个问题。\n\n   索引的实现是为每个文件创建一个 索引数据块，里面存放的是 指向文件数据块的指针列表，就像是书的目录一样，要找哪个章节的内容，看目录就可以。\n   另外， 文件头需要包含指向 索引数据块 的指针 ，这样就可以通过文件头知道索引数据块的位置，再通过索引数据块里的索引信息找到对应的数据块。\n   创建文件时，索引块的所有指针都设为空。当首次写入第i块是，先从空闲空间中取得一个块，再将其他地址写到索引块的第i个条目。\n\n   索引的方式优点在于：\n\n文件的创建、增大、缩小很方便；\n\n不会有碎片的问题；\n\n支持顺序读写和随机读写；\n由于索引数据也是存放在磁盘块的，如果文件很小，明明只需一块就可存放的下，但还是需要额外分配一块来存放索引数据，所以缺陷之一就是存储索引带来的开销。如果文件很大，大到一个索引数据块放不下索引信息，可以通过组合的方式，来处理大文件的内存。\n\n\n\n链表+索引 又被称为链式索引块，它的实现方式是 在索引数据块留出一个存放下一个索引数据块的指针，于是当一个索引数据块的索引信息用完，就可以通过指针的方式，找到下一个索引数据块的信息。这种方式也会出现前面提到的链表方式的问题，万一某个指针损坏，后面的数据就无法读取了。\n\n\n\n还有另外一种组合的方式是 索引+索引的方式，这种组合称为 多级索引块，实现方式是 通过一个索引块来存放多个索引数据块，一层套一层索引。\n\n\nUnix文件的实现方式\n空闲空间管理\n前面讲到的文件存储是针对已经被占用数据块组织和管理，那如果要保存一个数据块，应该放在硬盘哪个位置？\n\n\n空闲表法\n空闲链表法\n位图法\n\n\n空闲表法\n\n   空闲表法就是为所有空闲空间建立一张表，表内容包括空闲区的第一个块号和该空闲区的块个数，这个方式是连续分配的，如下图：\n\n   当请求分配磁盘空间时，系统依次扫描空闲表里的内容，直到找到一个合适的空闲区域位置，当用户撤销一个文件时，系统回收文件空间。这时，也需顺序扫描空闲表，寻找一个空闲表条目并将释放空间的第一个物理块号以及他占用的块数填到这个条目中。\n   这种方法仅当有少量的空闲区时才有较好的效果。因为，如果存储空间存在大量的小的空闲区，则空闲区表变得很大，这样查询效率会很低。另外，这种分配技术适用于建立连续文件。\n\n空闲链表法\n\n   用链表的方式管理空想空间，每一个空闲块里有一个指针指向下一个空闲块\n\n   当创建文件需要一块或几块是，就从链头上依次取下一块或几块。反之，当回收空间是，把这些空闲块依次接到链头上。这种技术只要在主存中保存一个指针，令他指向第一个空闲块。其特点是简单，但不能随机访问，工作效率低，因为每当在链表上增加或移动空闲块是需要做很多I&#x2F;O操作，同时数据块的指针消耗了一定的存储空间。空闲表法和空闲链表法都不适用于大型文件系统，因为这回事空闲表或空闲链表太大。\n\n位图法\n\n   位图是利用二进制的一位来表示磁盘中的一个盘块的使用情况，磁盘上所有的盘块都有一个二进制位与之对应。当值为0时，表示对应的盘块空闲，值为1时，表示对应的盘块已分配。如：111111100001110010\n   在Linux文件系统就采用了位图的方式来管理空闲空间，不仅用于数据空闲块的管理，还用于inode空闲块的管理，因为inode也是存储在磁盘的，自然也要有对其管理。\n文件系统的结构\nLinux使用位图的方式管理空闲空间，用户在创建一个新文件时，Linux内核会通过inode的位图找到空闲可用的inode，并进行分配。存储数据时，会通过块的位图找到空闲的块，并分配，但仔细计算还是有问题的。\n\n   数据块的位图是放在磁盘块里的，假设放在一个块里，一个块4k，每位表示一个数据块，共可以表示 410248&#x3D;2^15 个空闲块，由于1个数据块是4k大小，那么最大可以表示的空间为 2^1541024&#x3D;2^27 个byte, 也就是128M。\n   也就是说按照上⾯的结构，如果采⽤「⼀个块的位图 + ⼀系列的块」，外加「⼀个块的 inode 的位图 + ⼀系列的 inode 的结构」能表示的最⼤空间也就 128M，这太少了，现在很多⽂件都⽐这个⼤。在 Linux ⽂件系统，把这个结构称为⼀个块组，那么有 N 多的块组，就能够表示 N ⼤的⽂件。下图给出了 Linux Ext2 整个⽂件系统的结构和块组的内容，⽂件系统都由⼤量块组组成，在硬盘上相继排布：\n\n   最前面的第一个块是引导块，在系统启动时用于弃用引导，接着后面就是一个连续的块组了，块组的内容如下：\n\n超级块，包含的是文件系统的重要信息，比如inode总个数、块总个数、每个块组的inode个数、每个块组的块个数等待。\n\n块组描述符，包含文件系统中各个块组的状态，比如块组中空闲块和inode的数目等，每个块组都包含了文件系统中 所有块组的组描述符信息。\n\n数据位图和inode位图，用于表示对应的数据块或inode是空闲的还是被使用中\n\ninode列表，包含了块组中所有的inode，inode用于保存文件系统中与各个文件和目录相关的所有元数据。\n\n数据块，包含文件的有用数据\n可以发现，每个块里有很多重复的信息，比如 超级块和块组描述符表，这两个都是全局信息，而且非常重要，原因如下：\n\n如果系统崩溃了破坏了超级块和块组描述符，有关文件系统结构和内容的所有信息都会丢失。如果有冗余的副本，该信息是可能恢复的。\n\n通过使文件和管理数据尽可能接近，减少了磁头寻道和旋转，这可以提高文件系统的性能。\n不过Ext2的后续版本采用了稀疏技术。该做法是，超级块和块组描述符表不再存储到文件系统的每个块组中，而是只写入到块组0、块组1和其他ID可以表示为3、5、7的幂的块组中。\n\n\n目录的存储\n和普通文件不同的是，普通文件的块了保存的是文件数据，而目录文件的块里面保存的是目录里面一项一项的文件信息。\n\n列表   在目录文件的块中，最简单的保存格式就是 列表，就是一项一项地将目录下的文件信息（如文件名、文件inode、文件类型等）列在表里。\n   列表中每一项就代表该目录下的文件的文件名和对应的inode，通过这个inode，就可以找到真正的文件。\n\n   通常第一项是 . ，表示当前目录，第二项是 .. ，表示上一级目录，接下来就是一项一项的文件名和inode。\n哈希表   如果一个目录有超级多的文件，我们想要在这个目录下找文件，按照列表一项一项的找，效率不高。\n   于是，保存目录的格式改成 哈希表 ，来宝座目录的内容，这种方法的优点是查找非常迅速，插入和删除也比较简单，不过需要一些预备措施来避免哈希冲突。\n   目录查询是通过在磁盘上反复搜索完成，需要不断的镜像I&#x2F;O操作，开销较大。所以，为了减少I&#x2F;O操作，把当前使用的文件目录缓存在内存，以后要使用该文件时只要在内存中操作，从而降低了磁盘操作次数，提高了文件系统的访问速度。\n软链接和硬链接   有时希望给某个文件取个别名，那么在Linux中可以通过 硬链接（Hard Link）和软链接（Symbolic Link） 的方式来实现，他们都是比较特殊的文件，但实现方式也是不相同的。\n   硬链接是 多个目录项中的 索引节点 指向一个文件 ，也就是执行同一个inode，但是inode是不可能跨越文件系统的，每个文件系统都有格子的inode数据结构和列表，所以 硬链接是不可用于跨文件系统的。由于多个目录项都是执行一个inode，那么只有 删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。\n\n   软链接相当于重新创建一个文件，这个文件有 独立的inode ，但是这个 文件的内容是另一个文件的路径，所以访问软连接的时候，实际上相当于访问到了另外一个文件，所以 软链接是可以跨文件系统的，甚至 目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已 。\n\n文件I&#x2F;O\n文件的读写方式各有千秋，对文件的I&#x2F;O分类也非常多，常见的有\n\n\n缓冲与非缓冲I&#x2F;O\n直接与非直接I&#x2F;O\n阻塞与非阻塞I&#x2F;O VS 同步与异步I&#x2F;O\n\n缓冲与非缓冲I&#x2F;O   文件操作的标准库是可以实现数据的缓存，那么**根据 是否利用标准库缓冲，可以把文件I&#x2F;O分为缓冲I&#x2F;O和非缓冲I&#x2F;O：\n\n缓冲I&#x2F;O，利用的是标准库的缓存实现文件的加速访问，而标准库在通过系统调用访问文件。\n\n非缓冲I&#x2F;O，直接通过系统调用访问文件，不经过标准库缓存。\n这里所说的 缓冲 特指标准库内部实现的缓冲。\n比如说，很多程序遇到换行时才真正输出，而换行前的内容，其实就是被标准库暂时缓存了起来，这样做的目的是，减少系统调用的次数，毕竟系统调用是由CPU上下文（CPU寄存器和程序计数器的切换）的开销的。\n\n\n直接与非直接I&#x2F;O\n我们都知道磁盘I&#x2F;O是非常慢的，所以Linux内核为了减少磁盘I&#x2F;O次数，在系统调用后，会把用户数据拷贝到内核中缓存起来，这个内核缓存空间就是 页缓存，只有当缓存满足某些条件的时候，才发起磁盘I&#x2F;O的请求。\n\n   那么， **根据是否利用操作系统的缓存，可以把文件I&#x2F;O分支直接I&#x2F;O与非直接I&#x2F;O：\n\n直接I&#x2F;O，不会发生内核缓存何用程序之间数据复制，而是直接经过文件系统访问磁盘。\n\n非直接I&#x2F;O，读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再由内核决定什么时候写入数据到磁盘。\n如果在使用文件操作系统调用函数时，指定了 O_DIRECT 标志，则表示使用直接I&#x2F;O，如果没有设置过，默认使用的是非直接I&#x2F;O。\n\n\n\n如果用了非直接I&#x2F;O进行写数据操作，内核什么情况下才会把缓存数据写入到磁盘？\n\n\n在调用 write 的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上；\n当用户主动调用 sync ，内核缓存会刷到磁盘上\n当内存十分紧张，无法再分配页面时，也会把内核数据写到磁盘上；\n内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；\n\n阻塞与非阻塞I&#x2F;O VS 同步与异步I&#x2F;O   阻塞I&#x2F;O，当用户程序执行read，线程会被阻塞，一直等到内核数据准备好，并把数据从内核缓冲区拷贝到应用程序的缓冲区中，当拷贝过程完成，read才会返回。\n   注意：**阻塞等待的是 内核数据准备好 和 数据从内核态拷贝到用户态 这两个过程\n\n   非阻塞I&#x2F;O，非阻塞的read请求数据未准备好的情况下⽴即返回，可以继续往下执⾏，此时应⽤程序不断轮询内核，直到数据准备好，内核将数据拷⻉到应⽤程序缓冲区， read 调⽤才可以获取到结果。过程如下图：\n\n   注意， 这⾥最后⼀次 read 调⽤，获取数据的过程，是⼀个同步的过程，是需要等待的过程。这⾥的同步指的是内核态的数据拷⻉到⽤户程序的缓存区这个过程 。\n   举个例⼦，访问管道或 socket 时，如果设置了 O_NONBLOCK 标志，那么就表示使⽤的是⾮阻塞 I&#x2F;O 的⽅式访问，⽽不做任何设置的话，默认是阻塞 I&#x2F;O。\n   应⽤程序每次轮询内核的 I&#x2F;O 是否准备好，感觉有点傻乎乎，因为轮询的过程中，应⽤程序啥也做不了，只是在循环。为了解决这种傻乎乎轮询⽅式，于是 I&#x2F;O 多路复⽤ 技术就出来了，如 select、 poll，它是通过 I&#x2F;O 事件分发，当内核数据准备好时，再以事件通知应⽤程序进⾏操作。这个做法⼤⼤改善了应⽤进程对 CPU 的利⽤率，在没有被通知的情况下，应⽤进程可以使⽤ CPU 做其他的事情。下图是使⽤ select I&#x2F;O 多路复⽤过程。注意， read 获取数据的过程（数据从内核态拷⻉到⽤户态的过程），也是⼀个 同步的过程 ，需要等待：\n\n   实际上，⽆论是阻塞 I&#x2F;O、⾮阻塞 I&#x2F;O，还是基于⾮阻塞 I&#x2F;O 的多路复⽤ 都是同步调⽤。因为它们在 read调⽤时，内核将数据从内核空间拷⻉到应⽤程序空间，过程都是需要等待的，也就是说这个过程是同步的，如果内核实现的拷⻉效率不⾼， read 调⽤就会在这个同步过程中等待⽐较⻓的时间。\n   ⽽真正的 异步 I&#x2F;O 是「内核数据准备好」和「数据从内核态拷⻉到⽤户态」这两个过程都不⽤等待。\n   当我们发起 aio_read 之后，就⽴即返回，内核⾃动将数据从内核空间拷⻉到应⽤程序空间，这个拷⻉过程同样是异步的，内核⾃动完成的，和前⾯的同步操作不⼀样，应⽤程序并不需要主动发起拷⻉动作。过程如下图\n\n   以下是几种I&#x2F;O模型\n\n   我们知道了I&#x2F;O是分两个过程的：\n\n数据准备的过程\n\n数据从内核空间拷贝到用户进程缓冲区的过程\n阻塞I&#x2F;O会阻塞在 过程1 和 过程2 ，而非阻塞I&#x2F;O和基于非阻塞I&#x2F;O的多路复用只会阻塞在 过程2，所以这三个都可以认为是同步I&#x2F;O。\n异步I&#x2F;O则不同，过程1 和 过程2 都不会阻塞。\n\n\n\n用故事去理解这几种I&#x2F;O模型\n\n   举个你去饭堂吃饭的例⼦，你好⽐⽤户程序，饭堂好⽐操作系统。\n   阻塞 I&#x2F;O 好⽐，你去饭堂吃饭，但是饭堂的菜还没做好，然后你就⼀直在那⾥等啊等，等了好⻓⼀段时间终于等到饭堂阿姨把菜端了出来（数据准备的过程），但是你还得继续等阿姨把菜（内核空间）打到你的饭盒⾥（⽤户空间），经历完这两个过程，你才可以离开。\n   ⾮阻塞 I&#x2F;O 好⽐，你去了饭堂，问阿姨菜做好了没有，阿姨告诉你没，你就离开了，过⼏⼗分钟，你⼜来饭堂问阿姨，阿姨说做好了，于是阿姨帮你把菜打到你的饭盒⾥，这个过程你是得等待的。\n   基于⾮阻塞的 I&#x2F;O 多路复⽤好⽐，你去饭堂吃饭，发现有⼀排窗⼝，饭堂阿姨告诉你这些窗⼝都还没做好菜，等做好了再通知你，于是等啊等（ select 调⽤中），过了⼀会阿姨通知你菜做好了，但是不知道哪个窗⼝的菜做好了，你⾃⼰看吧。于是你只能⼀个⼀个窗⼝去确认，后⾯发现 5 号窗⼝菜做好了，于是你让 5 号窗⼝的阿姨帮你打菜到饭盒⾥，这个打菜的过程你是要等待的，虽然时间不⻓。打完菜后，你⾃然就可以离开了。\n   异步 I&#x2F;O 好⽐，你让饭堂阿姨将菜做好并把菜打到饭盒⾥后，把饭盒送到你⾯前，整个过程你都不需要任何等待。\n设备管理设备控制器\n电脑有非常的的输入输出设备，比如键盘、鼠标、显示器、网卡、硬盘、打印机、音响等，每个设备的用法和功能都不同，操作系统如何把这些输入输出设备统一管理的呢？为了屏保设备之间的差异，每个设备之间都有一个叫 设备控制器 （Device Control）的组件，比如硬盘有硬盘控制器、显示器有视频控制器等。\n\n\n   因为这些控制器都很清楚知道对应设备的用法和功能，所以CPU是通过控制器和设备打交道的。设备控制器里有芯片，它可执行自己的逻辑，也有自己的寄存器，用来与CPU进行通信，比如：\n\n通过写入这些寄存器，操作系统可以命令设备发送数据、接收数据、开启或关闭、或者执行某些其他操作。\n\n通过读取这些寄存器，操作系统可以了解设备的状态，是否准备好接收一个新的命令等。\n实际上，控制器是由三类寄存器，他们分别是 状态寄存器（Status Register）、命令寄存器（Command Register）以及数据寄存器（Data Reister） ，如下图：\n\n\n\n\n数据寄存器，CPU项I&#x2F;O设备写入需要传输的数据，比如要打印的是内容是 “hello”，CPU就要先发送一个“h”字符给到对应的I&#x2F;O设备\n命令寄存器，CPU发送一个命令，告诉I&#x2F;O设备，要进行输入&#x2F;输出操作，于是就会\n\nI&#x2F;O控制方式设备驱动程序通用块层存储系统I&#x2F;O软件分层键盘敲入字母时，期间发生了什么网络系统","categories":["操作系统"],"tags":["操作系统"]},{"title":"Matplotlib-0_基本概念","url":"/cmchtgea2006fnegb2e8xfyal/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-1_基础_折线图","url":"/cmchtgea3006hnegbbwpv563r/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib_1_折线图","url":"/cmchtgea3006knegbd9km6sdl/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-1_基础_折线图","url":"/cmchtgea4006nnegb680o4hge/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-2_风格设置","url":"/cmchtgea4006qnegb39jsdu6u/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-3_条形图","url":"/cmchtgea5006snegbcxw31fmp/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-4_盒图","url":"/cmchtgea5006vnegbf4ui37nr/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-5_直方图","url":"/cmchtgea6006znegbd0ucfm01/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-6_散点图","url":"/cmchtgea60073negb1xq7ews6/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-7_Matplotlib","url":"/cmchtgea70076negb3w024dap/","content":"","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-8_Matplotlib常用知识点","url":"/cmchtgea70079negbcho02aqm/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Matplotlib-10_Matplotlib-Practice","url":"/cmchtgea8007dnegb81jk5dxy/","content":"\n","categories":["Python生态"],"tags":["Matplotlib"]},{"title":"Qemu模拟ARM","url":"/cmchtgea8007gnegbei072yqm/","content":"&#x20;Qemu是一款开源免费的仿真软件，跟VMware station类似，可以仿真一台虚拟的电脑，然后在这个电脑上安装各种操作系统、运行各种应用程序。Qemu和VMware station不同的是，除了可以仿真一台电脑外，它还支持仿真一系列嵌入式开发板（支持ARM、MIPS、RISC-V等各种架构），模拟的开发板支持各种外设：串口、LCD、网卡、USB、SD卡等，可以在这个开发板上运行U-boot+Linux+Rootfs。对于缺少开发板学习嵌入式、研究U-boot、Linux内核的朋友，可以考虑使用qemu来搭建一块虚拟的开发板，方便快捷、经济实惠\n环境搭建开发环境介绍\n\n\n名称\n版本\n工具包\n\n\n\n操作系统\nUbuntu2204\n\n\n\nQemu\n6.2.0\n\n\n\n交叉编译工具链\n11.4.0\n\n\n\nLinux内核\n5.10.186\n\n\n\nU-boot\n2022.07-rc3\n\n\n\nbusybox\n1.36.1\n\n\n\nUbuntu22.0切换软件源sudo cp /etc/apt/sources.list /etc/apt/sources.list.baksudo vi /etc/apt/sources.list # 将sources.list替换为以下内容deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse # 更新软件源列表并升级已安装的软件包sudo apt update\n\n配置安装交叉编译环境sudo apt install -y gcc-arm-linux-gnueabisudo apt install -y g++-arm-linux-gnueabisudo apt install -y build-essential openssh-server vim net-tools flex bison libncurses-dev libssl-dev u-boot-tools\n\n搭建qemu运行环境# qemu依赖包sudo apt-get -y install zlib1g-dev sudo apt-get -y install libglib2.0-0sudo apt-get -y install libglib2.0-devsudo apt-get -y install libtoolsudo apt-get -y install libsdl1.2-devsudo apt-get -y install libpixman-1-0sudo apt-get -y install libpixman-1-devsudo apt-get -y install autoconf # 安装qemusudo apt install -y qemu-system\n\n检查环境搭建是否成功交叉编译工具链sun@ldspdvs:~$ arm-linux-gnueabi-gcc -vUsing built-in specs.COLLECT_GCC=arm-linux-gnueabi-gccCOLLECT_LTO_WRAPPER=/usr/lib/gcc-cross/arm-linux-gnueabi/11/lto-wrapperTarget: arm-linux-gnueabiConfigured with: ../src/configure -v --with-pkgversion=&#x27;Ubuntu 11.4.0-1ubuntu1~22.04&#x27; --with-bugurl=file:///usr/share/doc/gcc-11/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-11 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-libitm --disable-libquadmath --disable-libquadmath-support --enable-plugin --with-system-zlib --enable-libphobos-checking=release --without-target-system-zlib --enable-multiarch --disable-sjlj-exceptions --with-specs=&#x27;%&#123;mfloat-abi=hard:-march=armv7-a -mcpu=generic-armv7-a -mfloat-abi=hard&#125;&#x27; --with-arch=armv5t --with-float=soft --disable-werror --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=arm-linux-gnueabi --program-prefix=arm-linux-gnueabi- --includedir=/usr/arm-linux-gnueabi/include --with-build-config=bootstrap-lto-lean --enable-link-serialization=2Thread model: posixSupported LTO compression algorithms: zlib zstdgcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04) sun@ldspdvs:~$ \n\n虚拟开发板QEMUsun@ldspdvs:~$ qemu-system-arm --versionQEMU emulator version 6.2.0 (Debian 1:6.2+dfsg-2ubuntu6.16)Copyright (c) 2003-2021 Fabrice Bellard and the QEMU Project developerssun@ldspdvs:~$ \n\n编译Linux内核建立workspace工作空间sudo mkdir -p /home/workspace/objects\n\n获取Linux内核源码cd /home/workspacesudo wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.186.tar.xz\n\n解压Linux内核源码sudo tar -xvf linux-5.10.186.tar.xz\n\n编译Linux内核源码进入源码根目录\ncd linux-5.10.191\n\n创建automake_arm32.sh（笔者的电脑是12核CPU所以采用-j12进行编译，读者编译过程中可根据实际情况进行调整）\nsun@ldspdvs:/home/workspace/linux-5.10.186$ sudo touch automake_arm32.shsun@ldspdvs:/home/workspace/linux-5.10.186$ sudo chmod 777 automake_arm32.sh sun@ldspdvs:/home/workspace/linux-5.10.186$ vim automake_arm32.sh # 在automake_arm32.sh中填入以下内容make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- vexpress_defconfig O=../objects/vexpress-v2p-ca9make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig O=../objects/vexpress-v2p-ca9make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j12 O=../objects/vexpress-v2p-ca9make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- LOADADDR=0x60003000 uImage -j12 O=../objects/vexpress-v2p-ca9\n\n运行automake_arm32.sh编译\n./automake_arm32.sh\n\n编译过程可能出现以下界面，即menuconfig，目前阶段不关注，按两下Esc退出这个界面继续编译即可\n\n在Qemu试运行Linux内核源码进入objects目录\ncd /home/workspace/objects\n\n创建qemu-start-vexpress-a9.sh\nsun@ldspdvs:/home/workspace/objects$ sudo touch qemu-start-vexpress-a9.shsun@ldspdvs:/home/workspace/objects$ sudo chmod 777 qemu-start-vexpress-a9.sh sun@ldspdvs:/home/workspace/objects$ vim qemu-start-vexpress-a9.sh  #! /bin/shqemu-system-arm -M vexpress-a9 \\        -m 512M \\        -kernel vexpress-v2p-ca9/arch/arm/boot/zImage \\        -dtb vexpress-v2p-ca9/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \\        -nographic\n\nLinux内核启动过程会打印大量信息，最后因为没挂载根文件系统导致\nKernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.10.186 #7Hardware name: ARM-Versatile Express[&lt;8010f264&gt;] (unwind_backtrace) from [&lt;8010afb4&gt;] (show_stack+0x10/0x14)[&lt;8010afb4&gt;] (show_stack) from [&lt;80881254&gt;] (dump_stack+0x94/0xa8)[&lt;80881254&gt;] (dump_stack) from [&lt;8087d0b4&gt;] (panic+0x124/0x32c)[&lt;8087d0b4&gt;] (panic) from [&lt;80b017a8&gt;] (mount_block_root+0x1e8/0x26c)[&lt;80b017a8&gt;] (mount_block_root) from [&lt;80b01aec&gt;] (prepare_namespace+0x150/0x18c)[&lt;80b01aec&gt;] (prepare_namespace) from [&lt;80885f8c&gt;] (kernel_init+0x8/0x118)[&lt;80885f8c&gt;] (kernel_init) from [&lt;80100148&gt;] (ret_from_fork+0x14/0x2c)Exception stack(0x810b9fb0 to 0x810b9ff8)9fa0:                                     00000000 00000000 00000000 000000009fc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000009fe0: 00000000 00000000 00000000 00000000 00000013 00000000---[ end Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0) ]---\n\n挂载根文件系统根文件系统首先是内核启动时所mount的第一个文件系统，内核代码映像文件保存在根文件系统中，而系统引导启动程序会在根文件系统挂载之后从中把一些基本的初始化脚本和服务等加载到内存中去运行。本节将介绍如何编译和制作Linux最小系统的根文件系统，并通过sd卡或者nfs挂载根文件系统。\n编译、安装根文件系统下载并解压busybox源码\ncd /home/workspacesudo wget https://busybox.net/downloads/busybox-1.36.1.tar.bz2sudo tar -xvf busybox-1.36.1.tar.bz2\n\n自动编译脚本制作automake_arm32.sh自动编译脚本\ncd busybox-1.36.1sun@ldspdvs:/home/workspace/busybox-1.36.1$ sudo touch automake_arm32.shsun@ldspdvs:/home/workspace/busybox-1.36.1$ sudo chmod 777 automake_arm32.shsun@ldspdvs:/home/workspace/busybox-1.36.1$ vim automake_arm32.sh  # 在automake_arm32.sh中添加下列代码make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- cleanmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfigmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j12make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- CONFIG_PREFIX=../objects/rootfs-arm32 install\n\n编译过程中会出现menuconfig界面，需要将“Settings-&gt;Build Options-&gt;Build static binary”选上\n\n补充根文件夹系统busybox编译完成后，只是初步具有了维持linux操作系统基本运行所需的可执行文件，还有设备节点、动态链接库、引导启动相关代码、用户相关信息等，需要根据开发板自身的特性做定制和适配，接下来将适配vexpress-a9开发板补充根文件系统相关内容\n进入根文件系统目录cd /home/workspace/objects/rootfs-arm32\n\n创建设备节点sun@ldspdvs:/home/workspace/objects/rootfs-arm32$ sudo mkdir devsun@ldspdvs:/home/workspace/objects/rootfs-arm32$ sudo mknod -m 666 dev/tty1 c 4 1sudo mknod -m 666 dev/tty2 c 4 2sudo mknod -m 666 dev/tty3 c 4 3sudo mknod -m 666 dev/tty4 c 4 4sudo mknod -m 666 dev/console c 5 1sudo mknod -m 666 dev/null c 1 3sun@ldspdvs:/home/workspace/objects/rootfs-arm32$ ll dev总计 8drwxr-xr-x 2 root root 4096  1月 21 23:12 ./drwxr-xr-x 6 root root 4096  1月 21 23:12 ../crw-rw-rw- 1 root root 5, 1  1月 21 23:12 consolecrw-rw-rw- 1 root root 1, 3  1月 21 23:12 nullcrw-rw-rw- 1 root root 4, 1  1月 21 23:12 tty1crw-rw-rw- 1 root root 4, 2  1月 21 23:12 tty2crw-rw-rw- 1 root root 4, 3  1月 21 23:12 tty3crw-rw-rw- 1 root root 4, 4  1月 21 23:12 tty4sun@ldspdvs:/home/workspace/objects/rootfs-arm32$\n\n安装动态链接库sun@ldspdvs:/home/workspace/objects/rootfs-arm32$ sudo mkdir libsun@ldspdvs:/home/workspace/objects/rootfs-arm32$ sudo cp -d /usr/arm-linux-gnueabi/lib/*.so* ./lib\n\n配置初始化进程rcSsudo mkdir -p etc/init.dsudo touch etc/init.d/rcSsudo chmod 777 etc/init.d/rcSvim etc/init.d/rcS # 在rcS中填入以下内容#!/bin/shPATH=/bin:/sbin:/usr/bin:/usr/sbinexport LD_LIBRARY_PATH=/lib:/usr/lib/bin/mount -n -t ramfs ramfs /var/bin/mount -n -t ramfs ramfs /tmp/bin/mount -n -t sysfs none /sys/bin/mount -n -t ramfs none /dev/bin/mkdir /var/tmp/bin/mkdir /var/modules/bin/mkdir /var/run/bin/mkdir /var/log/bin/mkdir -p /dev/pts/bin/mkdir -p /dev/shm/sbin/mdev -s/bin/mount -aecho &quot;-----------------------------------&quot;echo &quot;*****welcome to vexpress board*****&quot;echo &quot;-----------------------------------&quot;\n\n配置文件系统fstabsudo touch etc/fstabsudo chmod 777 etc/fstabvim etc/fstab # 在fstab中填入以下内容proc    /proc           proc    defaults        0       0none    /dev/pts        devpts  mode=0622       0       0mdev    /dev            ramfs   defaults        0       0sysfs   /sys            sysfs   defaults        0       0tmpfs   /dev/shm        tmpfs   defaults        0       0tmpfs   /dev            tmpfs   defaults        0       0tmpfs   /mnt            tmpfs   defaults        0       0var     /dev            tmpfs   defaults        0       0ramfs   /dev            ramfs   defaults        0       0\n\n配置初始化脚本sudo touch etc/inittabsudo chmod 777 etc/inittab vim etc/inittab # 在inittab中输入以下内容::sysinit:/etc/init.d/rcS ::askfirst:-/bin/sh::restart:/sbin/init ::ctrlaltdel:/sbin/reboot::shutdown:/bin/umount -a -r\n\n配置环境变量sudo touch etc/profilesudo chmod 777 etc/profilevim etc/profile # 在profile中添加以下内容#!/bin/sh USER=&quot;root&quot;LOGNAME=$USER# export HOSTNAME=vexpress-a9export HOSTNAME=`cat /etc/sysconfig/HOSTNAME`export USER=rootexport HOME=rootexport PS1=&quot;[$USER@$HOSTNAME:\\w]\\#&quot;PATH=/bin:/sbin:/usr/bin:/usr/sbin LD_LIBRARY_PATH=/lib:/usr/lib:$LD_LIBRARY_PATHexport PATH LD_LIBRARY_PATH\n\n增加主机名sudo mkdir etc/sysconfigsudo chmod 777 etc/sysconfigvim etc/sysconfig/HOSTNAME # 在HOSTNAME中添加以下内容vexpress-a9\n\n创建其他文件夹sudo mkdir mnt proc root sys tmp var\n\n查看创建的文件sun@ldspdvs:/home/workspace/objects/rootfs-arm32$ ll总计 56drwxr-xr-x 14 root root 4096  1月 21 23:24 ./drwxr-xr-x  4 root root 4096  1月 21 23:09 ../drwxr-xr-x  2 root root 4096  1月 21 23:09 bin/drwxr-xr-x  2 root root 4096  1月 21 23:12 dev/drwxr-xr-x  4 root root 4096  1月 21 23:23 etc/drwxr-xr-x  2 root root 4096  1月 21 23:14 lib/lrwxrwxrwx  1 root root   11  1月 21 23:09 linuxrc -&gt; bin/busybox*drwxr-xr-x  2 root root 4096  1月 21 23:24 mnt/drwxr-xr-x  2 root root 4096  1月 21 23:24 proc/drwxr-xr-x  2 root root 4096  1月 21 23:24 root/drwxr-xr-x  2 root root 4096  1月 21 23:09 sbin/drwxr-xr-x  2 root root 4096  1月 21 23:24 sys/drwxr-xr-x  2 root root 4096  1月 21 23:24 tmp/drwxr-xr-x  4 root root 4096  1月 21 23:09 usr/drwxr-xr-x  2 root root 4096  1月 21 23:24 var/sun@ldspdvs:/home/workspace/objects/rootfs-arm32$ \n\n通过SD卡挂载根文件系统自动打包脚本编译安装完成后，进入object目录，并制作自动打包脚本makefs-arm32.sh\ncd /home/workspace/objectssudo mkdir /mnt/rootfssudo chmod 777 /mnt/rootfssudo touch makefs-arm32.shsudo chmod 777 makefs-arm32.shvim makefs-arm32.sh # 在makefs-arm32.sh中添加下列代码dd if=/dev/zero of=rootfs-arm32.ext3 bs=1M count=64mkfs.ext3 rootfs-arm32.ext3sudo mount -t ext3 rootfs-arm32.ext3 /mnt/rootfs -o loopsudo cp -rf rootfs-arm32/* /mnt/rootfs/sudo umount /mnt/rootfs/\n\n运行自动打包脚本makefs-arm32.sh，运行完成后将在objects目录下生成一个rootfs-arm32.ext3文件，将作为外设sd卡加入到开发板上\nsun@ldspdvs:/home/workspace/objects$ ll总计 20drwxr-xr-x  4 root root 4096  1月 21 23:31 ./drwxr-xr-x  5 root root 4096  1月 21 23:04 ../-rwxrwxrwx  1 root root  202  1月 21 23:32 makefs-arm32.sh*drwxr-xr-x 14 root root 4096  1月 21 23:24 rootfs-arm32/drwxr-xr-x 21 root root 4096  1月 21 22:57 vexpress-v2p-ca9/sun@ldspdvs:/home/workspace/objects$ sudo ./makefs-arm32.sh 记录了64+0 的读入记录了64+0 的写出67108864字节（67 MB，64 MiB）已复制，0.0487807 s，1.4 GB/smke2fs 1.46.5 (30-Dec-2021)丢弃设备块： 完成                        创建含有 16384 个块（每块 4k）和 16384 个 inode 的文件系统正在分配组表： 完成                        正在写入 inode表： 完成                        创建日志（1024 个块）： 完成写入超级块和文件系统账户统计信息： 已完成sun@ldspdvs:/home/workspace/objects$ sudo chmod 777 rootfs-arm32.ext3 sun@ldspdvs:/home/workspace/objects$ ll总计 21108drwxr-xr-x  4 root root     4096  1月 21 23:34 ./drwxr-xr-x  5 root root     4096  1月 21 23:04 ../-rwxrwxrwx  1 root root      202  1月 21 23:32 makefs-arm32.sh*drwxr-xr-x 14 root root     4096  1月 21 23:24 rootfs-arm32/-rwxrwxrwx  1 root root 67108864  1月 21 23:34 rootfs-arm32.ext3*drwxr-xr-x 21 root root     4096  1月 21 22:57 vexpress-v2p-ca9/sun@ldspdvs:/home/workspace/objects$\n\n挂载根文件系统修改qemu-start-vexpress-a9.sh\nsun@ldspdvs:/home/workspace/objects$ vim qemu-start-vexpress-a9.sh  # 将qemu-start-vexpress-a9.sh修改为以下内容#! /bin/shqemu-system-arm -M vexpress-a9 \\        -m 512M \\        -kernel vexpress-v2p-ca9/arch/arm/boot/zImage \\        -dtb vexpress-v2p-ca9/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \\        -nographic \\        -append &quot;root=/dev/mmcblk0 rw console=ttyAMA0&quot; \\            -sd rootfs-arm32.ext3\n\n出现下述内容代表启动成功\n\n通过NFS挂载根文件系统在进行软件调试的过程中，我们经常需与开发板交换文件，或者直接修改板子上的配置文件，如果使用SD卡挂载根文件系统，则每次进行文件交换都需要重启操作系统。为了提高开发效率，我们可以通过NFS共享主机上的根文件系统给开发板，实现在主机上修改完善代码并编译后，直接在开发板上运行，无缝对接。\n安装NFS服务器安装\nsudo apt install -y nfs-kernel-server\n\n配置\nsudo mkdir -p /sync/rootfssudo chmod 777 /etc/exportssudo vim /etc/exports # 在/etc/exports文件中添加以下内容/sync/rootfs *(rw,sync,no_root_squash,no_subtree_check) # ！！！注意上述内容应严格按照格式输入，不能随意增减空格！！！\n\n重启NFS服务器\nsudo /etc/init.d/rpcbind restartsudo /etc/init.d/nfs-kernel-server restart\n\n将安装好的根文件系统拷贝到&#x2F;sync&#x2F;rootfs内\ncd /home/workspace/objects/rootfs-arm32sudo cp -rf * /sync/rootfs/sudo chmod 777 -R /sync/rootfs\n\n内核NFS兼容问题为解决Linux内核与NFS服务器的兼容问题，目前有两种方案供读者参考，实在不行可以把两种都用上\n重新编译内核，并在menuconfig下开启NFS4支持位置：File System -&gt; Network File Systems-&gt;NFS client support for NFS version 4\n设置Ubuntu2204，使之兼容NFS-V2和NFS-V3并增加调试功能sudo vim /etc/default/nfs-kernel-server # 将nfs-kernel-server文件内的RPCSVCGSSDOPTS属性修改如下：RPCSVCGSSDOPTS=&quot;--nfs-version 2,3,4 --debug --syslog&quot;# 修改后重启NFS服务器sudo /etc/init.d/rpcbind restartsudo /etc/init.d/nfs-kernel-server restart\n\n测试NFS挂载根文件系统配置主机网桥（其中eth0是Ubuntu系统的网卡，根据实际调整）\nsudo apt install -y uml-utilities bridge-utilssudo vim /etc/network/interfaces # 修改interfaces文件如下auto loiface lo inet loopback auto eth0 auto br0iface br0 inet dhcpbridge_ports eth0====================================================================================sun@ldspdvs:/home/workspace/objects/rootfs-arm32$ ifconfigens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.58.146  netmask 255.255.255.0  broadcast 192.168.58.255        inet6 fe80::d763:3d05:1073:739c  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 00:0c:29:f3:7c:aa  txqueuelen 1000  (以太网)        RX packets 272895  bytes 394360550 (394.3 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 14324  bytes 1257519 (1.2 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;        loop  txqueuelen 1000  (本地环回)        RX packets 464  bytes 44975 (44.9 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 464  bytes 44975 (44.9 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0sun@ldspdvs:/home/workspace/objects/rootfs-arm32$ sudo vim /etc/network/interfacessun@ldspdvs:/home/workspace/objects/rootfs-arm32$ cat /etc/network/interfaces auto loiface lo inet loopback auto ens33 auto br0iface br0 inet dhcpbridge_ports ens33sun@ldspdvs:/home/workspace/objects/rootfs-arm32$\n\n创建tap0网卡，用于连接qemu虚拟开发板\nsudo tunctl -u root -t tap0sudo ifconfig tap0 172.16.16.10 promisc up\n\n创建qemu-start-vexpress-a9-nfs.sh\ncd /home/workspace/objectssudo touch qemu-start-vexpress-a9-nfs.shsudo chmod 777 qemu-start-vexpress-a9-nfs.shvim qemu-start-vexpress-a9-nfs.sh # 在qemu-start-vexpress-a9-nfs.sh内添加以下内容sudo qemu-system-arm \\        -M vexpress-a9 \\        -m 512M \\        -kernel vexpress-v2p-ca9/arch/arm/boot/zImage \\        -dtb vexpress-v2p-ca9/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \\        -net tap,ifname=tap0,script=no,downscript=no \\        -net nic,macaddr=00:16:3e:00:00:01 \\        -nographic \\        -append &quot;root=/dev/nfs rw nfsroot=172.16.16.10:/sync/rootfs,proto=tcp,nfsvers=3,nolock init=/linuxrc console=ttyAMA0 ip=172.16.16.20&quot; \\    sun@ldspdvs:/home/workspace/objects$ sudo ./qemu-start-vexpress-a9-nfs.sh \n\n启动成功后如下所示\n\n通过U-boot引导加载内核编译安装U-boot下载解压U-boot源码cd /home/workspacewget https://ftp.denx.de/pub/u-boot/u-boot-2022.07-rc3.tar.bz2tar -xvf u-boot-2022.07-rc3.tar.bz2\n\n制作automake_arm32.shcd u-boot-2022.07-rc3vim automake_arm32.sh # 在automake_arm32.sh中添加下列代码# !/bin/bash# make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- clean# make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- mrpropermake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- vexpress_ca9x4_defconfig O=../objects/u-boot-armmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig O=../objects/u-boot-armmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j12 O=../objects/u-boot-arm\n\n运行automake_arm32.sh编译安装U-Boot./automake_arm32.sh\n\n出现下述内容证明U-Boot编译完毕\n配置主机tftp服务器安装tftp服务器sudo apt-get install tftp-hpa tftpd-hpa xinetd\n\n配置tftp路径文件sudo mkdir -p /sync/tftpsudo chmod 777 /sync/tftpsudo touch /etc/default/tftpd-hpasudo vim /etc/default/tftpd-hpa # 在tftpd-hpa文件下添加以下内容TFTP_USERNAME=&quot;tftp&quot;TFTP_DIRECTORY=&quot;/sync/tftp&quot; #该路径即为tftp可以访问到的路径TFTP_ADDRESS=&quot;0.0.0.0:69&quot;TFTP_OPTIONS=&quot;-l -c -s&quot;\n\n重启tftp服务器sudo /etc/init.d/tftpd-hpa restart\n\n系统开机自动tftp服务systemctl enable tftpd-hpa.servicetftpd-hpa.service is not a native service, redirecting to systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install enable tftpd-hpajcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/u-boot-2022.07-rc3$ \n\n将设备树和Linux内核文件拷贝到tftp目录下cd /home/workspace/objectssudo cp vexpress-v2p-ca9/arch/arm/boot/dts/vexpress-v2p-ca9.dtb /sync/tftp/sudo cp vexpress-v2p-ca9/arch/arm/boot/uImage /sync/tftp/\n\n虚拟主机网络配置，创建tap0网卡，用于连接qemu虚拟开发板此处已在测试NFS挂载根文件系统中设置过\nsudo tunctl -u root -t tap0sudo ifconfig tap0 172.16.16.10 promisc up\n\n试运行U-boot创建qemu-start-uboot-arm32-uboot-manual.sh脚本\ncd /home/workspace/objectssudo touch qemu-start-uboot-arm32-uboot-manual.shsudo chmod 777 qemu-start-uboot-arm32-uboot-manual.shvim qemu-start-uboot-arm32-uboot-manual.sh # 在qemu-start-uboot-arm32.sh内添加以下代码sudo qemu-system-arm \\        -M vexpress-a9 \\        -m 512M \\        -kernel u-boot-arm/u-boot \\        -net tap,ifname=tap0,script=no,downscript=no \\        -net nic,macaddr=00:16:3e:00:00:01 \\        -nographic \\\n\n运行脚本./qemu-start-uboot-arm32.sh\n\n出现以下界面，说明运行成功（注意在Hit any key to stop autoboot出现时按任意键进入命令行）\n\n在U-Boot命令行下输入以下代码，尝试引导内核setenv bootargs &#x27;root=/dev/nfs rw nfsroot=172.16.16.10:/sync/rootfs,proto=tcp,nfsvers=3,nolock init=/linuxrc console=ttyAMA0 ip=172.16.16.20&#x27;setenv ipaddr 172.16.16.20setenv serverip 172.16.16.10setenv netmask 255.255.0.0saveenv tftp 60003000 uImagetftp 60500000 vexpress-v2p-ca9.dtbbootm 60003000 - 60500000\n\n实际\njcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/objects$ sudo ./qemu-start-uboot-arm32-uboot-manual.sh U-Boot 2022.07-rc3 (Jan 22 2024 - 13:51:57 +0800)DRAM:  512 MiBWARNING: Caches not enabledCore:  19 devices, 10 uclasses, devicetree: embedFlash: 64 MiBMMC:   mmci@5000: 0Loading Environment from Flash... *** Warning - bad CRC, using default environmentIn:    serialOut:   serialErr:   serialNet:   eth0: ethernet@3,02000000Hit any key to stop autoboot:  0 =&gt; setenv bootargs &#x27;root=/dev/nfs rw nfsroot=172.16.16.10:/sync/rootfs,proto=tcp,nfsvers=3,nolock init=/linuxrc console=ttyAMA0 ip=172.16.16.20&#x27;=&gt; setenv ipaddr 172.16.16.20=&gt; setenv serverip 172.16.16.10=&gt; setenv netmask 255.255.0.0=&gt; saveenvSaving Environment to Flash... Error: start and/or end address not on sector boundaryError: start and/or end address not on sector boundaryFailed (1)=&gt; =&gt; =&gt; tftp 60003000 uImagesmc911x: detected LAN9118 controllersmc911x: phy initializedsmc911x: MAC 00:16:3e:00:00:01Using ethernet@3,02000000 deviceTFTP from server 172.16.16.10; our IP address is 172.16.16.20Filename &#x27;uImage&#x27;.Load address: 0x60003000Loading: #################################################################         #################################################################         #################################################################         #################################################################         #################################################################         ########         27.6 MiB/sdoneBytes transferred = 4886088 (4a8e48 hex)smc911x: MAC 00:16:3e:00:00:01=&gt; tftp 60500000 vexpress-v2p-ca9.dtbsmc911x: detected LAN9118 controllersmc911x: phy initializedsmc911x: MAC 00:16:3e:00:00:01Using ethernet@3,02000000 deviceTFTP from server 172.16.16.10; our IP address is 172.16.16.20Filename &#x27;vexpress-v2p-ca9.dtb&#x27;.Load address: 0x60500000Loading: #         6.8 MiB/sdoneBytes transferred = 14171 (375b hex)smc911x: MAC 00:16:3e:00:00:01=&gt; bootm 60003000 - 60500000## Booting kernel from Legacy Image at 60003000 ...   Image Name:   Linux-5.10.186   Image Type:   ARM Linux Kernel Image (uncompressed)   Data Size:    4886024 Bytes = 4.7 MiB   Load Address: 60003000   Entry Point:  60003000   Verifying Checksum ... OK## Flattened Device Tree blob at 60500000   Booting using the fdt blob at 0x60500000   Loading Kernel Image   Loading Device Tree to 7fb1d000, end 7fb2375a ... OKStarting kernel ...Booting Linux on physical CPU 0x0Linux version 5.10.186 (jcrj@SQA-JCRJ-01) (arm-linux-gnueabi-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0, GNU ld (GNU Binutils for Ubuntu) 2.38) #3 SMP Mon Jan 22 13:46:34 CST 2024CPU: ARMv7 Processor [410fc090] revision 0 (ARMv7), cr=10c5387dCPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cacheOF: fdt: Machine model: V2P-CA9OF: fdt: Ignoring memory block 0x80000000 - 0x80000004................Freeing unused kernel memory: 1024KRun /linuxrc as init process-----------------------------------*****welcome to vexpress board*****-----------------------------------device eth0 entered promiscuous modePlease press Enter to activate this console. [root@vexpress-a9:/]#\n\n出现下面界面证明引导成功\n固化U-boot环境变量在试运行过程中，需要输入代码修改U-boot的环境变量，如果每次启动都需要如此，则太过麻烦。真实开发板由于内置了NAND&#x2F;MMC Flash，修改后的环境变量可以使用saveenv保存下来，但是我们这部分还没有把NAND&#x2F;MMC相关支持完全做好。因此需要在U-boot源码上做一些修改，将环境变量固化下来。\n修改配置文件cd /home/workspace/u-boot-2022.07-rc3vim configs/vexpress_ca9x4_defconfig # 将CONFIG_BOOTCOMMAND的值修改为：CONFIG_BOOTCOMMAND=&quot;tftp 0x60003000 uImage;tftp 0x60500000 vexpress-v2p-ca9.dtb;setenv bootargs &#x27;root=/dev/nfs rw nfsroot=172.16.16.10:/sync/rootfs,proto=tcp,nfsvers=3,nolock init=/linuxrc ip=172.16.16.20 console=ttyAMA0&#x27;;bootm 0x60003000 - 0x60500000;&quot;\n\n修改后如下所示\n\n修改头文件&#x2F;&#x2F; 在vexpress_common.h文件末尾#endif之前添加以下代码：\nvim include/configs/vexpress_common.h // 在vexpress_common.h文件末尾#endif之前添加以下代码：#define CONFIG_IPADDR   172.16.16.20#define CONFIG_NETMASK  255.255.0.0#define CONFIG_SERVERIP 172.16.16.10\n\njcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/u-boot-2022.07-rc3$ pwd/home/jcrj/qemu_arm_a9/workspace/u-boot-2022.07-rc3jcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/u-boot-2022.07-rc3$ vim include/configs/vexpress_common.h jcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/u-boot-2022.07-rc3$ jcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/u-boot-2022.07-rc3$ tail -6 include/configs/vexpress_common.h /* Net Settings */#define CONFIG_IPADDR   172.16.16.20#define CONFIG_NETMASK  255.255.0.0#define CONFIG_SERVERIP 172.16.16.10#endif /* VEXPRESS_COMMON_H */jcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/u-boot-2022.07-rc3$\n\n重新编译U-Bootcd /home/workspace/u-boot-2022.07-rc3./automake_arm32.sh\n\n编译完成后，进入Objects目录运行U-bootcd /home/workspace/objects./qemu-start-uboot-arm32.sh\n\n运行结果应该与手动引导一致\n其他辅助优化功能虚拟开发板连接互联网修改rootfs根文件系统进入根文件系统目录\ncd /home/workspace/objects/rootfs-arm32\n\n开发板指定DNS服务器\ntouch etc/resolv.confchmod 777 etc/resolv.confvim etc/resolv.conf # 在resolv.conf文件内添加以下内容nameserver 114.114.114.114\n\n开发板初始化规则配置\nvim etc/init.d/rcS # 在rcS文件末尾添加以下内容ifconfig eth0 172.16.16.20 promisc uproute add default gw 172.16.16.10 dev eth0\n\n将修改后的根文件系统拷贝到 &#x2F;sync&#x2F;rootfs内\ncd /home/workspace/objects/rootfs-arm32sudo cp -rf * /sync/rootfs/sudo chmod 777 -R /sync/rootfs\n\n修改主机配置虚拟开发板访问互联网，不仅需要修改开发板相关配置文件，同时也需要对主机进行进一步操作，包括开启IP转发、配置静态路由、配置iptable规则等。\n主机开启IP转发\n主机配置tap虚拟网卡\n运行脚本\nU-boot+emmc启动在第四部分《通过U-boot引导加载内核》中，我们发现U-boot的环境变量修改后无法保存，需要修改源代码来固化环境变量，对启动参数的修改造成了不便。因此本节将继续深入探讨如何将U-boot的环境变量存储在emmc内，同时使用emmc存储Linux内核、设备树以及根文件系统，并在此基础上尝试引导启动最小Linux操作系统。\n制作emmc镜像文件本节制作的emmc镜像文件共256MB，分为两个部分，第一部分存放uImage和dtb，大小为32MB，第二部分存放根文件系统，大小为224MB。\n创建挂载路径sudo mkdir /mnt/rootfssudo mkdir /mnt/uboot\n\n创建自动打包脚本将&#x2F;home&#x2F;workspace&#x2F;objects下makefs-arm32.sh的内容替换为以下内容\ncd /home/workspace/objectsvim makefs-arm32.sh # 将makefs-arm32.sh的内容替换为以下内容dd if=/dev/zero of=rootfs-arm.ext3 bs=1M count=256 echo &quot;hard disk partition!&quot;sgdisk -n 0:0:+32M -c 0:uboot rootfs-arm.ext3sgdisk -n 0:0:0 -c 0:rootfs rootfs-arm.ext3sgdisk -p rootfs-arm.ext3 echo &quot;mount loop device!&quot;LOOPDEV=`losetup -f`echo $LOOPDEVsudo losetup $LOOPDEV  rootfs-arm.ext3sudo partprobe $LOOPDEVsudo losetup -lls -l /dev/loop* echo &quot;format disk to ext3&quot;echo $&#123;LOOPDEV&#125;p1echo $&#123;LOOPDEV&#125;p2sudo mkfs.ext3 $&#123;LOOPDEV&#125;p1sudo mkfs.ext3 $&#123;LOOPDEV&#125;p2sudo mount -t ext3 $&#123;LOOPDEV&#125;p1 /mnt/uboot -o loopsudo mount -t ext3 $&#123;LOOPDEV&#125;p2 /mnt/rootfs -o loopsudo cp -rf rootfs-arm32/* /mnt/rootfs/sudo cp vexpress-v2p-ca9/arch/arm/boot/dts/vexpress-v2p-ca9.dtb /mnt/uboot/sudo cp vexpress-v2p-ca9/arch/arm/boot/uImage /mnt/uboot/sudo umount /mnt/rootfs/sudo umount /mnt/uboot/sudo losetup -d $LOOPDEV\n\n运行自动打包脚本jcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/objects$ sudo ./makefs-arm32.sh 记录了256+0 的读入记录了256+0 的写出268435456字节（268 MB，256 MiB）已复制，0.18134 s，1.5 GB/shard disk partition!Creating new GPT entries in memory.Setting name!partNum is 0Warning: The kernel is still using the old partition table.The new table will be used at the next reboot or after yourun partprobe(8) or kpartx(8)The operation has completed successfully.Setting name!partNum is 1Warning: The kernel is still using the old partition table.The new table will be used at the next reboot or after yourun partprobe(8) or kpartx(8)The operation has completed successfully.Disk rootfs-arm.ext3: 524288 sectors, 256.0 MiBSector size (logical): 512 bytesDisk identifier (GUID): 3C81BB8A-E76E-49AF-B920-1DC5B7EF6B72Partition table holds up to 128 entriesMain partition table begins at sector 2 and ends at sector 33First usable sector is 34, last usable sector is 524254Partitions will be aligned on 2048-sector boundariesTotal free space is 2014 sectors (1007.0 KiB)Number  Start (sector)    End (sector)  Size       Code  Name   1            2048           67583   32.0 MiB    8300  uboot   2           67584          524254   223.0 MiB   8300  rootfsmount loop device!/dev/loop15NAME        SIZELIMIT OFFSET AUTOCLEAR RO BACK-FILE                                                DIO LOG-SEC/dev/loop1          0      0         1  1 /var/lib/snapd/snaps/bare_5.snap                           0     512/dev/loop8          0      0         1  1 /var/lib/snapd/snaps/gnome-42-2204_141.snap                0     512/dev/loop15         0      0         0  0 /home/jcrj/qemu_arm_a9/workspace/objects/rootfs-arm.ext3   0     512/dev/loop6          0      0         1  1 /var/lib/snapd/snaps/gnome-3-38-2004_143.snap              0     512/dev/loop13         0      0         1  1 /var/lib/snapd/snaps/snapd-desktop-integration_83.snap     0     512/dev/loop4          0      0         1  1 /var/lib/snapd/snaps/core22_858.snap                       0     512/dev/loop11         0      0         1  1 /var/lib/snapd/snaps/snapd_19457.snap                      0     512/dev/loop2          0      0         1  1 /var/lib/snapd/snaps/core20_2105.snap                      0     512/dev/loop0          0      0         1  1 /var/lib/snapd/snaps/core20_1974.snap                      0     512/dev/loop9          0      0         1  1 /var/lib/snapd/snaps/gtk-common-themes_1535.snap           0     512/dev/loop7          0      0         1  1 /var/lib/snapd/snaps/gnome-42-2204_120.snap                0     512/dev/loop14         0      0         1  1 /var/lib/snapd/snaps/code_149.snap                         0     512/dev/loop5          0      0         1  1 /var/lib/snapd/snaps/firefox_2987.snap                     0     512/dev/loop12         0      0         1  1 /var/lib/snapd/snaps/snapd_20671.snap                      0     512/dev/loop3          0      0         1  1 /var/lib/snapd/snaps/core22_1033.snap                      0     512/dev/loop10         0      0         1  1 /var/lib/snapd/snaps/snap-store_959.snap                   0     512brw-rw---- 1 root disk   7,   0  1月 22 08:56 /dev/loop0brw-rw---- 1 root disk   7,   1  1月 22 08:56 /dev/loop1brw-rw---- 1 root disk   7,  10  1月 22 08:56 /dev/loop10brw-rw---- 1 root disk   7,  11  1月 22 08:56 /dev/loop11brw-rw---- 1 root disk   7,  12  1月 22 08:56 /dev/loop12brw-rw---- 1 root disk   7,  13  1月 22 08:56 /dev/loop13brw-rw---- 1 root disk   7,  14  1月 22 08:56 /dev/loop14brw-rw---- 1 root disk   7,  15  1月 22 14:57 /dev/loop15brw-rw---- 1 root disk 259,   3  1月 22 14:57 /dev/loop15p1brw-rw---- 1 root disk 259,   4  1月 22 14:57 /dev/loop15p2brw-rw---- 1 root disk   7,  16  1月 22 14:56 /dev/loop16brw-rw---- 1 root disk   7,   2  1月 22 08:56 /dev/loop2brw-rw---- 1 root disk   7,   3  1月 22 08:56 /dev/loop3brw-rw---- 1 root disk   7,   4  1月 22 08:56 /dev/loop4brw-rw---- 1 root disk   7,   5  1月 22 08:56 /dev/loop5brw-rw---- 1 root disk   7,   6  1月 22 08:56 /dev/loop6brw-rw---- 1 root disk   7,   7  1月 22 08:56 /dev/loop7brw-rw---- 1 root disk   7,   8  1月 22 08:56 /dev/loop8brw-rw---- 1 root disk   7,   9  1月 22 08:56 /dev/loop9crw-rw---- 1 root disk  10, 237  1月 22 08:56 /dev/loop-controlformat disk to ext3/dev/loop15p1/dev/loop15p2mke2fs 1.46.5 (30-Dec-2021)丢弃设备块： 完成                        创建含有 8192 个块（每块 4k）和 8192 个 inode 的文件系统正在分配组表： 完成                        正在写入 inode表： 完成                        创建日志（1024 个块）： 完成写入超级块和文件系统账户统计信息： 已完成mke2fs 1.46.5 (30-Dec-2021)丢弃设备块： 完成                        创建含有 57083 个块（每块 4k）和 57088 个 inode 的文件系统文件系统 UUID：3e290f2c-d621-4fd0-bb3a-f25fd0dbcd64超级块的备份存储于下列块：         32768正在分配组表： 完成                        正在写入 inode表： 完成                        创建日志（4096 个块）： 完成写入超级块和文件系统账户统计信息： 已完成jcrj@SQA-JCRJ-01:~/qemu_arm_a9/workspace/objects$ \n\n将生成一个256MB大小的镜像文件rootfs-arm.ext3\n\n修改U-boot环境变量的保存位置上一小节生成的emmc镜像分为两部分，我们把环境变量存储在第一部分最后256KB的位置，以保证它不会与Linux内核和设备树互相干扰。\n重新编译U-bootcd /home/workspace/u-boot-2022.07-rc3./automake_arm32.sh\n\n在menuconfig界面设置环境变量存储设备，以及环境变量在设备中的具体位置和大小。由于需要将环境变量存储在emmc镜像的第一个分区的最后256KB位置，所以环境变量的设备号为emmc0，分区号为0，偏移量为0x02000000-0x00040000&#x3D;0x01FC0000，大小为0x00040000。\nmenuconfig设置路径为：Environment-&gt;Environment in an MMC device\n\n修改后，按两下Esc，保存配置，退出menuconfig，等待U-boot编译完成\n加载U-boot修改环境变量创建自动运行脚本\ncd /home/workspace/objectssudo touch qemu-start-uboot-arm32-emmc.shsudo chmod 777 qemu-start-uboot-arm32-emmc.shvim qemu-start-uboot-arm32-emmc.sh # 在qemu-start-uboot-arm32-emmc.sh文件内添加以下内容#!/bin/bashsudo tunctl -u root -t tap0sudo ifconfig tap0 172.16.16.10 promisc upsudo route add -net 172.16.0.0 netmask 255.255.0.0 dev tap0sudo iptables -t nat -A POSTROUTING -s 172.16.0.0/16 -o eth0 -j MASQUERADEsudo netfilter-persistent savesudo qemu-system-arm \\        -M vexpress-a9 \\        -m 512M \\        -kernel u-boot-arm/u-boot \\        -net tap,ifname=tap0,script=no,downscript=no \\        -net nic,macaddr=00:16:3e:00:00:01 \\        -nographic \\        -sd rootfs-arm.ext3\n\n运行脚本，在自动挂载倒计时结束前按任意键进入命令行模式\n可以看到此时emmc镜像仍未存储环境变量，加载的是默认变量\n\n在U-boot命令行中输入以下命令设置环境变量setenv bootargs &#x27;root=/dev/mmcblk0p2 rw console=ttyAMA0,38400n8&#x27;setenv bootcmd &quot;load mmc 0:1 0x60003000 uImage;load mmc 0:1 0x60500000 vexpress-v2p-ca9.dtb;bootm 0x60003000 - 0x60500000;&quot;saveenv\n\n\n保存成功后，重新启动U-boot\n\n\n问题及解决方案Ubuntu2204网卡丢失查看本地IPjcrj@SQA-JCRJ-01:~$ ifconfigbr-593cc1b66d28: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255        ether 02:42:e2:a9:db:58  txqueuelen 0  (以太网)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255        inet6 fe80::42:43ff:fef5:b4a2  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 02:42:43:f5:b4:a2  txqueuelen 0  (以太网)        RX packets 369  bytes 25324 (25.3 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 250  bytes 26842 (26.8 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;        loop  txqueuelen 1000  (本地环回)        RX packets 1798  bytes 133078 (133.0 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 1798  bytes 133078 (133.0 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0veth948b02a: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet6 fe80::44a5:58ff:fe17:3f7c  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 46:a5:58:17:3f:7c  txqueuelen 0  (以太网)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 83  bytes 9130 (9.1 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0vethde0c1ce: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet6 fe80::3415:67ff:feac:e7a6  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 36:15:67:ac:e7:a6  txqueuelen 0  (以太网)        RX packets 27  bytes 1774 (1.7 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 84  bytes 7704 (7.7 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0vethf73e2dc: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet6 fe80::243b:61ff:fea8:8b5b  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 26:3b:61:a8:8b:5b  txqueuelen 0  (以太网)        RX packets 13  bytes 1098 (1.0 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 27  bytes 3260 (3.2 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0vethfdaf20c: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet6 fe80::acb4:8fff:fe32:f35a  prefixlen 64  scopeid 0x20&lt;link&gt;        ether ae:b4:8f:32:f3:5a  txqueuelen 0  (以太网)        RX packets 13  bytes 1098 (1.0 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 27  bytes 3260 (3.2 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255        ether 52:54:00:90:4b:76  txqueuelen 1000  (以太网)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0jcrj@SQA-JCRJ-01:~$ \n\n查看本地网卡设备名可以看到本地网卡设备信息为logical name: eno1\njcrj@SQA-JCRJ-01:~$ sudo lshw -c network[sudo] jcrj 的密码：   *-network DISABLED           description: Ethernet interface       product: Ethernet Connection (17) I219-V       vendor: Intel Corporation       physical id: 1f.6       bus info: pci@0000:00:1f.6       logical name: eno1       version: 11       serial: ec:d6:8a:be:bd:27       capacity: 1Gbit/s       width: 32 bits       clock: 33MHz       capabilities: pm msi bus_master cap_list ethernet physical tp 10bt 10bt-fd 100bt 100bt-fd 1000bt-fd autonegotiation       configuration: autonegotiation=on broadcast=yes driver=e1000e driverversion=6.5.0-14-generic firmware=2.3-4 latency=0 link=no multicast=yes port=twisted pair       resources: irq:125 memory:80a00000-80a1ffffjcrj@SQA-JCRJ-01:~$ \n\n重启网络服务# 停止服务jcrj@SQA-JCRJ-01:~$ sudo service NetworkManager stop# 删除文件jcrj@SQA-JCRJ-01:~$ sudo rm /etc/NetworkManager/NetworkManager.staterm: 无法删除 &#x27;/etc/NetworkManager/NetworkManager.state&#x27;: 没有那个文件或目录# 修改配置文件# 将NetworkManager.conf 中的managed=false改为managed=true保存jcrj@SQA-JCRJ-01:~$ sudo vim /etc/NetworkManager/NetworkManager.conf jcrj@SQA-JCRJ-01:~$ jcrj@SQA-JCRJ-01:~$ cat /etc/NetworkManager/NetworkManager.conf [main]plugins=ifupdown,keyfile[ifupdown]managed=true[device]wifi.scan-rand-mac-address=nojcrj@SQA-JCRJ-01:~$ jcrj@SQA-JCRJ-01:~$ sudo service NetworkManager startjcrj@SQA-JCRJ-01:~$ \n\nTftp使用基本信息\n\n\n设备名称\nIP\n属性\n备注\n\n\n\nSQA-JCRJ-01\n172.16.16.10\nserver\ntap0: flags&#x3D;4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500        inet 172.16.16.10  netmask 255.255.0.0  broadcast 172.16.255.255        inet6 fe80::ec13:32ff:fe7e:70ba  prefixlen 64  scopeid 0x20&lt;link&gt;        ether ee:13:32:7e:70:ba  txqueuelen 1000  (以太网)        RX packets 51  bytes 3314 (3.3 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 110  bytes 9805 (9.8 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n\nvexpress-a9\n172.16.16.20\nclient\neth0      Link encap:Ethernet  HWaddr 00:16:3E:00:00:01          inet addr:172.16.16.20  Bcast:172.16.255.255  Mask:255.255.0.0          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1          RX packets:76 errors:0 dropped:17 overruns:0 frame:0          TX packets:51 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:5668 (5.5 KiB)  TX bytes:3314 (3.2 KiB)          Interrupt:26\n\n\nServer -&gt; ClientServerjcrj@SQA-JCRJ-01:/sync/tftp$ cat server-client.txt server to clienttftp&gt; ?tftp-hpa 5.2Commands may be abbreviated.  Commands are:connect         connect to remote tftpmode            set file transfer modeput             send fileget             receive filequit            exit tftpverbose         toggle verbose modetrace           toggle packet tracingliteral         toggle literal mode, ignore &#x27;:&#x27; in file namestatus          show current statusbinary          set mode to octetascii           set mode to netasciirexmt           set per-packet transmission timeouttimeout         set total retransmission timeout?               print help informationhelp            print help informationtftp&gt; q\n\nClienttftp -g -r 远程目标文件 远程地址\n[root@vexpress-a9:/tmp]#tftpBusyBox v1.36.1 (2024-01-19 17:01:13 CST) multi-call binary.Usage: tftp [OPTIONS] HOST [PORT]Transfer a file from/to tftp server        -l FILE        Local FILE        -r FILE        Remote FILE        -g        Get file        -p        Put file        -b SIZE        Transfer blocks in bytes[root@vexpress-a9:/tmp]#[root@vexpress-a9:/tmp]#lsa.txt  v.txt[root@vexpress-a9:/tmp]#tftp -g -r server-client.txt 172.16.16.10server-client.txt    100% |********************************|    17  0:00:00 ETA[root@vexpress-a9:/tmp]#lsa.txt              server-client.txt  v.txt[root@vexpress-a9:/tmp]#cat server-client.txt server to client[root@vexpress-a9:/tmp]#\n\nClient -&gt; ServerClient[root@vexpress-a9:/tmp]#vim clent-server.txt[root@vexpress-a9:/tmp]#lsa.txt              clent-server.txt   server-client.txt  v.txt[root@vexpress-a9:/tmp]#cat clent-server.txt client server[root@vexpress-a9:/tmp]#tftp -p -r client_server.txt -l client-server.txt 172.16.16.10client_server.txt    100% |********************************|    14  0:00:00 ETA[root@vexpress-a9:/tmp]#\n\nServerjcrj@SQA-JCRJ-01:/sync/tftp$ lsa.txt  client_server.txt  server-client.txt  uImage  vexpress-v2p-ca9.dtb  v.txtjcrj@SQA-JCRJ-01:/sync/tftp$ cat client_server.txt client serverjcrj@SQA-JCRJ-01:/sync/tftp$ \n\n离线安装软件包官方网址https://ubuntu.pkgs.org/\nGCCMAKE\nSSH\n","categories":["技术尝试"],"tags":["Qemu","ARM"]}]